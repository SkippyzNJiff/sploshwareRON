#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_Tablet_MapMarker

#include "Basic.hpp"

#include "st_PreMissionPlayerNode_structs.hpp"
#include "Slate_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "st_PreMissionMarkers_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C
// 0x0278 (0x0548 - 0x02D0)
class UW_PreMission_Tablet_MapMarker_C final : public UTabletMapElementWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Hover;                                             // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_PlayerNodes;                                    // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               IconOverlay;                                       // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_icon;                                          // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_SecondaryIcon;                                 // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridPanel*                             NodeGrid;                                          // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode;                    // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_1;                  // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_2;                  // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_3;                  // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_4;                  // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_5;                  // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_6;                  // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_7;                  // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_8;                  // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture2D*                             Icon;                                              // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             OutlineIcon;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             SecondaryIcon;                                     // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Rotation;                                          // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RotationPivot;                                     // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Size;                                              // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotates;                                           // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RotateSecondaryIcon;                               // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct Fst_PreMissionPlayerNode>       PlayerNodes;                                       // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   MarkerName;                                        // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct Fst_PreMissionMarkers                  MarkerStyle;                                       // 0x03C0(0x0080)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          HasPlayerNodes;                                    // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnchors                               NodeAnchor;                                        // 0x0448(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UWidget*                                RotatingIcon;                                      // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentAngle;                                      // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HidePlayerNodes;                                   // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          UseOutline;                                        // 0x0479(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_47A[0x6];                                      // 0x047A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_PlanningMap_C*            Parent;                                            // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         ID;                                                // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotating;                                          // 0x048C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker)> OnPressed; // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker)> OnReleased; // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker)> OnClicked; // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector2D                              Coordinates;                                       // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlanningMarker                        MarkerData;                                        // 0x04D0(0x0030)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	class AReadyOrNotPlayerState*                 MarkerOwner;                                       // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker, double Rotation)> OnRotated; // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector2D                              InitialClick;                                      // 0x0518(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CenterPivotOnly;                                   // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_529[0x7];                                      // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotPlayerState*                 AssignedPlayerState;                               // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker, double Rotation)> OnRotated2; // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Construct();
	void ExecuteUbergraph_W_PreMission_Tablet_MapMarker(int32 EntryPoint);
	int32 GetPlayerPlanningNumber();
	bool HasAngleChanged();
	void HasRotation(bool* Rotates_0);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void PreConstruct(bool IsDesignTime);
	void Pressed();
	void Released();
	void SetRotation(double NewRotation);
	void SetStyle(class FName MarkerName_0);
	void SetupMarker(class FName NewParam, double NewParam2);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_PreMission_Tablet_MapMarker_C">();
	}
	static class UW_PreMission_Tablet_MapMarker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_PreMission_Tablet_MapMarker_C>();
	}
};
static_assert(alignof(UW_PreMission_Tablet_MapMarker_C) == 0x000008, "Wrong alignment on UW_PreMission_Tablet_MapMarker_C");
static_assert(sizeof(UW_PreMission_Tablet_MapMarker_C) == 0x000548, "Wrong size on UW_PreMission_Tablet_MapMarker_C");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, UberGraphFrame) == 0x0002D0, "Member 'UW_PreMission_Tablet_MapMarker_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Hover) == 0x0002D8, "Member 'UW_PreMission_Tablet_MapMarker_C::Hover' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, HB_PlayerNodes) == 0x0002E0, "Member 'UW_PreMission_Tablet_MapMarker_C::HB_PlayerNodes' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, IconOverlay) == 0x0002E8, "Member 'UW_PreMission_Tablet_MapMarker_C::IconOverlay' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, img_icon) == 0x0002F0, "Member 'UW_PreMission_Tablet_MapMarker_C::img_icon' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, img_SecondaryIcon) == 0x0002F8, "Member 'UW_PreMission_Tablet_MapMarker_C::img_SecondaryIcon' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, NodeGrid) == 0x000300, "Member 'UW_PreMission_Tablet_MapMarker_C::NodeGrid' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode) == 0x000308, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_1) == 0x000310, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_1' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_2) == 0x000318, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_2' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_3) == 0x000320, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_3' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_4) == 0x000328, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_4' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_5) == 0x000330, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_5' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_6) == 0x000338, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_6' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_7) == 0x000340, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_7' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_8) == 0x000348, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_8' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Icon) == 0x000350, "Member 'UW_PreMission_Tablet_MapMarker_C::Icon' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, OutlineIcon) == 0x000358, "Member 'UW_PreMission_Tablet_MapMarker_C::OutlineIcon' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, SecondaryIcon) == 0x000360, "Member 'UW_PreMission_Tablet_MapMarker_C::SecondaryIcon' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Rotation) == 0x000368, "Member 'UW_PreMission_Tablet_MapMarker_C::Rotation' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, RotationPivot) == 0x000370, "Member 'UW_PreMission_Tablet_MapMarker_C::RotationPivot' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Size) == 0x000380, "Member 'UW_PreMission_Tablet_MapMarker_C::Size' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Rotates) == 0x000390, "Member 'UW_PreMission_Tablet_MapMarker_C::Rotates' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, RotateSecondaryIcon) == 0x000391, "Member 'UW_PreMission_Tablet_MapMarker_C::RotateSecondaryIcon' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, PlayerNodes) == 0x000398, "Member 'UW_PreMission_Tablet_MapMarker_C::PlayerNodes' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, MarkerName) == 0x0003A8, "Member 'UW_PreMission_Tablet_MapMarker_C::MarkerName' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Color) == 0x0003B0, "Member 'UW_PreMission_Tablet_MapMarker_C::Color' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, MarkerStyle) == 0x0003C0, "Member 'UW_PreMission_Tablet_MapMarker_C::MarkerStyle' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, HasPlayerNodes) == 0x000440, "Member 'UW_PreMission_Tablet_MapMarker_C::HasPlayerNodes' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, NodeAnchor) == 0x000448, "Member 'UW_PreMission_Tablet_MapMarker_C::NodeAnchor' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, RotatingIcon) == 0x000468, "Member 'UW_PreMission_Tablet_MapMarker_C::RotatingIcon' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, CurrentAngle) == 0x000470, "Member 'UW_PreMission_Tablet_MapMarker_C::CurrentAngle' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, HidePlayerNodes) == 0x000478, "Member 'UW_PreMission_Tablet_MapMarker_C::HidePlayerNodes' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, UseOutline) == 0x000479, "Member 'UW_PreMission_Tablet_MapMarker_C::UseOutline' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Parent) == 0x000480, "Member 'UW_PreMission_Tablet_MapMarker_C::Parent' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, ID) == 0x000488, "Member 'UW_PreMission_Tablet_MapMarker_C::ID' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Rotating) == 0x00048C, "Member 'UW_PreMission_Tablet_MapMarker_C::Rotating' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, OnPressed) == 0x000490, "Member 'UW_PreMission_Tablet_MapMarker_C::OnPressed' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, OnReleased) == 0x0004A0, "Member 'UW_PreMission_Tablet_MapMarker_C::OnReleased' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, OnClicked) == 0x0004B0, "Member 'UW_PreMission_Tablet_MapMarker_C::OnClicked' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Coordinates) == 0x0004C0, "Member 'UW_PreMission_Tablet_MapMarker_C::Coordinates' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, MarkerData) == 0x0004D0, "Member 'UW_PreMission_Tablet_MapMarker_C::MarkerData' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, MarkerOwner) == 0x000500, "Member 'UW_PreMission_Tablet_MapMarker_C::MarkerOwner' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, OnRotated) == 0x000508, "Member 'UW_PreMission_Tablet_MapMarker_C::OnRotated' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, InitialClick) == 0x000518, "Member 'UW_PreMission_Tablet_MapMarker_C::InitialClick' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, CenterPivotOnly) == 0x000528, "Member 'UW_PreMission_Tablet_MapMarker_C::CenterPivotOnly' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, AssignedPlayerState) == 0x000530, "Member 'UW_PreMission_Tablet_MapMarker_C::AssignedPlayerState' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, OnRotated2) == 0x000538, "Member 'UW_PreMission_Tablet_MapMarker_C::OnRotated2' has a wrong offset!");

}

