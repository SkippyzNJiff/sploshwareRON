#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Spinbox

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Spinbox.W_Spinbox_C
// 0x0180 (0x1770 - 0x15F0)
class UW_Spinbox_C final : public UCommonSpinbox
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x15F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UW_Button_C*                            btn_Reset;                                         // 0x15F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Gamepad;                                           // 0x1600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               GamepadView;                                       // 0x1608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 icn_Reset;                                         // 0x1610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_52;                                    // 0x1618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                ResetBorder;                                       // 0x1620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SpinBox_29;                                        // 0x1628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_Value;                                         // 0x1630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        Value;                                             // 0x1638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseMinValue;                                       // 0x1640(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1641[0x7];                                     // 0x1641(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinimumValue;                                      // 0x1648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseMaxValue;                                       // 0x1650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1651[0x7];                                     // 0x1651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaximumValue;                                      // 0x1658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseMinSliderValue;                                 // 0x1660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1661[0x7];                                     // 0x1661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinimumSliderValue;                                // 0x1668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseMaxSliderValue;                                 // 0x1670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1671[0x7];                                     // 0x1671(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaximumSliderValue;                                // 0x1678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseResetButton;                                    // 0x1680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1681[0x7];                                     // 0x1681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DefaultValue;                                      // 0x1688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(double Value)>  OnValueChanged;                                    // 0x1690(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FLinearColor                           col_ResetDisabled;                                 // 0x16A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           col_ResetActive;                                   // 0x16B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(double InValue, ETextCommit CommitMethod)> OnValueCommited;        // 0x16C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnBeginSliderMovement;                             // 0x16D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double InValue)> OnEndSliderMovement;                              // 0x16E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         MinFractionalDigits;                               // 0x16F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxFractionalDigits;                               // 0x16F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysUseDeltaSnap;                                // 0x16F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16F9[0x7];                                     // 0x16F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Delta;                                             // 0x1700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SliderExponent;                                    // 0x1708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentValue;                                      // 0x1710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Design_Time;                                    // 0x1718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Initialized;                                       // 0x1719(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Gamepad;                                        // 0x171A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bValueDirty;                                       // 0x171B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           col_FillColor_Gamepad;                             // 0x171C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           col_ActiveFill_Gamepad;                            // 0x172C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           col_BackgroundColor_Gamepad;                       // 0x173C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           col_ActiveBackgroundColor_Gamepad;                 // 0x174C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_175C[0x4];                                     // 0x175C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ResetButtonStyle_Disabled;                         // 0x1760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ResetButtonStyle_Enabled;                          // 0x1768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BackPage(bool* Handled);
	void BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_5_Hovered__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_3_OnSpinBoxBeginSliderMovement__DelegateSignature();
	void BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BP_OnFocusLost();
	void BP_OnFocusReceived();
	void ChangePage(class FName PageName);
	void ClearMaxSliderValue();
	void ClearMaxValue();
	void ClearMinSliderValue();
	void ClearMinValue();
	void Construct();
	void ExecuteUbergraph_W_Spinbox(int32 EntryPoint);
	void GetMaxSliderValue(double* MaximumSliderValue_0);
	void GetMaxValue(double* MaximumValue_0);
	void GetMinSliderValue(double* MinimumSliderValue_0);
	void GetMinValue(double* MinimumValue_0);
	void Hide(double Delay, bool Collapse);
	void IsValueDirty(bool* IsDirty);
	void PreConstruct(bool IsDesignTime);
	void Reveal(double Delay);
	void SetDefaultValue(double DefaultValue_0, bool ShowResetButton);
	void SetInputMode(bool IsGamepad);
	void SetMaxSliderValue(double NewValue);
	void SetMaxValue(double NewValue);
	void SetMinSliderValue(double NewValue);
	void SetMinValue(double NewValue);
	void SetValue(double Value_0);
	void UpdateInputStyle(bool IsGamepad);
	void UpdateResetButton();
	void UpdateValue(double Value_0);

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Spinbox_C">();
	}
	static class UW_Spinbox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Spinbox_C>();
	}
};
static_assert(alignof(UW_Spinbox_C) == 0x000010, "Wrong alignment on UW_Spinbox_C");
static_assert(sizeof(UW_Spinbox_C) == 0x001770, "Wrong size on UW_Spinbox_C");
static_assert(offsetof(UW_Spinbox_C, UberGraphFrame) == 0x0015F0, "Member 'UW_Spinbox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, btn_Reset) == 0x0015F8, "Member 'UW_Spinbox_C::btn_Reset' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, Gamepad) == 0x001600, "Member 'UW_Spinbox_C::Gamepad' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, GamepadView) == 0x001608, "Member 'UW_Spinbox_C::GamepadView' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, icn_Reset) == 0x001610, "Member 'UW_Spinbox_C::icn_Reset' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, ProgressBar_52) == 0x001618, "Member 'UW_Spinbox_C::ProgressBar_52' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, ResetBorder) == 0x001620, "Member 'UW_Spinbox_C::ResetBorder' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, SpinBox_29) == 0x001628, "Member 'UW_Spinbox_C::SpinBox_29' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, txt_Value) == 0x001630, "Member 'UW_Spinbox_C::txt_Value' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, Value) == 0x001638, "Member 'UW_Spinbox_C::Value' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, UseMinValue) == 0x001640, "Member 'UW_Spinbox_C::UseMinValue' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, MinimumValue) == 0x001648, "Member 'UW_Spinbox_C::MinimumValue' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, UseMaxValue) == 0x001650, "Member 'UW_Spinbox_C::UseMaxValue' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, MaximumValue) == 0x001658, "Member 'UW_Spinbox_C::MaximumValue' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, UseMinSliderValue) == 0x001660, "Member 'UW_Spinbox_C::UseMinSliderValue' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, MinimumSliderValue) == 0x001668, "Member 'UW_Spinbox_C::MinimumSliderValue' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, UseMaxSliderValue) == 0x001670, "Member 'UW_Spinbox_C::UseMaxSliderValue' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, MaximumSliderValue) == 0x001678, "Member 'UW_Spinbox_C::MaximumSliderValue' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, UseResetButton) == 0x001680, "Member 'UW_Spinbox_C::UseResetButton' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, DefaultValue) == 0x001688, "Member 'UW_Spinbox_C::DefaultValue' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, OnValueChanged) == 0x001690, "Member 'UW_Spinbox_C::OnValueChanged' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, col_ResetDisabled) == 0x0016A0, "Member 'UW_Spinbox_C::col_ResetDisabled' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, col_ResetActive) == 0x0016B0, "Member 'UW_Spinbox_C::col_ResetActive' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, OnValueCommited) == 0x0016C0, "Member 'UW_Spinbox_C::OnValueCommited' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, OnBeginSliderMovement) == 0x0016D0, "Member 'UW_Spinbox_C::OnBeginSliderMovement' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, OnEndSliderMovement) == 0x0016E0, "Member 'UW_Spinbox_C::OnEndSliderMovement' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, MinFractionalDigits) == 0x0016F0, "Member 'UW_Spinbox_C::MinFractionalDigits' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, MaxFractionalDigits) == 0x0016F4, "Member 'UW_Spinbox_C::MaxFractionalDigits' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, AlwaysUseDeltaSnap) == 0x0016F8, "Member 'UW_Spinbox_C::AlwaysUseDeltaSnap' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, Delta) == 0x001700, "Member 'UW_Spinbox_C::Delta' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, SliderExponent) == 0x001708, "Member 'UW_Spinbox_C::SliderExponent' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, CurrentValue) == 0x001710, "Member 'UW_Spinbox_C::CurrentValue' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, Is_Design_Time) == 0x001718, "Member 'UW_Spinbox_C::Is_Design_Time' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, Initialized) == 0x001719, "Member 'UW_Spinbox_C::Initialized' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, Is_Gamepad) == 0x00171A, "Member 'UW_Spinbox_C::Is_Gamepad' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, bValueDirty) == 0x00171B, "Member 'UW_Spinbox_C::bValueDirty' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, col_FillColor_Gamepad) == 0x00171C, "Member 'UW_Spinbox_C::col_FillColor_Gamepad' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, col_ActiveFill_Gamepad) == 0x00172C, "Member 'UW_Spinbox_C::col_ActiveFill_Gamepad' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, col_BackgroundColor_Gamepad) == 0x00173C, "Member 'UW_Spinbox_C::col_BackgroundColor_Gamepad' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, col_ActiveBackgroundColor_Gamepad) == 0x00174C, "Member 'UW_Spinbox_C::col_ActiveBackgroundColor_Gamepad' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, ResetButtonStyle_Disabled) == 0x001760, "Member 'UW_Spinbox_C::ResetButtonStyle_Disabled' has a wrong offset!");
static_assert(offsetof(UW_Spinbox_C, ResetButtonStyle_Enabled) == 0x001768, "Member 'UW_Spinbox_C::ResetButtonStyle_Enabled' has a wrong offset!");

}

