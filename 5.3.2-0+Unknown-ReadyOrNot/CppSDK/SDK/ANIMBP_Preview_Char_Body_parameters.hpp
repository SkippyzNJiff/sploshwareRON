#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_Preview_Char_Body

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ANIMBP_Preview_Char_Body.ANIMBP_Preview_Char_Body_C.ExecuteUbergraph_ANIMBP_Preview_Char_Body
// 0x0028 (0x0028 - 0x0000)
struct ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APreviewCharacterTemplate_C*            K2Node_DynamicCast_AsPreview_Character_Template;   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body) == 0x000008, "Wrong alignment on ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body");
static_assert(sizeof(ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body) == 0x000028, "Wrong size on ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body");
static_assert(offsetof(ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body, EntryPoint) == 0x000000, "Member 'ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body::EntryPoint' has a wrong offset!");
static_assert(offsetof(ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body, CallFunc_GetOwningActor_ReturnValue) == 0x000008, "Member 'ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body, K2Node_DynamicCast_AsPreview_Character_Template) == 0x000010, "Member 'ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body::K2Node_DynamicCast_AsPreview_Character_Template' has a wrong offset!");
static_assert(offsetof(ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body, K2Node_Event_DeltaTimeX) == 0x00001C, "Member 'ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000022, "Member 'ANIMBP_Preview_Char_Body_C_ExecuteUbergraph_ANIMBP_Preview_Char_Body::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");

// Function ANIMBP_Preview_Char_Body.ANIMBP_Preview_Char_Body_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ANIMBP_Preview_Char_Body_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_Preview_Char_Body_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ANIMBP_Preview_Char_Body_C_BlueprintUpdateAnimation");
static_assert(sizeof(ANIMBP_Preview_Char_Body_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ANIMBP_Preview_Char_Body_C_BlueprintUpdateAnimation");
static_assert(offsetof(ANIMBP_Preview_Char_Body_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ANIMBP_Preview_Char_Body_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ANIMBP_Preview_Char_Body.ANIMBP_Preview_Char_Body_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_Preview_Char_Body_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ANIMBP_Preview_Char_Body_C_AnimGraph) == 0x000008, "Wrong alignment on ANIMBP_Preview_Char_Body_C_AnimGraph");
static_assert(sizeof(ANIMBP_Preview_Char_Body_C_AnimGraph) == 0x000010, "Wrong size on ANIMBP_Preview_Char_Body_C_AnimGraph");
static_assert(offsetof(ANIMBP_Preview_Char_Body_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ANIMBP_Preview_Char_Body_C_AnimGraph::AnimGraph_0' has a wrong offset!");

}

