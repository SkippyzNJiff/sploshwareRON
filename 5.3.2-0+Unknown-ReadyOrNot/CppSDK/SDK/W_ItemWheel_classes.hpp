#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ItemWheel

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_ItemWheel.W_ItemWheel_C
// 0x0090 (0x0560 - 0x04D0)
class UW_ItemWheel_C final : public UItemWheel
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       anim_ShowBackStick;                                // 0x04D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       anim_CollapseOuter;                                // 0x04E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       anim_ExpandOuter;                                  // 0x04E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       anim_EnableDisableWheel;                           // 0x04F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 HeaderTextBackground;                              // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_BgFade;                                        // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           ItemWheelCanvasPanel;                              // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UW_WheelIcon_C*>                 MainWheelIcons;                                    // 0x0510(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        IconSize;                                          // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UW_WheelIcon_C*>                 SubWheelIcons;                                     // 0x0528(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          InDeadZone;                                        // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_539[0x3];                                      // 0x0539(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SelectedColor;                                     // 0x053C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnselectedColor;                                   // 0x054C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CreateItemWheelIcon(struct FItemWheelOption& ItemWheelOption, int32 OptionIndex, int32 SelectedIndex, class UW_WheelIcon_C** WheelIcon);
	void ExecuteUbergraph_W_ItemWheel(int32 EntryPoint);
	void ForceSetInDeadzone(bool bInDeadzone);
	void GetItemAmount(EItemCategory ItemID, int32* ItemAmount);
	void GetShowCounter(EItemCategory ItemID, bool* ShowCounter);
	void ItemWheelCollapsed();
	void ItemWheelDisabled();
	void ItemWheelEnabled();
	void ItemWheelExpanded();
	void SetCurrentIndex(class UUMG_RadialMenu_C* RadialMenu);
	void SetWheelOptions(const class UUserWidget* ItemWheel, const TArray<struct FItemWheelOption>& ItemWheelOptions, const int32& SelectedIndex);
	void SetWheelSegments(const class UUserWidget* ItemWheel, const uint8& Amount);
	void SetWheelSelection(const class UUserWidget* ItemWheel, const struct FVector& Direction);
	void Update_Cursor_Visibility();
	void UpdateRadialMenu(int32 SelectedIndex, class UObject* ItemWheel, TArray<struct FItemWheelOption>& ItemWheelOptions);
	void UpdateWheelSelection(class UObject* ItemWheel, const struct FVector& Direction);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_ItemWheel_C">();
	}
	static class UW_ItemWheel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_ItemWheel_C>();
	}
};
static_assert(alignof(UW_ItemWheel_C) == 0x000010, "Wrong alignment on UW_ItemWheel_C");
static_assert(sizeof(UW_ItemWheel_C) == 0x000560, "Wrong size on UW_ItemWheel_C");
static_assert(offsetof(UW_ItemWheel_C, UberGraphFrame) == 0x0004D0, "Member 'UW_ItemWheel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_ItemWheel_C, anim_ShowBackStick) == 0x0004D8, "Member 'UW_ItemWheel_C::anim_ShowBackStick' has a wrong offset!");
static_assert(offsetof(UW_ItemWheel_C, anim_CollapseOuter) == 0x0004E0, "Member 'UW_ItemWheel_C::anim_CollapseOuter' has a wrong offset!");
static_assert(offsetof(UW_ItemWheel_C, anim_ExpandOuter) == 0x0004E8, "Member 'UW_ItemWheel_C::anim_ExpandOuter' has a wrong offset!");
static_assert(offsetof(UW_ItemWheel_C, anim_EnableDisableWheel) == 0x0004F0, "Member 'UW_ItemWheel_C::anim_EnableDisableWheel' has a wrong offset!");
static_assert(offsetof(UW_ItemWheel_C, HeaderTextBackground) == 0x0004F8, "Member 'UW_ItemWheel_C::HeaderTextBackground' has a wrong offset!");
static_assert(offsetof(UW_ItemWheel_C, img_BgFade) == 0x000500, "Member 'UW_ItemWheel_C::img_BgFade' has a wrong offset!");
static_assert(offsetof(UW_ItemWheel_C, ItemWheelCanvasPanel) == 0x000508, "Member 'UW_ItemWheel_C::ItemWheelCanvasPanel' has a wrong offset!");
static_assert(offsetof(UW_ItemWheel_C, MainWheelIcons) == 0x000510, "Member 'UW_ItemWheel_C::MainWheelIcons' has a wrong offset!");
static_assert(offsetof(UW_ItemWheel_C, IconSize) == 0x000520, "Member 'UW_ItemWheel_C::IconSize' has a wrong offset!");
static_assert(offsetof(UW_ItemWheel_C, SubWheelIcons) == 0x000528, "Member 'UW_ItemWheel_C::SubWheelIcons' has a wrong offset!");
static_assert(offsetof(UW_ItemWheel_C, InDeadZone) == 0x000538, "Member 'UW_ItemWheel_C::InDeadZone' has a wrong offset!");
static_assert(offsetof(UW_ItemWheel_C, SelectedColor) == 0x00053C, "Member 'UW_ItemWheel_C::SelectedColor' has a wrong offset!");
static_assert(offsetof(UW_ItemWheel_C, UnselectedColor) == 0x00054C, "Member 'UW_ItemWheel_C::UnselectedColor' has a wrong offset!");

}

