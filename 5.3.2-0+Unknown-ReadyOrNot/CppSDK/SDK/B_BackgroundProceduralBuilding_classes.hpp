#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_BackgroundProceduralBuilding

#include "Basic.hpp"

#include "ST_GroundSection_structs.hpp"
#include "ST_RandomOptions_structs.hpp"
#include "ProceduralMeshComponent_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ST_PresetsBuilding_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_Section_structs.hpp"
#include "E_Shape_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_BackgroundProceduralBuilding.B_BackgroundProceduralBuilding_C
// 0x03C0 (0x0658 - 0x0298)
class AB_BackgroundProceduralBuilding_C final : public AActor
{
public:
	class USplineComponent*                       Spline;                                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProceduralMeshComponent*               Building;                                          // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProceduralMeshComponent*               TempProceduralBuilding;                            // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Snap_Grid_;                                        // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Snap_Mesh_Spline;                                  // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TempTris;                                          // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        TempMeshVertices;                                  // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                TempDistanceBtwPoints;                             // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      TempUV;                                            // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         TempNumberCurvePoints;                             // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Button_Snap_Object_in_World;                       // 0x0304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Apply_Presets_Button;                              // 0x0305(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Only_One_Type_Presets;                             // 0x0306(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Random_Button;                                     // 0x0307(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Border_Type_On_UV;                                 // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Roof_On;                                           // 0x030C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Roof_Border_Type_Material;                         // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstance*>              Top_Roof_Materials;                                // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstance*                      TopRoofMaterial;                                   // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Border_Variation;                                  // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstance*>              BorderMaterials;                                   // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstance*>              TempBorderMaterial;                                // 0x0348(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstance*>              Roof_Materials;                                    // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Roof_Type_Material_;                               // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      RoofMaterial;                                      // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          MaterialFound;                                     // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      TempMaterial;                                      // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstance*>              Ground_Floor_Materials;                            // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstance*                      GroundFloorMaterial;                               // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstance*>              Facades_Materials;                                 // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 ArrayNumberHorizontal_GF_Windows;                  // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstance*>              TempFacadesMaterial;                               // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 ArrayNumberHorizontalWindows;                      // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Overwrite_GroundFloor_X_Windows;                   // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      Overwrite_GroundFloor_Material;                    // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Overwrite_X_Windows;                               // 0x03F0(0x0010)(Edit, BlueprintVisible)
	TArray<class UMaterialInstance*>              Overwrite_Facade_Material;                         // 0x0400(0x0010)(Edit, BlueprintVisible)
	TArray<class UMaterialInstance*>              Overwrite_Border__Material;                        // 0x0410(0x0010)(Edit, BlueprintVisible)
	class UMaterialInstance*                      Overwrite_Roof_Material;                           // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Overwrite_Roof_Top_Material;                       // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        RoofMeshVerticesPrimary;                           // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        RoofBackMeshVertices;                              // 0x0440(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        RoofTopMeshVertices;                               // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        RoofMeshVertices;                                  // 0x0460(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      RoofTopUV;                                         // 0x0470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      RoofUV;                                            // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      RoofBackUV;                                        // 0x0490(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Array_GF_Height;                                   // 0x04A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         RealGroundFloorHeight;                             // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentHeight;                                     // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         X_Windows;                                         // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TempDistanceUV;                                    // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Border_Roof_Height;                                // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SecondAngle;                                       // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FirstAngle;                                        // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FinalAngle;                                        // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Border_Roof_Width;                                 // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RealHeight;                                        // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempVerticesRoofMissed;                            // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F4[0x4];                                      // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        RoofMeshVerticesCurves;                            // 0x04F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        TempDistanceSegmentation;                          // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSectionNumber;                              // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_514[0x4];                                      // 0x0514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TempCurrentDistance;                               // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TempCurveDivisionOfTexture;                        // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempCurrentSegment;                                // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempNumberOfSegments;                              // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SignPlusOrMinus;                                   // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_534[0x4];                                      // 0x0534(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HeightOffsetUV;                                    // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TopOffsetUV;                                       // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LateralOffsetUV;                                   // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 RoofTris;                                          // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                TempLastDirection;                                 // 0x0568(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempCurrentDirection;                              // 0x0580(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastLocationPosition;                              // 0x0598(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempForTris;                                       // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B4[0x4];                                      // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProcMeshTangent>               TempTangents;                                      // 0x05B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        TempNormals;                                       // 0x05C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CurrentSectionFinalBuilding;                       // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_GroundSection                      Section_Ground_Floor;                              // 0x05DC(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC[0x4];                                      // 0x05EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_Section>                    Sections_Floors;                                   // 0x05F0(0x0010)(Edit, BlueprintVisible)
	int32                                         TempCurrentIndex;                                  // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_VerticesForRoof;                              // 0x0604(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_605[0x3];                                      // 0x0605(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_PresetsBuilding>            Presets;                                           // 0x0608(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Temp_Integer;                                      // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_RandomOptions                      Random_Options;                                    // 0x061C(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Concave;                                           // 0x062C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Shape                                       Shape_Type;                                        // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_631[0x7];                                      // 0x0631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Length_Curve_Segment;                              // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Dimension1;                                        // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Dimension2;                                        // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempDimension1;                                    // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempDimension2;                                    // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CircleSegmentation;                                // 0x0650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void SectionFloor(class UMaterialInstance* Material_Section, int32 Height, int32 Height_Offset, bool Vertices_for_Roof, bool No_Mesh_Generated, double Lateral_Offset_UV, bool UV_Strectched_Height, bool UV_Border);
	void Search_Material(int32 Types, int32 Variations, TArray<class UMaterialInstance*>& Array_Material, class UMaterialInstance** FinalMaterial);
	void MergeSectionByMaterial(class UMaterialInstance* Material_Of_Section);
	void DebugArray(TArray<struct FVector>& Array);
	void CreateFacadeCurve(int32 SectionIndex, int32 IndexPoint1, int32 IndexPoint2, int32 Height, int32 Height_Offset, bool VerticesForRoof, bool NoMeshGenerated, bool UV_Border, bool UV_Stretched_Height, double Lateral_Offset_UV);
	void CreateFacade(int32 SectionIndex, int32 Point1, int32 Point2, int32 Height, int32 Height_Offset, bool Vertices_Roof, bool No_Mesh_Generated, bool UV_Border, bool UV_Stretched_Height, double Lateral_Offset_UV);
	void ConvexConcave(int32 PreviousPoint, int32 Point, int32 NextPoint);
	void Apply_Presets_Function();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_BackgroundProceduralBuilding_C">();
	}
	static class AB_BackgroundProceduralBuilding_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_BackgroundProceduralBuilding_C>();
	}
};
static_assert(alignof(AB_BackgroundProceduralBuilding_C) == 0x000008, "Wrong alignment on AB_BackgroundProceduralBuilding_C");
static_assert(sizeof(AB_BackgroundProceduralBuilding_C) == 0x000658, "Wrong size on AB_BackgroundProceduralBuilding_C");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Spline) == 0x000298, "Member 'AB_BackgroundProceduralBuilding_C::Spline' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Building) == 0x0002A0, "Member 'AB_BackgroundProceduralBuilding_C::Building' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, DefaultSceneRoot) == 0x0002A8, "Member 'AB_BackgroundProceduralBuilding_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempProceduralBuilding) == 0x0002B0, "Member 'AB_BackgroundProceduralBuilding_C::TempProceduralBuilding' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Snap_Grid_) == 0x0002B8, "Member 'AB_BackgroundProceduralBuilding_C::Snap_Grid_' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Snap_Mesh_Spline) == 0x0002BC, "Member 'AB_BackgroundProceduralBuilding_C::Snap_Mesh_Spline' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempTris) == 0x0002C0, "Member 'AB_BackgroundProceduralBuilding_C::TempTris' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempMeshVertices) == 0x0002D0, "Member 'AB_BackgroundProceduralBuilding_C::TempMeshVertices' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempDistanceBtwPoints) == 0x0002E0, "Member 'AB_BackgroundProceduralBuilding_C::TempDistanceBtwPoints' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempUV) == 0x0002F0, "Member 'AB_BackgroundProceduralBuilding_C::TempUV' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempNumberCurvePoints) == 0x000300, "Member 'AB_BackgroundProceduralBuilding_C::TempNumberCurvePoints' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Button_Snap_Object_in_World) == 0x000304, "Member 'AB_BackgroundProceduralBuilding_C::Button_Snap_Object_in_World' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Apply_Presets_Button) == 0x000305, "Member 'AB_BackgroundProceduralBuilding_C::Apply_Presets_Button' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Only_One_Type_Presets) == 0x000306, "Member 'AB_BackgroundProceduralBuilding_C::Only_One_Type_Presets' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Random_Button) == 0x000307, "Member 'AB_BackgroundProceduralBuilding_C::Random_Button' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Border_Type_On_UV) == 0x000308, "Member 'AB_BackgroundProceduralBuilding_C::Border_Type_On_UV' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Roof_On) == 0x00030C, "Member 'AB_BackgroundProceduralBuilding_C::Roof_On' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Roof_Border_Type_Material) == 0x000310, "Member 'AB_BackgroundProceduralBuilding_C::Roof_Border_Type_Material' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Top_Roof_Materials) == 0x000318, "Member 'AB_BackgroundProceduralBuilding_C::Top_Roof_Materials' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TopRoofMaterial) == 0x000328, "Member 'AB_BackgroundProceduralBuilding_C::TopRoofMaterial' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Border_Variation) == 0x000330, "Member 'AB_BackgroundProceduralBuilding_C::Border_Variation' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, BorderMaterials) == 0x000338, "Member 'AB_BackgroundProceduralBuilding_C::BorderMaterials' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempBorderMaterial) == 0x000348, "Member 'AB_BackgroundProceduralBuilding_C::TempBorderMaterial' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Roof_Materials) == 0x000358, "Member 'AB_BackgroundProceduralBuilding_C::Roof_Materials' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Roof_Type_Material_) == 0x000368, "Member 'AB_BackgroundProceduralBuilding_C::Roof_Type_Material_' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, RoofMaterial) == 0x000370, "Member 'AB_BackgroundProceduralBuilding_C::RoofMaterial' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, MaterialFound) == 0x000378, "Member 'AB_BackgroundProceduralBuilding_C::MaterialFound' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempMaterial) == 0x000380, "Member 'AB_BackgroundProceduralBuilding_C::TempMaterial' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Ground_Floor_Materials) == 0x000388, "Member 'AB_BackgroundProceduralBuilding_C::Ground_Floor_Materials' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, GroundFloorMaterial) == 0x000398, "Member 'AB_BackgroundProceduralBuilding_C::GroundFloorMaterial' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Facades_Materials) == 0x0003A0, "Member 'AB_BackgroundProceduralBuilding_C::Facades_Materials' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, ArrayNumberHorizontal_GF_Windows) == 0x0003B0, "Member 'AB_BackgroundProceduralBuilding_C::ArrayNumberHorizontal_GF_Windows' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempFacadesMaterial) == 0x0003C0, "Member 'AB_BackgroundProceduralBuilding_C::TempFacadesMaterial' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, ArrayNumberHorizontalWindows) == 0x0003D0, "Member 'AB_BackgroundProceduralBuilding_C::ArrayNumberHorizontalWindows' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Overwrite_GroundFloor_X_Windows) == 0x0003E0, "Member 'AB_BackgroundProceduralBuilding_C::Overwrite_GroundFloor_X_Windows' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Overwrite_GroundFloor_Material) == 0x0003E8, "Member 'AB_BackgroundProceduralBuilding_C::Overwrite_GroundFloor_Material' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Overwrite_X_Windows) == 0x0003F0, "Member 'AB_BackgroundProceduralBuilding_C::Overwrite_X_Windows' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Overwrite_Facade_Material) == 0x000400, "Member 'AB_BackgroundProceduralBuilding_C::Overwrite_Facade_Material' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Overwrite_Border__Material) == 0x000410, "Member 'AB_BackgroundProceduralBuilding_C::Overwrite_Border__Material' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Overwrite_Roof_Material) == 0x000420, "Member 'AB_BackgroundProceduralBuilding_C::Overwrite_Roof_Material' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Overwrite_Roof_Top_Material) == 0x000428, "Member 'AB_BackgroundProceduralBuilding_C::Overwrite_Roof_Top_Material' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, RoofMeshVerticesPrimary) == 0x000430, "Member 'AB_BackgroundProceduralBuilding_C::RoofMeshVerticesPrimary' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, RoofBackMeshVertices) == 0x000440, "Member 'AB_BackgroundProceduralBuilding_C::RoofBackMeshVertices' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, RoofTopMeshVertices) == 0x000450, "Member 'AB_BackgroundProceduralBuilding_C::RoofTopMeshVertices' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, RoofMeshVertices) == 0x000460, "Member 'AB_BackgroundProceduralBuilding_C::RoofMeshVertices' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, RoofTopUV) == 0x000470, "Member 'AB_BackgroundProceduralBuilding_C::RoofTopUV' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, RoofUV) == 0x000480, "Member 'AB_BackgroundProceduralBuilding_C::RoofUV' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, RoofBackUV) == 0x000490, "Member 'AB_BackgroundProceduralBuilding_C::RoofBackUV' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Array_GF_Height) == 0x0004A0, "Member 'AB_BackgroundProceduralBuilding_C::Array_GF_Height' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, RealGroundFloorHeight) == 0x0004B0, "Member 'AB_BackgroundProceduralBuilding_C::RealGroundFloorHeight' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, CurrentHeight) == 0x0004B4, "Member 'AB_BackgroundProceduralBuilding_C::CurrentHeight' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, X_Windows) == 0x0004B8, "Member 'AB_BackgroundProceduralBuilding_C::X_Windows' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempDistanceUV) == 0x0004C0, "Member 'AB_BackgroundProceduralBuilding_C::TempDistanceUV' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Border_Roof_Height) == 0x0004C8, "Member 'AB_BackgroundProceduralBuilding_C::Border_Roof_Height' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, SecondAngle) == 0x0004D0, "Member 'AB_BackgroundProceduralBuilding_C::SecondAngle' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, FirstAngle) == 0x0004D8, "Member 'AB_BackgroundProceduralBuilding_C::FirstAngle' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, FinalAngle) == 0x0004E0, "Member 'AB_BackgroundProceduralBuilding_C::FinalAngle' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Border_Roof_Width) == 0x0004E8, "Member 'AB_BackgroundProceduralBuilding_C::Border_Roof_Width' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, RealHeight) == 0x0004EC, "Member 'AB_BackgroundProceduralBuilding_C::RealHeight' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempVerticesRoofMissed) == 0x0004F0, "Member 'AB_BackgroundProceduralBuilding_C::TempVerticesRoofMissed' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, RoofMeshVerticesCurves) == 0x0004F8, "Member 'AB_BackgroundProceduralBuilding_C::RoofMeshVerticesCurves' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempDistanceSegmentation) == 0x000508, "Member 'AB_BackgroundProceduralBuilding_C::TempDistanceSegmentation' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, CurrentSectionNumber) == 0x000510, "Member 'AB_BackgroundProceduralBuilding_C::CurrentSectionNumber' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempCurrentDistance) == 0x000518, "Member 'AB_BackgroundProceduralBuilding_C::TempCurrentDistance' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempCurveDivisionOfTexture) == 0x000520, "Member 'AB_BackgroundProceduralBuilding_C::TempCurveDivisionOfTexture' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempCurrentSegment) == 0x000528, "Member 'AB_BackgroundProceduralBuilding_C::TempCurrentSegment' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempNumberOfSegments) == 0x00052C, "Member 'AB_BackgroundProceduralBuilding_C::TempNumberOfSegments' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, SignPlusOrMinus) == 0x000530, "Member 'AB_BackgroundProceduralBuilding_C::SignPlusOrMinus' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, HeightOffsetUV) == 0x000538, "Member 'AB_BackgroundProceduralBuilding_C::HeightOffsetUV' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Debug) == 0x000540, "Member 'AB_BackgroundProceduralBuilding_C::Debug' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TopOffsetUV) == 0x000548, "Member 'AB_BackgroundProceduralBuilding_C::TopOffsetUV' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, LateralOffsetUV) == 0x000550, "Member 'AB_BackgroundProceduralBuilding_C::LateralOffsetUV' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, RoofTris) == 0x000558, "Member 'AB_BackgroundProceduralBuilding_C::RoofTris' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempLastDirection) == 0x000568, "Member 'AB_BackgroundProceduralBuilding_C::TempLastDirection' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempCurrentDirection) == 0x000580, "Member 'AB_BackgroundProceduralBuilding_C::TempCurrentDirection' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, LastLocationPosition) == 0x000598, "Member 'AB_BackgroundProceduralBuilding_C::LastLocationPosition' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempForTris) == 0x0005B0, "Member 'AB_BackgroundProceduralBuilding_C::TempForTris' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempTangents) == 0x0005B8, "Member 'AB_BackgroundProceduralBuilding_C::TempTangents' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempNormals) == 0x0005C8, "Member 'AB_BackgroundProceduralBuilding_C::TempNormals' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, CurrentSectionFinalBuilding) == 0x0005D8, "Member 'AB_BackgroundProceduralBuilding_C::CurrentSectionFinalBuilding' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Section_Ground_Floor) == 0x0005DC, "Member 'AB_BackgroundProceduralBuilding_C::Section_Ground_Floor' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Sections_Floors) == 0x0005F0, "Member 'AB_BackgroundProceduralBuilding_C::Sections_Floors' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempCurrentIndex) == 0x000600, "Member 'AB_BackgroundProceduralBuilding_C::TempCurrentIndex' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Temp_VerticesForRoof) == 0x000604, "Member 'AB_BackgroundProceduralBuilding_C::Temp_VerticesForRoof' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Presets) == 0x000608, "Member 'AB_BackgroundProceduralBuilding_C::Presets' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Temp_Integer) == 0x000618, "Member 'AB_BackgroundProceduralBuilding_C::Temp_Integer' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Random_Options) == 0x00061C, "Member 'AB_BackgroundProceduralBuilding_C::Random_Options' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Concave) == 0x00062C, "Member 'AB_BackgroundProceduralBuilding_C::Concave' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Shape_Type) == 0x000630, "Member 'AB_BackgroundProceduralBuilding_C::Shape_Type' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Length_Curve_Segment) == 0x000638, "Member 'AB_BackgroundProceduralBuilding_C::Length_Curve_Segment' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Dimension1) == 0x000640, "Member 'AB_BackgroundProceduralBuilding_C::Dimension1' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, Dimension2) == 0x000644, "Member 'AB_BackgroundProceduralBuilding_C::Dimension2' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempDimension1) == 0x000648, "Member 'AB_BackgroundProceduralBuilding_C::TempDimension1' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, TempDimension2) == 0x00064C, "Member 'AB_BackgroundProceduralBuilding_C::TempDimension2' has a wrong offset!");
static_assert(offsetof(AB_BackgroundProceduralBuilding_C, CircleSegmentation) == 0x000650, "Member 'AB_BackgroundProceduralBuilding_C::CircleSegmentation' has a wrong offset!");

}

