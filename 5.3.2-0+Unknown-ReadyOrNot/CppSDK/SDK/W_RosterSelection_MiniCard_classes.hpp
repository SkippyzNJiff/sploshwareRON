#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RosterSelection_MiniCard

#include "Basic.hpp"

#include "CommonUI_classes.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "CommonInput_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C
// 0x01A0 (0x1750 - 0x15B0)
class UW_RosterSelection_MiniCard_C final : public UCommonButtonBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x15B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       StressPulse;                                       // 0x15B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UProgressBar*                           BackgroundProgressBar;                             // 0x15C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BottomLine;                                        // 0x15C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Countdown;                                         // 0x15D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ForegroundProgressBar;                             // 0x15D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonLazyImage*                       HoverHighlight;                                    // 0x15E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 HoverImage;                                        // 0x15E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 icn_Locked;                                        // 0x15F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageSpinner;                                      // 0x15F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_CountdownProgress;                             // 0x1600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_PositionCorner;                                // 0x1608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       lbl_Empty;                                         // 0x1610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             MissionsRemainingText;                             // 0x1618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Position;                                          // 0x1620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       PositionNumber;                                    // 0x1628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ProfileImage;                                      // 0x1630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SidebarLeft;                                       // 0x1638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SidebarRight_1;                                    // 0x1640(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SquadPositionBorder;                               // 0x1648(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          Status;                                            // 0x1650(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 StressBackground;                                  // 0x1658(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopLine;                                           // 0x1660(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_LockedTime;                                    // 0x1668(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_Name;                                          // 0x1670(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_Specialty;                                     // 0x1678(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_Status;                                        // 0x1680(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_Lock;                                           // 0x1688(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_Outlines;                                       // 0x1690(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_TabletText_C*                        W_TabletText_LockedTime;                           // 0x1698(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_TabletText_C*                        W_TabletText_Specialty;                            // 0x16A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_TabletText_C*                        W_TabletText_Status;                               // 0x16A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class UW_RosterSelection_MiniCard_C* Card)> OnHovered;             // 0x16B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_RosterSelection_MiniCard_C* Card)> OnUnhovered;           // 0x16C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class URosterCharacter*                       RosterCharacter;                                   // 0x16D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class UW_RosterSelection_MiniCard_C* Card)> OnClicked;             // 0x16D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSlateColor                            UnavailableTint;                                   // 0x16E8(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            AvailableTint;                                     // 0x16FC(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	ERosterSquadPosition                          DebugPosition;                                     // 0x1710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterCharacterState                         DebugState;                                        // 0x1711(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Empty;                                             // 0x1712(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Locked;                                            // 0x1713(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1714[0x4];                                     // 0x1714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UW_RosterSelection_MiniCard_C* Card)> OnEmptyClicked;        // 0x1718(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_RosterSelection_MiniCard_C* Card)> OnFocused;             // 0x1728(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_RosterSelection_MiniCard_C* Card)> OnUnfocused;           // 0x1738(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void BP_OnClicked();
	void BP_OnHovered();
	void BP_OnUnhovered();
	void Construct();
	void ExecuteUbergraph_W_RosterSelection_MiniCard(int32 EntryPoint);
	void OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8(class UObject* Loaded);
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void PreConstruct(bool IsDesignTime);
	void SetCharacter(class URosterCharacter* Character);
	void SetCustomStateText(const class FText& Text);
	void SetEmpty(bool Empty_0);
	void SetHoverState(bool Hovered);
	void SetLocked(bool Locked_0, const class FText& UnlockText);
	void SetPosition(ERosterSquadPosition Position_0);
	void SetSelected(bool Selected);
	void SetupStateText(class URosterCharacter* Character);
	void SetVisualState(bool Hovered, bool Pressed);
	void ShowStressChange();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_RosterSelection_MiniCard_C">();
	}
	static class UW_RosterSelection_MiniCard_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_RosterSelection_MiniCard_C>();
	}
};
static_assert(alignof(UW_RosterSelection_MiniCard_C) == 0x000010, "Wrong alignment on UW_RosterSelection_MiniCard_C");
static_assert(sizeof(UW_RosterSelection_MiniCard_C) == 0x001750, "Wrong size on UW_RosterSelection_MiniCard_C");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, UberGraphFrame) == 0x0015B0, "Member 'UW_RosterSelection_MiniCard_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, StressPulse) == 0x0015B8, "Member 'UW_RosterSelection_MiniCard_C::StressPulse' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, BackgroundProgressBar) == 0x0015C0, "Member 'UW_RosterSelection_MiniCard_C::BackgroundProgressBar' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, BottomLine) == 0x0015C8, "Member 'UW_RosterSelection_MiniCard_C::BottomLine' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Countdown) == 0x0015D0, "Member 'UW_RosterSelection_MiniCard_C::Countdown' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, ForegroundProgressBar) == 0x0015D8, "Member 'UW_RosterSelection_MiniCard_C::ForegroundProgressBar' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, HoverHighlight) == 0x0015E0, "Member 'UW_RosterSelection_MiniCard_C::HoverHighlight' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, HoverImage) == 0x0015E8, "Member 'UW_RosterSelection_MiniCard_C::HoverImage' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, icn_Locked) == 0x0015F0, "Member 'UW_RosterSelection_MiniCard_C::icn_Locked' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, ImageSpinner) == 0x0015F8, "Member 'UW_RosterSelection_MiniCard_C::ImageSpinner' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, img_CountdownProgress) == 0x001600, "Member 'UW_RosterSelection_MiniCard_C::img_CountdownProgress' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, img_PositionCorner) == 0x001608, "Member 'UW_RosterSelection_MiniCard_C::img_PositionCorner' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, lbl_Empty) == 0x001610, "Member 'UW_RosterSelection_MiniCard_C::lbl_Empty' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, MissionsRemainingText) == 0x001618, "Member 'UW_RosterSelection_MiniCard_C::MissionsRemainingText' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Position) == 0x001620, "Member 'UW_RosterSelection_MiniCard_C::Position' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, PositionNumber) == 0x001628, "Member 'UW_RosterSelection_MiniCard_C::PositionNumber' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, ProfileImage) == 0x001630, "Member 'UW_RosterSelection_MiniCard_C::ProfileImage' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, SidebarLeft) == 0x001638, "Member 'UW_RosterSelection_MiniCard_C::SidebarLeft' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, SidebarRight_1) == 0x001640, "Member 'UW_RosterSelection_MiniCard_C::SidebarRight_1' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, SquadPositionBorder) == 0x001648, "Member 'UW_RosterSelection_MiniCard_C::SquadPositionBorder' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Status) == 0x001650, "Member 'UW_RosterSelection_MiniCard_C::Status' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, StressBackground) == 0x001658, "Member 'UW_RosterSelection_MiniCard_C::StressBackground' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, TopLine) == 0x001660, "Member 'UW_RosterSelection_MiniCard_C::TopLine' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, txt_LockedTime) == 0x001668, "Member 'UW_RosterSelection_MiniCard_C::txt_LockedTime' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, txt_Name) == 0x001670, "Member 'UW_RosterSelection_MiniCard_C::txt_Name' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, txt_Specialty) == 0x001678, "Member 'UW_RosterSelection_MiniCard_C::txt_Specialty' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, txt_Status) == 0x001680, "Member 'UW_RosterSelection_MiniCard_C::txt_Status' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, VB_Lock) == 0x001688, "Member 'UW_RosterSelection_MiniCard_C::VB_Lock' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, VB_Outlines) == 0x001690, "Member 'UW_RosterSelection_MiniCard_C::VB_Outlines' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, W_TabletText_LockedTime) == 0x001698, "Member 'UW_RosterSelection_MiniCard_C::W_TabletText_LockedTime' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, W_TabletText_Specialty) == 0x0016A0, "Member 'UW_RosterSelection_MiniCard_C::W_TabletText_Specialty' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, W_TabletText_Status) == 0x0016A8, "Member 'UW_RosterSelection_MiniCard_C::W_TabletText_Status' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, OnHovered) == 0x0016B0, "Member 'UW_RosterSelection_MiniCard_C::OnHovered' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, OnUnhovered) == 0x0016C0, "Member 'UW_RosterSelection_MiniCard_C::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, RosterCharacter) == 0x0016D0, "Member 'UW_RosterSelection_MiniCard_C::RosterCharacter' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, OnClicked) == 0x0016D8, "Member 'UW_RosterSelection_MiniCard_C::OnClicked' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, UnavailableTint) == 0x0016E8, "Member 'UW_RosterSelection_MiniCard_C::UnavailableTint' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, AvailableTint) == 0x0016FC, "Member 'UW_RosterSelection_MiniCard_C::AvailableTint' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, DebugPosition) == 0x001710, "Member 'UW_RosterSelection_MiniCard_C::DebugPosition' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, DebugState) == 0x001711, "Member 'UW_RosterSelection_MiniCard_C::DebugState' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Empty) == 0x001712, "Member 'UW_RosterSelection_MiniCard_C::Empty' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Locked) == 0x001713, "Member 'UW_RosterSelection_MiniCard_C::Locked' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, OnEmptyClicked) == 0x001718, "Member 'UW_RosterSelection_MiniCard_C::OnEmptyClicked' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, OnFocused) == 0x001728, "Member 'UW_RosterSelection_MiniCard_C::OnFocused' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, OnUnfocused) == 0x001738, "Member 'UW_RosterSelection_MiniCard_C::OnUnfocused' has a wrong offset!");

}

