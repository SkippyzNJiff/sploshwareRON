#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ScoreNotify

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FMODStudio_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_ScoreNotify.W_ScoreNotify_C
// 0x00D0 (0x0390 - 0x02C0)
class UW_ScoreNotify_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_HideScore;                                    // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_ShowScore;                                    // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 RedLine_Image;                                     // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Score_Text;                                        // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Score_Value;                                       // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   ScoreText;                                         // 0x02F0(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	int32                                         CalculatedScore;                                   // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bGive;                                             // 0x030C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ElapsedTime;                                       // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScoreCounterSpeed;                                 // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 FinalString;                                       // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bTextAnimationFinished;                            // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Iterator;                                          // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Chars;                                             // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        CurrentDelay;                                      // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DelayBetweenLetters;                               // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DelayBetweenWords;                                 // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 EndString;                                         // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bFadeOut;                                          // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalScore;                                        // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ElapsedTime_Text;                                  // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     FMOD_ScoreCounterInstance;                         // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FFMODEventInstance                     FMOD_ScoreNotifyInstance;                          // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Construct();
	void DestroyWidget();
	void Destruct();
	void ExecuteUbergraph_W_ScoreNotify(int32 EntryPoint);
	void InitScoreData(const class FText& InScoreText, int32 InScore, bool bGive_0);
	void OnInitialized();
	void PlayRewardAnim();
	void PreConstruct(bool IsDesignTime);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_ScoreNotify_C">();
	}
	static class UW_ScoreNotify_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_ScoreNotify_C>();
	}
};
static_assert(alignof(UW_ScoreNotify_C) == 0x000008, "Wrong alignment on UW_ScoreNotify_C");
static_assert(sizeof(UW_ScoreNotify_C) == 0x000390, "Wrong size on UW_ScoreNotify_C");
static_assert(offsetof(UW_ScoreNotify_C, UberGraphFrame) == 0x0002C0, "Member 'UW_ScoreNotify_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, Anim_HideScore) == 0x0002C8, "Member 'UW_ScoreNotify_C::Anim_HideScore' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, Anim_ShowScore) == 0x0002D0, "Member 'UW_ScoreNotify_C::Anim_ShowScore' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, RedLine_Image) == 0x0002D8, "Member 'UW_ScoreNotify_C::RedLine_Image' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, Score_Text) == 0x0002E0, "Member 'UW_ScoreNotify_C::Score_Text' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, Score_Value) == 0x0002E8, "Member 'UW_ScoreNotify_C::Score_Value' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, ScoreText) == 0x0002F0, "Member 'UW_ScoreNotify_C::ScoreText' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, CalculatedScore) == 0x000308, "Member 'UW_ScoreNotify_C::CalculatedScore' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, bGive) == 0x00030C, "Member 'UW_ScoreNotify_C::bGive' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, ElapsedTime) == 0x000310, "Member 'UW_ScoreNotify_C::ElapsedTime' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, ScoreCounterSpeed) == 0x000318, "Member 'UW_ScoreNotify_C::ScoreCounterSpeed' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, FinalString) == 0x000320, "Member 'UW_ScoreNotify_C::FinalString' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, bTextAnimationFinished) == 0x000330, "Member 'UW_ScoreNotify_C::bTextAnimationFinished' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, Iterator) == 0x000334, "Member 'UW_ScoreNotify_C::Iterator' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, Chars) == 0x000338, "Member 'UW_ScoreNotify_C::Chars' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, CurrentDelay) == 0x000348, "Member 'UW_ScoreNotify_C::CurrentDelay' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, DelayBetweenLetters) == 0x000350, "Member 'UW_ScoreNotify_C::DelayBetweenLetters' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, DelayBetweenWords) == 0x000358, "Member 'UW_ScoreNotify_C::DelayBetweenWords' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, EndString) == 0x000360, "Member 'UW_ScoreNotify_C::EndString' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, bFadeOut) == 0x000370, "Member 'UW_ScoreNotify_C::bFadeOut' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, TotalScore) == 0x000374, "Member 'UW_ScoreNotify_C::TotalScore' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, ElapsedTime_Text) == 0x000378, "Member 'UW_ScoreNotify_C::ElapsedTime_Text' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, FMOD_ScoreCounterInstance) == 0x000380, "Member 'UW_ScoreNotify_C::FMOD_ScoreCounterInstance' has a wrong offset!");
static_assert(offsetof(UW_ScoreNotify_C, FMOD_ScoreNotifyInstance) == 0x000388, "Member 'UW_ScoreNotify_C::FMOD_ScoreNotifyInstance' has a wrong offset!");

}

