#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ButtonBar

#include "Basic.hpp"

#include "CommonUI_classes.hpp"
#include "Engine_structs.hpp"
#include "CommonInput_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_ButtonBar.W_ButtonBar_C
// 0x0150 (0x0438 - 0x02E8)
class UW_ButtonBar_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UW_Button_C*                            btn_FocusIntercept;                                // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_null;                                          // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Options;                                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_null;                                          // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       lbl_Empty;                                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMap<class FString, class FText>              ButtonOptions;                                     // 0x0318(0x0050)(Edit, BlueprintVisible)
	class UClass*                                 ButtonStyle;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ButtonPadding;                                     // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class UW_Button_C*>       ButtonMap;                                         // 0x0378(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class FString                                 CurrentSelection;                                  // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UW_Button_C*                            CurrentActiveButton;                               // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(const class FString& ButtonId, class UW_Button_C* TriggeringButton)> OnOptionClicked; // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const class FString& ButtonId, class UW_Button_C* TriggeringButton)> OnOptionHovered; // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnOptionUnhovered;                                 // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UW_Button_C*                            LastHovered;                                       // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 EquippedButtonStyle;                               // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          UseGamepad;                                        // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Focus;                                             // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Disabled;                                          // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddOption(const class FString& ID, const class FText& ButtonText);
	void BackPage(bool* Handled);
	void ChangePage(class FName PageName);
	void CreateButtonWidget(const class FText& ButtonText, class UW_Button_C** NewButton);
	void DisableBar(bool Disable);
	void DisableOptionByID(const class FString& OptionID);
	void EnableOptionByID(const class FString& OptionID);
	void ExecuteUbergraph_W_ButtonBar(int32 EntryPoint);
	void GetButtonID(const class UW_Button_C*& ButtonToFind, class FString* ID);
	bool GetHasOptions();
	void Hide(double Delay, bool Collapse);
	void InputMethodChanged(ECommonInputType bNewInputType);
	void InsertOptionAtIndex(int32 Index_0, const class FString& ButtonId, const class FText& ButtonText);
	void OnInitialized();
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OptionClicked(class UW_Button_C* Button);
	void OptionHovered(class UW_Button_C* Button);
	void OptionUnhovered();
	void PopulateButtons();
	void PreConstruct(bool IsDesignTime);
	void RemoveButtonByID(const class FString& ID);
	void Reveal(double Delay);
	void SetEquippedButtonByID(const class FString& ButtonId);
	void SetInputMode(bool IsGamepad);
	void SetOptions(const TMap<class FString, class FText>& ButtonOptions_0);
	void SetOptionsMap(const TMap<class FString, class FText>& ButtonOptions_0);

	void GetFocusTarget(class UWidget** Focus_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_ButtonBar_C">();
	}
	static class UW_ButtonBar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_ButtonBar_C>();
	}
};
static_assert(alignof(UW_ButtonBar_C) == 0x000008, "Wrong alignment on UW_ButtonBar_C");
static_assert(sizeof(UW_ButtonBar_C) == 0x000438, "Wrong size on UW_ButtonBar_C");
static_assert(offsetof(UW_ButtonBar_C, UberGraphFrame) == 0x0002E8, "Member 'UW_ButtonBar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, btn_FocusIntercept) == 0x0002F0, "Member 'UW_ButtonBar_C::btn_FocusIntercept' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, btn_null) == 0x0002F8, "Member 'UW_ButtonBar_C::btn_null' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, HB_Options) == 0x000300, "Member 'UW_ButtonBar_C::HB_Options' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, img_null) == 0x000308, "Member 'UW_ButtonBar_C::img_null' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, lbl_Empty) == 0x000310, "Member 'UW_ButtonBar_C::lbl_Empty' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, ButtonOptions) == 0x000318, "Member 'UW_ButtonBar_C::ButtonOptions' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, ButtonStyle) == 0x000368, "Member 'UW_ButtonBar_C::ButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, ButtonPadding) == 0x000370, "Member 'UW_ButtonBar_C::ButtonPadding' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, ButtonMap) == 0x000378, "Member 'UW_ButtonBar_C::ButtonMap' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, CurrentSelection) == 0x0003C8, "Member 'UW_ButtonBar_C::CurrentSelection' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, CurrentActiveButton) == 0x0003D8, "Member 'UW_ButtonBar_C::CurrentActiveButton' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, OnOptionClicked) == 0x0003E0, "Member 'UW_ButtonBar_C::OnOptionClicked' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, OnOptionHovered) == 0x0003F0, "Member 'UW_ButtonBar_C::OnOptionHovered' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, OnOptionUnhovered) == 0x000400, "Member 'UW_ButtonBar_C::OnOptionUnhovered' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, LastHovered) == 0x000410, "Member 'UW_ButtonBar_C::LastHovered' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, EquippedButtonStyle) == 0x000418, "Member 'UW_ButtonBar_C::EquippedButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, UseGamepad) == 0x000420, "Member 'UW_ButtonBar_C::UseGamepad' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, Focus) == 0x000428, "Member 'UW_ButtonBar_C::Focus' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, Disabled) == 0x000430, "Member 'UW_ButtonBar_C::Disabled' has a wrong offset!");

}

