#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_WeaponWheel_MagazineDisplay

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_WeaponWheel_MagazineDisplay.W_WeaponWheel_MagazineDisplay_C
// 0x00B0 (0x0370 - 0x02C0)
class UW_WeaponWheel_MagazineDisplay_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UVerticalBox*                           Container_MagSlot;                                 // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UImage*>                         Mags;                                              // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class ABaseMagazineWeapon*                    MagazineWeapon;                                    // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalMags;                                         // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxAmmo;                                           // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EmptyMags;                                         // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IconSize;                                          // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UW_WeaponWheel_MagazineSlot_C*>  MagSlots;                                          // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          bOnlyShowOneSlot;                                  // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxMagsPerSlot;                                    // 0x031C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMap<int32, int32>                            SlotIndexToMags;                                   // 0x0320(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void CreateMag(class UW_WeaponWheel_MagazineSlot_C*& MagSlot);
	void CreateMagOutline(class UW_WeaponWheel_MagazineSlot_C*& MagSlot);
	void CreateMags();
	class UW_WeaponWheel_MagazineSlot_C* CreateMagSlot();
	void ExecuteUbergraph_W_WeaponWheel_MagazineDisplay(int32 EntryPoint);
	int32 GetMaxSlots();
	void Initialize(class ABaseMagazineWeapon* InMagazineWeapon, double IconSize_0);
	void PopulateSlotIndexToMagsMap();
	void PreConstruct(bool IsDesignTime);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateMagIcon(int32 MagIndex, double CurrentAmmo);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_WeaponWheel_MagazineDisplay_C">();
	}
	static class UW_WeaponWheel_MagazineDisplay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_WeaponWheel_MagazineDisplay_C>();
	}
};
static_assert(alignof(UW_WeaponWheel_MagazineDisplay_C) == 0x000008, "Wrong alignment on UW_WeaponWheel_MagazineDisplay_C");
static_assert(sizeof(UW_WeaponWheel_MagazineDisplay_C) == 0x000370, "Wrong size on UW_WeaponWheel_MagazineDisplay_C");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, UberGraphFrame) == 0x0002C0, "Member 'UW_WeaponWheel_MagazineDisplay_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, Container_MagSlot) == 0x0002C8, "Member 'UW_WeaponWheel_MagazineDisplay_C::Container_MagSlot' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, Mags) == 0x0002D0, "Member 'UW_WeaponWheel_MagazineDisplay_C::Mags' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, MagazineWeapon) == 0x0002E0, "Member 'UW_WeaponWheel_MagazineDisplay_C::MagazineWeapon' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, TotalMags) == 0x0002E8, "Member 'UW_WeaponWheel_MagazineDisplay_C::TotalMags' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, MaxAmmo) == 0x0002F0, "Member 'UW_WeaponWheel_MagazineDisplay_C::MaxAmmo' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, EmptyMags) == 0x0002F8, "Member 'UW_WeaponWheel_MagazineDisplay_C::EmptyMags' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, IconSize) == 0x000300, "Member 'UW_WeaponWheel_MagazineDisplay_C::IconSize' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, MagSlots) == 0x000308, "Member 'UW_WeaponWheel_MagazineDisplay_C::MagSlots' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, bOnlyShowOneSlot) == 0x000318, "Member 'UW_WeaponWheel_MagazineDisplay_C::bOnlyShowOneSlot' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, MaxMagsPerSlot) == 0x00031C, "Member 'UW_WeaponWheel_MagazineDisplay_C::MaxMagsPerSlot' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, SlotIndexToMags) == 0x000320, "Member 'UW_WeaponWheel_MagazineDisplay_C::SlotIndexToMags' has a wrong offset!");

}

