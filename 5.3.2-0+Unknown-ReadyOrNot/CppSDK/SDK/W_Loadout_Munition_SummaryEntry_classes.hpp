#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Loadout_Munition_SummaryEntry

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Loadout_Munition_SummaryEntry.W_Loadout_Munition_SummaryEntry_C
// 0x0470 (0x0730 - 0x02C0)
class UW_Loadout_Munition_SummaryEntry_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHorizontalBox*                         HB_Icons;                                          // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_icon;                                          // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Tag;                                               // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Tag;                                           // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_TabletText_C*                        W_TabletText_Tag;                                  // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture2D*                             PrimaryMagazine;                                   // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             SidearmMagazine;                                   // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Shotgun;                                           // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Pepperball;                                        // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Taser;                                             // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             IconImage;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ItemData;                                          // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsAmmunition;                                      // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsPrimary;                                         // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A[0x2];                                      // 0x032A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AmmoType;                                          // 0x032C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         ItemCount;                                         // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BrushStyle;                                        // 0x0340(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSavedLoadout                          ActiveLoadout;                                     // 0x0410(0x02E8)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Ammo_Variety;                                      // 0x06F8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Ammo_Caliber;                                      // 0x0710(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HideCount;                                         // 0x0728(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BackPage(bool* Handled);
	void ChangePage(class FName PageName);
	void Construct();
	void CreateIcon();
	void ExecuteUbergraph_W_Loadout_Munition_SummaryEntry(int32 EntryPoint);
	void GetAmmoIcon();
	void GetAmmoInfo();
	void GetAmmoName(class FText* AmmoName);
	class UTexture2D* GetItemIcon();
	void HeaderSubpageNavigation(class FName OptionNameID);
	void Hide(double Delay, bool Collapse);
	void PreConstruct(bool IsDesignTime);
	void Reveal(double Delay);
	void SetInputMode(bool IsGamepad);
	void UpdateActiveLoadout(const struct FSavedLoadout& ActiveLoadout_0);
	void UpdateAmmunition(class UClass* Weapon, class FName AmmoType_0, int32 Count);
	void UpdateCurrentItemMap(const TMap<EItemCategory, class UClass*>& ItemCategory);
	void UpdateItem(class UClass* ItemData_0, int32 Count);

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Loadout_Munition_SummaryEntry_C">();
	}
	static class UW_Loadout_Munition_SummaryEntry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Loadout_Munition_SummaryEntry_C>();
	}
};
static_assert(alignof(UW_Loadout_Munition_SummaryEntry_C) == 0x000010, "Wrong alignment on UW_Loadout_Munition_SummaryEntry_C");
static_assert(sizeof(UW_Loadout_Munition_SummaryEntry_C) == 0x000730, "Wrong size on UW_Loadout_Munition_SummaryEntry_C");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, UberGraphFrame) == 0x0002C0, "Member 'UW_Loadout_Munition_SummaryEntry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, HB_Icons) == 0x0002C8, "Member 'UW_Loadout_Munition_SummaryEntry_C::HB_Icons' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, img_icon) == 0x0002D0, "Member 'UW_Loadout_Munition_SummaryEntry_C::img_icon' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, Tag) == 0x0002D8, "Member 'UW_Loadout_Munition_SummaryEntry_C::Tag' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, txt_Tag) == 0x0002E0, "Member 'UW_Loadout_Munition_SummaryEntry_C::txt_Tag' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, W_TabletText_Tag) == 0x0002E8, "Member 'UW_Loadout_Munition_SummaryEntry_C::W_TabletText_Tag' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, PrimaryMagazine) == 0x0002F0, "Member 'UW_Loadout_Munition_SummaryEntry_C::PrimaryMagazine' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, SidearmMagazine) == 0x0002F8, "Member 'UW_Loadout_Munition_SummaryEntry_C::SidearmMagazine' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, Shotgun) == 0x000300, "Member 'UW_Loadout_Munition_SummaryEntry_C::Shotgun' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, Pepperball) == 0x000308, "Member 'UW_Loadout_Munition_SummaryEntry_C::Pepperball' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, Taser) == 0x000310, "Member 'UW_Loadout_Munition_SummaryEntry_C::Taser' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, IconImage) == 0x000318, "Member 'UW_Loadout_Munition_SummaryEntry_C::IconImage' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, ItemData) == 0x000320, "Member 'UW_Loadout_Munition_SummaryEntry_C::ItemData' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, IsAmmunition) == 0x000328, "Member 'UW_Loadout_Munition_SummaryEntry_C::IsAmmunition' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, IsPrimary) == 0x000329, "Member 'UW_Loadout_Munition_SummaryEntry_C::IsPrimary' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, AmmoType) == 0x00032C, "Member 'UW_Loadout_Munition_SummaryEntry_C::AmmoType' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, ItemCount) == 0x000334, "Member 'UW_Loadout_Munition_SummaryEntry_C::ItemCount' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, BrushStyle) == 0x000340, "Member 'UW_Loadout_Munition_SummaryEntry_C::BrushStyle' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, ActiveLoadout) == 0x000410, "Member 'UW_Loadout_Munition_SummaryEntry_C::ActiveLoadout' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, Ammo_Variety) == 0x0006F8, "Member 'UW_Loadout_Munition_SummaryEntry_C::Ammo_Variety' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, Ammo_Caliber) == 0x000710, "Member 'UW_Loadout_Munition_SummaryEntry_C::Ammo_Caliber' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Munition_SummaryEntry_C, HideCount) == 0x000728, "Member 'UW_Loadout_Munition_SummaryEntry_C::HideCount' has a wrong offset!");

}

