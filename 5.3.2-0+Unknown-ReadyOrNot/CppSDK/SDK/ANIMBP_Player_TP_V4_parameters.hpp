#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_Player_TP_V4

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK::Params
{

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_Player_TP_V4_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_AnimGraph) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_AnimGraph");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_AnimGraph) == 0x000010, "Wrong size on ANIMBP_Player_TP_V4_C_AnimGraph");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ANIMBP_Player_TP_V4_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ANIMBP_Player_TP_V4_C_BlueprintUpdateAnimation");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ANIMBP_Player_TP_V4_C_BlueprintUpdateAnimation");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.ExecuteUbergraph_ANIMBP_Player_TP_V4
// 0x0070 (0x0070 - 0x0000)
struct ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_1;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerCharacter*                       K2Node_DynamicCast_AsPlayer_Character;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCharacter*                       K2Node_DynamicCast_AsPlayer_Character_1;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseItem*                              CallFunc_GetEquippedItem_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABaseItem*                              CallFunc_GetEquippedItem_ReturnValue_1;            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetItemMesh_ReturnValue;                  // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetItemMesh_ReturnValue_1;                // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_2;            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotCharacter*                   K2Node_DynamicCast_AsReady_or_Not_Character;       // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4) == 0x000070, "Wrong size on ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, EntryPoint) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::EntryPoint' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, K2Node_Event_DeltaTimeX) == 0x000004, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000008, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, CallFunc_TryGetPawnOwner_ReturnValue_1) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::CallFunc_TryGetPawnOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, K2Node_DynamicCast_AsPlayer_Character) == 0x000018, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::K2Node_DynamicCast_AsPlayer_Character' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, K2Node_DynamicCast_AsPlayer_Character_1) == 0x000028, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::K2Node_DynamicCast_AsPlayer_Character_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, CallFunc_GetEquippedItem_ReturnValue) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::CallFunc_GetEquippedItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, CallFunc_GetEquippedItem_ReturnValue_1) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::CallFunc_GetEquippedItem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, CallFunc_GetItemMesh_ReturnValue) == 0x000048, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::CallFunc_GetItemMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, CallFunc_GetItemMesh_ReturnValue_1) == 0x000050, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::CallFunc_GetItemMesh_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, CallFunc_TryGetPawnOwner_ReturnValue_2) == 0x000058, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::CallFunc_TryGetPawnOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, K2Node_DynamicCast_AsReady_or_Not_Character) == 0x000060, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::K2Node_DynamicCast_AsReady_or_Not_Character' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4, K2Node_DynamicCast_bSuccess_2) == 0x000068, "Member 'ANIMBP_Player_TP_V4_C_ExecuteUbergraph_ANIMBP_Player_TP_V4::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.SetActiveTurnAnim
// 0x0058 (0x0058 - 0x0000)
struct ANIMBP_Player_TP_V4_C_SetActiveTurnAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0038(0x0010)(NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_SetExplicitTime_ReturnValue;              // 0x0048(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_SetActiveTurnAnim) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_SetActiveTurnAnim");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_SetActiveTurnAnim) == 0x000058, "Wrong size on ANIMBP_Player_TP_V4_C_SetActiveTurnAnim");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetActiveTurnAnim, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_SetActiveTurnAnim::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetActiveTurnAnim, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_SetActiveTurnAnim::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetActiveTurnAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_SetActiveTurnAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetActiveTurnAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_SetActiveTurnAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetActiveTurnAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_SetActiveTurnAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetActiveTurnAnim, CallFunc_SetExplicitTime_ReturnValue) == 0x000048, "Member 'ANIMBP_Player_TP_V4_C_SetActiveTurnAnim::CallFunc_SetExplicitTime_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.SetActiveTurnRecoveryAnim
// 0x0058 (0x0058 - 0x0000)
struct ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0038(0x0010)(NoDestructor)
	struct FSequencePlayerReference               CallFunc_SetAccumulatedTime_ReturnValue;           // 0x0048(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim) == 0x000058, "Wrong size on ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim, CallFunc_SetAccumulatedTime_ReturnValue) == 0x000048, "Member 'ANIMBP_Player_TP_V4_C_SetActiveTurnRecoveryAnim::CallFunc_SetAccumulatedTime_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.SetCrouchToStandAnim
// 0x0048 (0x0048 - 0x0000)
struct ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0038(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim) == 0x000048, "Wrong size on ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_SetCrouchToStandAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.SetJumpStartAnim
// 0x0048 (0x0048 - 0x0000)
struct ANIMBP_Player_TP_V4_C_SetJumpStartAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0038(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_SetJumpStartAnim) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_SetJumpStartAnim");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_SetJumpStartAnim) == 0x000048, "Wrong size on ANIMBP_Player_TP_V4_C_SetJumpStartAnim");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetJumpStartAnim, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_SetJumpStartAnim::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetJumpStartAnim, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_SetJumpStartAnim::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetJumpStartAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_SetJumpStartAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetJumpStartAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_SetJumpStartAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetJumpStartAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_SetJumpStartAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.SetStandToCrouchAnim
// 0x0048 (0x0048 - 0x0000)
struct ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0038(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim) == 0x000048, "Wrong size on ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_SetStandToCrouchAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.SetWeaponGripPose
// 0x00A8 (0x00A8 - 0x0000)
struct ANIMBP_Player_TP_V4_C_SetWeaponGripPose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            SeqEval;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0030(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetSequence_ReturnValue;                  // 0x0048(0x0010)(NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_SetSequence_ReturnValue_1;                // 0x0058(0x0010)(NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_SetSequence_ReturnValue_2;                // 0x0068(0x0010)(NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_SetSequence_ReturnValue_3;                // 0x0078(0x0010)(NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_SetSequence_ReturnValue_4;                // 0x0088(0x0010)(NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_SetSequence_ReturnValue_5;                // 0x0098(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_SetWeaponGripPose) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_SetWeaponGripPose");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_SetWeaponGripPose) == 0x0000A8, "Wrong size on ANIMBP_Player_TP_V4_C_SetWeaponGripPose");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetWeaponGripPose, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_SetWeaponGripPose::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetWeaponGripPose, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_SetWeaponGripPose::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetWeaponGripPose, SeqEval) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_SetWeaponGripPose::SeqEval' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetWeaponGripPose, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_SetWeaponGripPose::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetWeaponGripPose, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_SetWeaponGripPose::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetWeaponGripPose, K2Node_SwitchEnum_CmpSuccess) == 0x000041, "Member 'ANIMBP_Player_TP_V4_C_SetWeaponGripPose::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetWeaponGripPose, CallFunc_SetSequence_ReturnValue) == 0x000048, "Member 'ANIMBP_Player_TP_V4_C_SetWeaponGripPose::CallFunc_SetSequence_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetWeaponGripPose, CallFunc_SetSequence_ReturnValue_1) == 0x000058, "Member 'ANIMBP_Player_TP_V4_C_SetWeaponGripPose::CallFunc_SetSequence_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetWeaponGripPose, CallFunc_SetSequence_ReturnValue_2) == 0x000068, "Member 'ANIMBP_Player_TP_V4_C_SetWeaponGripPose::CallFunc_SetSequence_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetWeaponGripPose, CallFunc_SetSequence_ReturnValue_3) == 0x000078, "Member 'ANIMBP_Player_TP_V4_C_SetWeaponGripPose::CallFunc_SetSequence_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetWeaponGripPose, CallFunc_SetSequence_ReturnValue_4) == 0x000088, "Member 'ANIMBP_Player_TP_V4_C_SetWeaponGripPose::CallFunc_SetSequence_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_SetWeaponGripPose, CallFunc_SetSequence_ReturnValue_5) == 0x000098, "Member 'ANIMBP_Player_TP_V4_C_SetWeaponGripPose::CallFunc_SetSequence_ReturnValue_5' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateActiveTurnAnim
// 0x0048 (0x0048 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetExplicitTime_ReturnValue;              // 0x0038(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim) == 0x000048, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim, CallFunc_SetExplicitTime_ReturnValue) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateActiveTurnAnim::CallFunc_SetExplicitTime_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateBaseOverridePose
// 0x0050 (0x0050 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0040(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose) == 0x000050, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose, Temp_bool_Variable) == 0x000031, "Member 'ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose, K2Node_Select_Default) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_UpdateBaseOverridePose::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateCurrentAOBS
// 0x0050 (0x0050 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FBlendSpacePlayerReference             CallFunc_ConvertToBlendSpacePlayerPure_BlendSpacePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToBlendSpacePlayerPure_Result;     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAimOffsetBlendSpace*                   K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FBlendSpacePlayerReference             CallFunc_SetBlendSpaceWithInertialBlending_ReturnValue; // 0x0040(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS) == 0x000050, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS, CallFunc_ConvertToBlendSpacePlayerPure_BlendSpacePlayer) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS::CallFunc_ConvertToBlendSpacePlayerPure_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS, CallFunc_ConvertToBlendSpacePlayerPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS::CallFunc_ConvertToBlendSpacePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS, Temp_bool_Variable) == 0x000031, "Member 'ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS, K2Node_Select_Default) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS, CallFunc_SetBlendSpaceWithInertialBlending_ReturnValue) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_UpdateCurrentAOBS::CallFunc_SetBlendSpaceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateHighLeanAdditivePose
// 0x0050 (0x0050 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0040(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose) == 0x000050, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose, Temp_bool_Variable) == 0x000031, "Member 'ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose, K2Node_Select_Default) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_UpdateHighLeanAdditivePose::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateItemIdleOverridePose
// 0x0058 (0x0058 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0048(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose) == 0x000058, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose, Temp_bool_Variable) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000028, "Member 'ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose, K2Node_Select_Default) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000048, "Member 'ANIMBP_Player_TP_V4_C_UpdateItemIdleOverridePose::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateJumpLoopAnim
// 0x0048 (0x0048 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0038(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim) == 0x000048, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateJumpLoopAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateJumpRecoveryAnim
// 0x0058 (0x0058 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetExplicitTime_ReturnValue;              // 0x0038(0x0010)(NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0048(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim) == 0x000058, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim, CallFunc_SetExplicitTime_ReturnValue) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim::CallFunc_SetExplicitTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000048, "Member 'ANIMBP_Player_TP_V4_C_UpdateJumpRecoveryAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateLeanLeftPose
// 0x0070 (0x0070 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0048(0x0010)(NoDestructor)
	float                                         K2Node_Select_Default_1;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetExplicitTime_ReturnValue;              // 0x0060(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose) == 0x000070, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose, Temp_bool_Variable) == 0x000031, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose, K2Node_Select_Default) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose, Temp_bool_Variable_1) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000048, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose, K2Node_Select_Default_1) == 0x000058, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose, CallFunc_SetExplicitTime_ReturnValue) == 0x000060, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanLeftPose::CallFunc_SetExplicitTime_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateLeanRightPose
// 0x0070 (0x0070 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateLeanRightPose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0048(0x0010)(NoDestructor)
	float                                         K2Node_Select_Default_1;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_SetExplicitTime_ReturnValue;              // 0x0060(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateLeanRightPose) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateLeanRightPose");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateLeanRightPose) == 0x000070, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateLeanRightPose");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanRightPose, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanRightPose::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanRightPose, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanRightPose::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanRightPose, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanRightPose::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanRightPose, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanRightPose::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanRightPose, Temp_bool_Variable) == 0x000031, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanRightPose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanRightPose, K2Node_Select_Default) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanRightPose::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanRightPose, Temp_bool_Variable_1) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanRightPose::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanRightPose, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000048, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanRightPose::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanRightPose, K2Node_Select_Default_1) == 0x000058, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanRightPose::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLeanRightPose, CallFunc_SetExplicitTime_ReturnValue) == 0x000060, "Member 'ANIMBP_Player_TP_V4_C_UpdateLeanRightPose::CallFunc_SetExplicitTime_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateLoweredAdditivePose
// 0x0058 (0x0058 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0048(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose) == 0x000058, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose, Temp_bool_Variable) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000028, "Member 'ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose, K2Node_Select_Default) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000048, "Member 'ANIMBP_Player_TP_V4_C_UpdateLoweredAdditivePose::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateQuickLeanLeftPose
// 0x0050 (0x0050 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0040(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose) == 0x000050, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose, Temp_bool_Variable) == 0x000031, "Member 'ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose, K2Node_Select_Default) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_UpdateQuickLeanLeftPose::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateQuickLeanRightPose
// 0x0050 (0x0050 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0040(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose) == 0x000050, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose, Temp_bool_Variable) == 0x000031, "Member 'ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose, K2Node_Select_Default) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_UpdateQuickLeanRightPose::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateRetentionAdditivePose
// 0x0060 (0x0060 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_1;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_2;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0050(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose) == 0x000060, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose, Temp_bool_Variable) == 0x000031, "Member 'ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose, Temp_bool_Variable_1) == 0x000032, "Member 'ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose, Temp_bool_Variable_2) == 0x000033, "Member 'ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose, K2Node_Select_Default) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose, K2Node_Select_Default_1) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose, K2Node_Select_Default_2) == 0x000048, "Member 'ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000050, "Member 'ANIMBP_Player_TP_V4_C_UpdateRetentionAdditivePose::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateShieldAimPose
// 0x0050 (0x0050 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateShieldAimPose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0040(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateShieldAimPose) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateShieldAimPose");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateShieldAimPose) == 0x000050, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateShieldAimPose");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateShieldAimPose, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateShieldAimPose::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateShieldAimPose, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateShieldAimPose::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateShieldAimPose, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateShieldAimPose::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateShieldAimPose, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_UpdateShieldAimPose::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateShieldAimPose, Temp_bool_Variable) == 0x000031, "Member 'ANIMBP_Player_TP_V4_C_UpdateShieldAimPose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateShieldAimPose, K2Node_Select_Default) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateShieldAimPose::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateShieldAimPose, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_UpdateShieldAimPose::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateSightsAdditivePose
// 0x0058 (0x0058 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequenceEvaluatorPure_Result;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0048(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose) == 0x000058, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose, Temp_bool_Variable) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose, CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator) == 0x000028, "Member 'ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose::CallFunc_ConvertToSequenceEvaluatorPure_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose, CallFunc_ConvertToSequenceEvaluatorPure_Result) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose::CallFunc_ConvertToSequenceEvaluatorPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose, K2Node_Select_Default) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000048, "Member 'ANIMBP_Player_TP_V4_C_UpdateSightsAdditivePose::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateStunLoopAnim
// 0x0050 (0x0050 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0040(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim) == 0x000050, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim, Temp_bool_Variable) == 0x000031, "Member 'ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim, K2Node_Select_Default) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_UpdateStunLoopAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ANIMBP_Player_TP_V4.ANIMBP_Player_TP_V4_C.UpdateTaserLoopAnim
// 0x0050 (0x0050 - 0x0000)
struct ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0040(0x0010)(NoDestructor)
};
static_assert(alignof(ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim) == 0x000008, "Wrong alignment on ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim");
static_assert(sizeof(ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim) == 0x000050, "Wrong size on ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim, Context) == 0x000000, "Member 'ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim::Context' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim, Node) == 0x000010, "Member 'ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim::Node' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim, Temp_bool_Variable) == 0x000031, "Member 'ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim, K2Node_Select_Default) == 0x000038, "Member 'ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000040, "Member 'ANIMBP_Player_TP_V4_C_UpdateTaserLoopAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

}

