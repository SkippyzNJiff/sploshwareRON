#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ObjectiveMarker

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_ObjectiveMarker.W_ObjectiveMarker_C.ExecuteUbergraph_W_ObjectiveMarker
// 0x00D8 (0x00D8 - 0x0000)
struct W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x004C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue;            // 0x0070(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00A8(0x0018)()
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker) == 0x000008, "Wrong alignment on W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker");
static_assert(sizeof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker) == 0x0000D8, "Wrong size on W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, EntryPoint) == 0x000000, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, K2Node_Event_MyGeometry) == 0x000004, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, Temp_bool_Variable) == 0x000040, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, Temp_int_Variable) == 0x000044, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, Temp_int_Variable_1) == 0x000048, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, K2Node_CreateDelegate_OutputDelegate) == 0x00004C, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000060, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000068, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, K2Node_Select_Default) == 0x00006C, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, CallFunc_Conv_DoubleToText_ReturnValue) == 0x000070, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::CallFunc_Conv_DoubleToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, CallFunc_Conv_TextToString_ReturnValue) == 0x000088, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, CallFunc_Concat_StrStr_ReturnValue) == 0x000098, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, CallFunc_Conv_StringToText_ReturnValue) == 0x0000A8, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, CallFunc_IsAnimationPlaying_ReturnValue) == 0x0000C0, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, CallFunc_PlayAnimation_ReturnValue) == 0x0000C8, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x0000D0, "Member 'W_ObjectiveMarker_C_ExecuteUbergraph_W_ObjectiveMarker::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function W_ObjectiveMarker.W_ObjectiveMarker_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_ObjectiveMarker_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ObjectiveMarker_C_Tick) == 0x000004, "Wrong alignment on W_ObjectiveMarker_C_Tick");
static_assert(sizeof(W_ObjectiveMarker_C_Tick) == 0x00003C, "Wrong size on W_ObjectiveMarker_C_Tick");
static_assert(offsetof(W_ObjectiveMarker_C_Tick, MyGeometry) == 0x000000, "Member 'W_ObjectiveMarker_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_ObjectiveMarker_C_Tick, InDeltaTime) == 0x000038, "Member 'W_ObjectiveMarker_C_Tick::InDeltaTime' has a wrong offset!");

}

