#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomAnimNode

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CustomAnimNode_structs.hpp"


namespace SDK::Params
{

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.ComputeMatchedPlayRateFromDuration
// 0x0018 (0x0018 - 0x0000)
struct AnimSuiteNodeHelperLibrary_ComputeMatchedPlayRateFromDuration final
{
public:
	struct FSequenceMatcherReference              SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_ComputeMatchedPlayRateFromDuration) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_ComputeMatchedPlayRateFromDuration");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_ComputeMatchedPlayRateFromDuration) == 0x000018, "Wrong size on AnimSuiteNodeHelperLibrary_ComputeMatchedPlayRateFromDuration");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ComputeMatchedPlayRateFromDuration, SequencePlayer) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_ComputeMatchedPlayRateFromDuration::SequencePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ComputeMatchedPlayRateFromDuration, Duration) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_ComputeMatchedPlayRateFromDuration::Duration' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ComputeMatchedPlayRateFromDuration, ReturnValue) == 0x000014, "Member 'AnimSuiteNodeHelperLibrary_ComputeMatchedPlayRateFromDuration::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.ConvertToMatchedBlendSpacePlayer
// 0x0028 (0x0028 - 0x0000)
struct AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayer final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendSpaceMatcherReference            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayer) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayer");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayer) == 0x000028, "Wrong size on AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayer");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayer, Node) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayer::Node' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayer, Result) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayer::Result' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayer, ReturnValue) == 0x000018, "Member 'AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayer::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.ConvertToMatchedBlendSpacePlayerPure
// 0x0028 (0x0028 - 0x0000)
struct AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayerPure final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBlendSpaceMatcherReference            BlendSpaceMatchedPlayer;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayerPure) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayerPure");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayerPure) == 0x000028, "Wrong size on AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayerPure");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayerPure, Node) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayerPure::Node' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayerPure, BlendSpaceMatchedPlayer) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayerPure::BlendSpaceMatchedPlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayerPure, Result) == 0x000020, "Member 'AnimSuiteNodeHelperLibrary_ConvertToMatchedBlendSpacePlayerPure::Result' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.ConvertToMatchedSequencePlayer
// 0x0028 (0x0028 - 0x0000)
struct AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayer final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceMatcherReference              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayer) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayer");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayer) == 0x000028, "Wrong size on AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayer");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayer, Node) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayer::Node' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayer, Result) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayer::Result' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayer, ReturnValue) == 0x000018, "Member 'AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayer::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.ConvertToMatchedSequencePlayerPure
// 0x0028 (0x0028 - 0x0000)
struct AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayerPure final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSequenceMatcherReference              SequencePlayer;                                    // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bResult;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayerPure) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayerPure");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayerPure) == 0x000028, "Wrong size on AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayerPure");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayerPure, Node) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayerPure::Node' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayerPure, SequencePlayer) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayerPure::SequencePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayerPure, bResult) == 0x000020, "Member 'AnimSuiteNodeHelperLibrary_ConvertToMatchedSequencePlayerPure::bResult' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.GetMatchedAccumulatedTime
// 0x0018 (0x0018 - 0x0000)
struct AnimSuiteNodeHelperLibrary_GetMatchedAccumulatedTime final
{
public:
	struct FSequenceMatcherReference              SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_GetMatchedAccumulatedTime) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_GetMatchedAccumulatedTime");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_GetMatchedAccumulatedTime) == 0x000018, "Wrong size on AnimSuiteNodeHelperLibrary_GetMatchedAccumulatedTime");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_GetMatchedAccumulatedTime, SequencePlayer) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_GetMatchedAccumulatedTime::SequencePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_GetMatchedAccumulatedTime, ReturnValue) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_GetMatchedAccumulatedTime::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.GetMatchedScaledAccumulatedTime
// 0x0018 (0x0018 - 0x0000)
struct AnimSuiteNodeHelperLibrary_GetMatchedScaledAccumulatedTime final
{
public:
	struct FBlendSpaceMatcherReference            BlendSpaceMatchedPlayer;                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_GetMatchedScaledAccumulatedTime) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_GetMatchedScaledAccumulatedTime");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_GetMatchedScaledAccumulatedTime) == 0x000018, "Wrong size on AnimSuiteNodeHelperLibrary_GetMatchedScaledAccumulatedTime");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_GetMatchedScaledAccumulatedTime, BlendSpaceMatchedPlayer) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_GetMatchedScaledAccumulatedTime::BlendSpaceMatchedPlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_GetMatchedScaledAccumulatedTime, ReturnValue) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_GetMatchedScaledAccumulatedTime::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.GetMatchedSequencePure
// 0x0018 (0x0018 - 0x0000)
struct AnimSuiteNodeHelperLibrary_GetMatchedSequencePure final
{
public:
	struct FSequenceMatcherReference              SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_GetMatchedSequencePure) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_GetMatchedSequencePure");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_GetMatchedSequencePure) == 0x000018, "Wrong size on AnimSuiteNodeHelperLibrary_GetMatchedSequencePure");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_GetMatchedSequencePure, SequencePlayer) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_GetMatchedSequencePure::SequencePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_GetMatchedSequencePure, ReturnValue) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_GetMatchedSequencePure::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.GetMatchingLoopAnimation
// 0x0018 (0x0018 - 0x0000)
struct AnimSuiteNodeHelperLibrary_GetMatchingLoopAnimation final
{
public:
	struct FSequenceMatcherReference              SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_GetMatchingLoopAnimation) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_GetMatchingLoopAnimation");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_GetMatchingLoopAnimation) == 0x000018, "Wrong size on AnimSuiteNodeHelperLibrary_GetMatchingLoopAnimation");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_GetMatchingLoopAnimation, SequencePlayer) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_GetMatchingLoopAnimation::SequencePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_GetMatchingLoopAnimation, ReturnValue) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_GetMatchingLoopAnimation::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.GetMatchingPlayRate
// 0x0018 (0x0018 - 0x0000)
struct AnimSuiteNodeHelperLibrary_GetMatchingPlayRate final
{
public:
	struct FSequenceMatcherReference              SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_GetMatchingPlayRate) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_GetMatchingPlayRate");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_GetMatchingPlayRate) == 0x000018, "Wrong size on AnimSuiteNodeHelperLibrary_GetMatchingPlayRate");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_GetMatchingPlayRate, SequencePlayer) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_GetMatchingPlayRate::SequencePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_GetMatchingPlayRate, ReturnValue) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_GetMatchingPlayRate::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.GetMatchingStartPosition
// 0x0018 (0x0018 - 0x0000)
struct AnimSuiteNodeHelperLibrary_GetMatchingStartPosition final
{
public:
	struct FSequenceMatcherReference              SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_GetMatchingStartPosition) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_GetMatchingStartPosition");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_GetMatchingStartPosition) == 0x000018, "Wrong size on AnimSuiteNodeHelperLibrary_GetMatchingStartPosition");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_GetMatchingStartPosition, SequencePlayer) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_GetMatchingStartPosition::SequencePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_GetMatchingStartPosition, ReturnValue) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_GetMatchingStartPosition::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.GetScaledAccumulatedTime
// 0x0018 (0x0018 - 0x0000)
struct AnimSuiteNodeHelperLibrary_GetScaledAccumulatedTime final
{
public:
	struct FBlendSpacePlayerReference             BlendSpacePlayer;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_GetScaledAccumulatedTime) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_GetScaledAccumulatedTime");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_GetScaledAccumulatedTime) == 0x000018, "Wrong size on AnimSuiteNodeHelperLibrary_GetScaledAccumulatedTime");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_GetScaledAccumulatedTime, BlendSpacePlayer) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_GetScaledAccumulatedTime::BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_GetScaledAccumulatedTime, ReturnValue) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_GetScaledAccumulatedTime::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetExplicitTimeByPoseMatching
// 0x0048 (0x0048 - 0x0000)
struct AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching final
{
public:
	struct FAnimUpdateContext                     UpdateContext;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSequencePlayerReference               SequencePlayer;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SampleRate;                                        // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldMatchVelocity;                              // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldInertiallyBlend;                            // 0x0025(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InertialBlendTime;                                 // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReturnValues            ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching) == 0x000048, "Wrong size on AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching, UpdateContext) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching::UpdateContext' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching, SequencePlayer) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching::SequencePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching, SampleRate) == 0x000020, "Member 'AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching::SampleRate' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching, bShouldMatchVelocity) == 0x000024, "Member 'AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching::bShouldMatchVelocity' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching, bShouldInertiallyBlend) == 0x000025, "Member 'AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching::bShouldInertiallyBlend' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching, InertialBlendTime) == 0x000028, "Member 'AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching::InertialBlendTime' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching, ReturnValue) == 0x000030, "Member 'AnimSuiteNodeHelperLibrary_SetExplicitTimeByPoseMatching::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetMatchedAccumulatedTime
// 0x0028 (0x0028 - 0x0000)
struct AnimSuiteNodeHelperLibrary_SetMatchedAccumulatedTime final
{
public:
	struct FSequenceMatcherReference              SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceMatcherReference              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_SetMatchedAccumulatedTime) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_SetMatchedAccumulatedTime");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_SetMatchedAccumulatedTime) == 0x000028, "Wrong size on AnimSuiteNodeHelperLibrary_SetMatchedAccumulatedTime");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedAccumulatedTime, SequencePlayer) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedAccumulatedTime::SequencePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedAccumulatedTime, Time) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedAccumulatedTime::Time' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedAccumulatedTime, ReturnValue) == 0x000018, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedAccumulatedTime::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetMatchedBlendSpace
// 0x0028 (0x0028 - 0x0000)
struct AnimSuiteNodeHelperLibrary_SetMatchedBlendSpace final
{
public:
	struct FBlendSpaceMatcherReference            BlendSpaceMatchedPlayer;                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UBlendSpace*                            BlendSpace;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlendSpaceMatcherReference            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_SetMatchedBlendSpace) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_SetMatchedBlendSpace");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_SetMatchedBlendSpace) == 0x000028, "Wrong size on AnimSuiteNodeHelperLibrary_SetMatchedBlendSpace");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedBlendSpace, BlendSpaceMatchedPlayer) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedBlendSpace::BlendSpaceMatchedPlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedBlendSpace, BlendSpace) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedBlendSpace::BlendSpace' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedBlendSpace, ReturnValue) == 0x000018, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedBlendSpace::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetMatchedBlendSpaceWithInertialBlending
// 0x0040 (0x0040 - 0x0000)
struct AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending final
{
public:
	struct FAnimUpdateContext                     UpdateContext;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBlendSpaceMatcherReference            BlendSpaceMatchedPlayer;                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UBlendSpace*                            BlendSpace;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendSpaceMatcherReference            ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending) == 0x000040, "Wrong size on AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending, UpdateContext) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending::UpdateContext' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending, BlendSpaceMatchedPlayer) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending::BlendSpaceMatchedPlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending, BlendSpace) == 0x000020, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending::BlendSpace' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending, BlendTime) == 0x000028, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending::BlendTime' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending, ReturnValue) == 0x000030, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedBlendSpaceWithInertialBlending::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetMatchedPlayRate
// 0x0028 (0x0028 - 0x0000)
struct AnimSuiteNodeHelperLibrary_SetMatchedPlayRate final
{
public:
	struct FSequenceMatcherReference              SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceMatcherReference              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_SetMatchedPlayRate) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_SetMatchedPlayRate");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_SetMatchedPlayRate) == 0x000028, "Wrong size on AnimSuiteNodeHelperLibrary_SetMatchedPlayRate");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedPlayRate, SequencePlayer) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedPlayRate::SequencePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedPlayRate, PlayRate) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedPlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedPlayRate, ReturnValue) == 0x000018, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedPlayRate::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetMatchedSequence
// 0x0028 (0x0028 - 0x0000)
struct AnimSuiteNodeHelperLibrary_SetMatchedSequence final
{
public:
	struct FSequenceMatcherReference              SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Sequence;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequenceMatcherReference              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_SetMatchedSequence) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_SetMatchedSequence");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_SetMatchedSequence) == 0x000028, "Wrong size on AnimSuiteNodeHelperLibrary_SetMatchedSequence");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedSequence, SequencePlayer) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedSequence::SequencePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedSequence, Sequence) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedSequence::Sequence' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedSequence, ReturnValue) == 0x000018, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedSequence::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetMatchedStartPosition
// 0x0028 (0x0028 - 0x0000)
struct AnimSuiteNodeHelperLibrary_SetMatchedStartPosition final
{
public:
	struct FSequenceMatcherReference              SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StartPosition;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceMatcherReference              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_SetMatchedStartPosition) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_SetMatchedStartPosition");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_SetMatchedStartPosition) == 0x000028, "Wrong size on AnimSuiteNodeHelperLibrary_SetMatchedStartPosition");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedStartPosition, SequencePlayer) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedStartPosition::SequencePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedStartPosition, StartPosition) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedStartPosition::StartPosition' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetMatchedStartPosition, ReturnValue) == 0x000018, "Member 'AnimSuiteNodeHelperLibrary_SetMatchedStartPosition::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetNormalizedTime
// 0x0028 (0x0028 - 0x0000)
struct AnimSuiteNodeHelperLibrary_SetNormalizedTime final
{
public:
	struct FBlendSpacePlayerReference             BlendSpacePlayer;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         NormalizedTime;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendSpacePlayerReference             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_SetNormalizedTime) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_SetNormalizedTime");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_SetNormalizedTime) == 0x000028, "Wrong size on AnimSuiteNodeHelperLibrary_SetNormalizedTime");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTime, BlendSpacePlayer) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTime::BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTime, NormalizedTime) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTime::NormalizedTime' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTime, ReturnValue) == 0x000018, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTime::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetNormalizedTimeByDistanceMatching
// 0x0060 (0x0060 - 0x0000)
struct AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching final
{
public:
	struct FAnimUpdateContext                     UpdateContext;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBlendSpacePlayerReference             BlendSpacePlayer;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MatchingDistance;                                  // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrevNormalizedTime;                                // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PlayRateClamp;                                     // 0x0028(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DistanceCurveName;                                 // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdvanceTimeNaturally;                             // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOnlyHighestWeightedSample;                     // 0x0041(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendSpacePlayerReturnValues          ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching) == 0x000060, "Wrong size on AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching, UpdateContext) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching::UpdateContext' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching, BlendSpacePlayer) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching::BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching, MatchingDistance) == 0x000020, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching::MatchingDistance' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching, PrevNormalizedTime) == 0x000024, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching::PrevNormalizedTime' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching, PlayRateClamp) == 0x000028, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching::PlayRateClamp' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching, DistanceCurveName) == 0x000038, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching::DistanceCurveName' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching, bAdvanceTimeNaturally) == 0x000040, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching::bAdvanceTimeNaturally' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching, bUseOnlyHighestWeightedSample) == 0x000041, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching::bUseOnlyHighestWeightedSample' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching, ReturnValue) == 0x000048, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByDistanceMatching::ReturnValue' has a wrong offset!");

// Function CustomAnimNode.AnimSuiteNodeHelperLibrary.SetNormalizedTimeByPoseMatching
// 0x0048 (0x0048 - 0x0000)
struct AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching final
{
public:
	struct FAnimUpdateContext                     UpdateContext;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBlendSpacePlayerReference             BlendSpacePlayer;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SampleRate;                                        // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldMatchVelocity;                              // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOnlyHighestWeightedSample;                     // 0x0025(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldInertiallyBlend;                            // 0x0026(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InertialBlendTime;                                 // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendSpacePlayerReturnValues          ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching) == 0x000008, "Wrong alignment on AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching");
static_assert(sizeof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching) == 0x000048, "Wrong size on AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching, UpdateContext) == 0x000000, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching::UpdateContext' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching, BlendSpacePlayer) == 0x000010, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching::BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching, SampleRate) == 0x000020, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching::SampleRate' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching, bShouldMatchVelocity) == 0x000024, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching::bShouldMatchVelocity' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching, bUseOnlyHighestWeightedSample) == 0x000025, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching::bUseOnlyHighestWeightedSample' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching, bShouldInertiallyBlend) == 0x000026, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching::bShouldInertiallyBlend' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching, InertialBlendTime) == 0x000028, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching::InertialBlendTime' has a wrong offset!");
static_assert(offsetof(AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching, ReturnValue) == 0x000030, "Member 'AnimSuiteNodeHelperLibrary_SetNormalizedTimeByPoseMatching::ReturnValue' has a wrong offset!");

}

