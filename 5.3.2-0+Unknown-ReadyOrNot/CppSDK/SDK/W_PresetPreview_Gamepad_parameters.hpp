#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PresetPreview_Gamepad

#include "Basic.hpp"

#include "ReadyOrNot_structs.hpp"


namespace SDK::Params
{

// Function W_PresetPreview_Gamepad.W_PresetPreview_Gamepad_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_PresetPreview_Gamepad_C_BackPage final
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PresetPreview_Gamepad_C_BackPage) == 0x000001, "Wrong alignment on W_PresetPreview_Gamepad_C_BackPage");
static_assert(sizeof(W_PresetPreview_Gamepad_C_BackPage) == 0x000001, "Wrong size on W_PresetPreview_Gamepad_C_BackPage");
static_assert(offsetof(W_PresetPreview_Gamepad_C_BackPage, Handled) == 0x000000, "Member 'W_PresetPreview_Gamepad_C_BackPage::Handled' has a wrong offset!");

// Function W_PresetPreview_Gamepad.W_PresetPreview_Gamepad_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_PresetPreview_Gamepad_C_ChangePage final
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PresetPreview_Gamepad_C_ChangePage) == 0x000004, "Wrong alignment on W_PresetPreview_Gamepad_C_ChangePage");
static_assert(sizeof(W_PresetPreview_Gamepad_C_ChangePage) == 0x000008, "Wrong size on W_PresetPreview_Gamepad_C_ChangePage");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ChangePage, PageName) == 0x000000, "Member 'W_PresetPreview_Gamepad_C_ChangePage::PageName' has a wrong offset!");

// Function W_PresetPreview_Gamepad.W_PresetPreview_Gamepad_C.ExecuteUbergraph_W_PresetPreview_Gamepad
// 0x0360 (0x0360 - 0x0000)
struct W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_Name;                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSavedLoadout                          K2Node_CustomEvent_Loadout;                        // 0x0018(0x02E8)(ConstParm)
	class ULoadoutSlot_V2*                        CallFunc_Array_Get_Item;                           // 0x0300(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const class FString& Name, const struct FSavedLoadout& Loadout)> K2Node_CreateDelegate_OutputDelegate; // 0x0308(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Delay_1;                              // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Delay;                                // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsGamepad;                            // 0x0329(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A[0x2];                                      // 0x032A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_PageName;                             // 0x032C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotGameState*                   CallFunc_GetReadyOrNotGameState_ReturnValue;       // 0x0338(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class ULoadoutSlot_V2*>                CallFunc_WidgetGetChildrenOfClass_ChildWidgets;    // 0x0340(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotGameState*                   CallFunc_GetReadyOrNotGameState_ReturnValue_1;     // 0x0358(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad) == 0x000008, "Wrong alignment on W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad");
static_assert(sizeof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad) == 0x000360, "Wrong size on W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad, EntryPoint) == 0x000000, "Member 'W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad, K2Node_CustomEvent_Name) == 0x000008, "Member 'W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad::K2Node_CustomEvent_Name' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad, K2Node_CustomEvent_Loadout) == 0x000018, "Member 'W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad::K2Node_CustomEvent_Loadout' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad, CallFunc_Array_Get_Item) == 0x000300, "Member 'W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad, K2Node_CreateDelegate_OutputDelegate) == 0x000308, "Member 'W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad, K2Node_Event_Delay_1) == 0x000318, "Member 'W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad, K2Node_Event_Delay) == 0x000320, "Member 'W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad, K2Node_Event_Collapse) == 0x000328, "Member 'W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad, K2Node_Event_IsGamepad) == 0x000329, "Member 'W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad, K2Node_Event_PageName) == 0x00032C, "Member 'W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad, CallFunc_GetReadyOrNotGameState_ReturnValue) == 0x000338, "Member 'W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad::CallFunc_GetReadyOrNotGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad, CallFunc_WidgetGetChildrenOfClass_ChildWidgets) == 0x000340, "Member 'W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad::CallFunc_WidgetGetChildrenOfClass_ChildWidgets' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad, CallFunc_IsValid_ReturnValue) == 0x000350, "Member 'W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad, CallFunc_GetReadyOrNotGameState_ReturnValue_1) == 0x000358, "Member 'W_PresetPreview_Gamepad_C_ExecuteUbergraph_W_PresetPreview_Gamepad::CallFunc_GetReadyOrNotGameState_ReturnValue_1' has a wrong offset!");

// Function W_PresetPreview_Gamepad.W_PresetPreview_Gamepad_C.Hide
// 0x0010 (0x0010 - 0x0000)
struct W_PresetPreview_Gamepad_C_Hide final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PresetPreview_Gamepad_C_Hide) == 0x000008, "Wrong alignment on W_PresetPreview_Gamepad_C_Hide");
static_assert(sizeof(W_PresetPreview_Gamepad_C_Hide) == 0x000010, "Wrong size on W_PresetPreview_Gamepad_C_Hide");
static_assert(offsetof(W_PresetPreview_Gamepad_C_Hide, Delay) == 0x000000, "Member 'W_PresetPreview_Gamepad_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_Hide, Collapse) == 0x000008, "Member 'W_PresetPreview_Gamepad_C_Hide::Collapse' has a wrong offset!");

// Function W_PresetPreview_Gamepad.W_PresetPreview_Gamepad_C.PresetApplied
// 0x02F8 (0x02F8 - 0x0000)
struct W_PresetPreview_Gamepad_C_PresetApplied final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FSavedLoadout                          Loadout_0;                                         // 0x0010(0x02E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_PresetPreview_Gamepad_C_PresetApplied) == 0x000008, "Wrong alignment on W_PresetPreview_Gamepad_C_PresetApplied");
static_assert(sizeof(W_PresetPreview_Gamepad_C_PresetApplied) == 0x0002F8, "Wrong size on W_PresetPreview_Gamepad_C_PresetApplied");
static_assert(offsetof(W_PresetPreview_Gamepad_C_PresetApplied, Name_0) == 0x000000, "Member 'W_PresetPreview_Gamepad_C_PresetApplied::Name_0' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_PresetApplied, Loadout_0) == 0x000010, "Member 'W_PresetPreview_Gamepad_C_PresetApplied::Loadout_0' has a wrong offset!");

// Function W_PresetPreview_Gamepad.W_PresetPreview_Gamepad_C.RefreshOverviewSlots
// 0x0330 (0x0330 - 0x0000)
struct W_PresetPreview_Gamepad_C_RefreshOverviewSlots final
{
public:
	struct FSavedLoadout                          Current_Loadout;                                   // 0x0000(0x02E8)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UArmourMaterial*                        Temp_object_Variable;                              // 0x02E8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseItem*                              CallFunc_GetClassDefaultObject_ReturnValue;        // 0x02F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABaseItem*                              CallFunc_GetClassDefaultObject_ReturnValue_1;      // 0x0300(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABaseItem*                              CallFunc_GetClassDefaultObject_ReturnValue_2;      // 0x0308(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABaseItem*                              CallFunc_GetClassDefaultObject_ReturnValue_3;      // 0x0310(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABaseItem*                              CallFunc_GetClassDefaultObject_ReturnValue_4;      // 0x0318(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UArmourMaterial*                        K2Node_Select_Default;                             // 0x0328(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(W_PresetPreview_Gamepad_C_RefreshOverviewSlots) == 0x000008, "Wrong alignment on W_PresetPreview_Gamepad_C_RefreshOverviewSlots");
static_assert(sizeof(W_PresetPreview_Gamepad_C_RefreshOverviewSlots) == 0x000330, "Wrong size on W_PresetPreview_Gamepad_C_RefreshOverviewSlots");
static_assert(offsetof(W_PresetPreview_Gamepad_C_RefreshOverviewSlots, Current_Loadout) == 0x000000, "Member 'W_PresetPreview_Gamepad_C_RefreshOverviewSlots::Current_Loadout' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_RefreshOverviewSlots, Temp_object_Variable) == 0x0002E8, "Member 'W_PresetPreview_Gamepad_C_RefreshOverviewSlots::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_RefreshOverviewSlots, CallFunc_IsValid_ReturnValue) == 0x0002F0, "Member 'W_PresetPreview_Gamepad_C_RefreshOverviewSlots::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_RefreshOverviewSlots, CallFunc_GetClassDefaultObject_ReturnValue) == 0x0002F8, "Member 'W_PresetPreview_Gamepad_C_RefreshOverviewSlots::CallFunc_GetClassDefaultObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_RefreshOverviewSlots, CallFunc_GetClassDefaultObject_ReturnValue_1) == 0x000300, "Member 'W_PresetPreview_Gamepad_C_RefreshOverviewSlots::CallFunc_GetClassDefaultObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_RefreshOverviewSlots, CallFunc_GetClassDefaultObject_ReturnValue_2) == 0x000308, "Member 'W_PresetPreview_Gamepad_C_RefreshOverviewSlots::CallFunc_GetClassDefaultObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_RefreshOverviewSlots, CallFunc_GetClassDefaultObject_ReturnValue_3) == 0x000310, "Member 'W_PresetPreview_Gamepad_C_RefreshOverviewSlots::CallFunc_GetClassDefaultObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_RefreshOverviewSlots, CallFunc_GetClassDefaultObject_ReturnValue_4) == 0x000318, "Member 'W_PresetPreview_Gamepad_C_RefreshOverviewSlots::CallFunc_GetClassDefaultObject_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_RefreshOverviewSlots, Temp_bool_Variable) == 0x000320, "Member 'W_PresetPreview_Gamepad_C_RefreshOverviewSlots::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_RefreshOverviewSlots, K2Node_Select_Default) == 0x000328, "Member 'W_PresetPreview_Gamepad_C_RefreshOverviewSlots::K2Node_Select_Default' has a wrong offset!");

// Function W_PresetPreview_Gamepad.W_PresetPreview_Gamepad_C.Reveal
// 0x0008 (0x0008 - 0x0000)
struct W_PresetPreview_Gamepad_C_Reveal final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PresetPreview_Gamepad_C_Reveal) == 0x000008, "Wrong alignment on W_PresetPreview_Gamepad_C_Reveal");
static_assert(sizeof(W_PresetPreview_Gamepad_C_Reveal) == 0x000008, "Wrong size on W_PresetPreview_Gamepad_C_Reveal");
static_assert(offsetof(W_PresetPreview_Gamepad_C_Reveal, Delay) == 0x000000, "Member 'W_PresetPreview_Gamepad_C_Reveal::Delay' has a wrong offset!");

// Function W_PresetPreview_Gamepad.W_PresetPreview_Gamepad_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_PresetPreview_Gamepad_C_SetInputMode final
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PresetPreview_Gamepad_C_SetInputMode) == 0x000001, "Wrong alignment on W_PresetPreview_Gamepad_C_SetInputMode");
static_assert(sizeof(W_PresetPreview_Gamepad_C_SetInputMode) == 0x000001, "Wrong size on W_PresetPreview_Gamepad_C_SetInputMode");
static_assert(offsetof(W_PresetPreview_Gamepad_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_PresetPreview_Gamepad_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_PresetPreview_Gamepad.W_PresetPreview_Gamepad_C.Update Active Character
// 0x02E8 (0x02E8 - 0x0000)
struct W_PresetPreview_Gamepad_C_Update_Active_Character final
{
public:
	struct FSavedLoadout                          Current_Loadout;                                   // 0x0000(0x02E8)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_PresetPreview_Gamepad_C_Update_Active_Character) == 0x000008, "Wrong alignment on W_PresetPreview_Gamepad_C_Update_Active_Character");
static_assert(sizeof(W_PresetPreview_Gamepad_C_Update_Active_Character) == 0x0002E8, "Wrong size on W_PresetPreview_Gamepad_C_Update_Active_Character");
static_assert(offsetof(W_PresetPreview_Gamepad_C_Update_Active_Character, Current_Loadout) == 0x000000, "Member 'W_PresetPreview_Gamepad_C_Update_Active_Character::Current_Loadout' has a wrong offset!");

// Function W_PresetPreview_Gamepad.W_PresetPreview_Gamepad_C.UpdateStyle
// 0x0001 (0x0001 - 0x0000)
struct W_PresetPreview_Gamepad_C_UpdateStyle final
{
public:
	bool                                          bUseGamepad_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PresetPreview_Gamepad_C_UpdateStyle) == 0x000001, "Wrong alignment on W_PresetPreview_Gamepad_C_UpdateStyle");
static_assert(sizeof(W_PresetPreview_Gamepad_C_UpdateStyle) == 0x000001, "Wrong size on W_PresetPreview_Gamepad_C_UpdateStyle");
static_assert(offsetof(W_PresetPreview_Gamepad_C_UpdateStyle, bUseGamepad_0) == 0x000000, "Member 'W_PresetPreview_Gamepad_C_UpdateStyle::bUseGamepad_0' has a wrong offset!");

// Function W_PresetPreview_Gamepad.W_PresetPreview_Gamepad_C.BP_GetDesiredFocusTarget
// 0x0010 (0x0010 - 0x0000)
struct W_PresetPreview_Gamepad_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetFocusTarget_Focus;                     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PresetPreview_Gamepad_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on W_PresetPreview_Gamepad_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(W_PresetPreview_Gamepad_C_BP_GetDesiredFocusTarget) == 0x000010, "Wrong size on W_PresetPreview_Gamepad_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(W_PresetPreview_Gamepad_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'W_PresetPreview_Gamepad_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_BP_GetDesiredFocusTarget, CallFunc_GetFocusTarget_Focus) == 0x000008, "Member 'W_PresetPreview_Gamepad_C_BP_GetDesiredFocusTarget::CallFunc_GetFocusTarget_Focus' has a wrong offset!");

// Function W_PresetPreview_Gamepad.W_PresetPreview_Gamepad_C.GetFocusTarget
// 0x0038 (0x0038 - 0x0000)
struct W_PresetPreview_Gamepad_C_GetFocusTarget final
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IReadyOrNotUI_C>       K2Node_DynamicCast_AsReady_or_Not_UI;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULoadoutSlot_V2*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetFocusTarget_Focus;                     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PresetPreview_Gamepad_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_PresetPreview_Gamepad_C_GetFocusTarget");
static_assert(sizeof(W_PresetPreview_Gamepad_C_GetFocusTarget) == 0x000038, "Wrong size on W_PresetPreview_Gamepad_C_GetFocusTarget");
static_assert(offsetof(W_PresetPreview_Gamepad_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_PresetPreview_Gamepad_C_GetFocusTarget::Focus' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_GetFocusTarget, K2Node_DynamicCast_AsReady_or_Not_UI) == 0x000008, "Member 'W_PresetPreview_Gamepad_C_GetFocusTarget::K2Node_DynamicCast_AsReady_or_Not_UI' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_GetFocusTarget, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'W_PresetPreview_Gamepad_C_GetFocusTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_GetFocusTarget, CallFunc_Array_Get_Item) == 0x000020, "Member 'W_PresetPreview_Gamepad_C_GetFocusTarget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_GetFocusTarget, CallFunc_GetFocusTarget_Focus) == 0x000028, "Member 'W_PresetPreview_Gamepad_C_GetFocusTarget::CallFunc_GetFocusTarget_Focus' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_GetFocusTarget, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'W_PresetPreview_Gamepad_C_GetFocusTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PresetPreview_Gamepad_C_GetFocusTarget, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'W_PresetPreview_Gamepad_C_GetFocusTarget::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

}

