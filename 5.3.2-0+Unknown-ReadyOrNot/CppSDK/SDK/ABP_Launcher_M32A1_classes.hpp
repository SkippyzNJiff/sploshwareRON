#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Launcher_M32A1

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Launcher_M32A1.ABP_Launcher_M32A1_C
// 0x12B0 (0x1620 - 0x0370)
class UABP_Launcher_M32A1_C final : public URoNWeaponAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0378(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0380(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0388(0x0020)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x03A8(0x0048)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x03F0(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_14;                       // 0x0410(0x0128)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0538(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0558(0x0048)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_13;                       // 0x05A0(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_12;                       // 0x06C8(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_11;                       // 0x07F0(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_10;                       // 0x0918(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_9;                        // 0x0A40(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_8;                        // 0x0B68(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_7;                        // 0x0C90(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_6;                        // 0x0DB8(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_5;                        // 0x0EE0(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_4;                        // 0x1008(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x1130(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x1258(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x1380(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x14A8(0x0128)()
	double                                        RotationCounterSmoothed;                           // 0x15D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RotationCounter;                                   // 0x15D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPerformCylinderReset;                             // 0x15E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideSpeedLoader;                                  // 0x15E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideShell01Used;                                  // 0x15E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideShell02Used;                                  // 0x15E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideShell03Used;                                  // 0x15E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideShell04Used;                                  // 0x15E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideShell05Used;                                  // 0x15E6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideShell06Used;                                  // 0x15E7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShellCounter;                                      // 0x15E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideShell01;                                      // 0x15EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideShell02;                                      // 0x15ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideShell03;                                      // 0x15EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideShell04;                                      // 0x15EF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideShell05;                                      // 0x15F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideShell06;                                      // 0x15F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15F2[0x6];                                     // 0x15F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseMagazineWeapon*                    As_Base_Magazine_Weapon;                           // 0x15F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ShellFlashSpawnClass;                              // 0x1600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ShellSmokeSpawnClass;                              // 0x1608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSmokeShell;                                     // 0x1610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void AnimNotify_HideShells();
	void AnimNotify_HideSpeedLoader();
	void AnimNotify_ResetCylinder();
	void AnimNotify_RotateCylinder();
	void AnimNotify_ShowShells();
	void AnimNotify_ShowSpeedLoader();
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Launcher_M32A1_AnimGraphNode_ModifyBone_35821CF043ECADCE015ABAA931B74AE3();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Launcher_M32A1_AnimGraphNode_ModifyBone_BF147BE247C77A91A0739BA2CAA1870C();
	void ExecuteUbergraph_ABP_Launcher_M32A1(int32 EntryPoint);
	void HideAllShells();
	void HideAndSpawnShellsEvent();
	void ResetShellStatus();
	void ShowShellsEvent();
	void SpawnStaticShellWorld(class FName BoneName, bool bIsEmptyShell, bool bIsSmokeShell_0);
	void UpdateShellStatus(int32 ShellIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Launcher_M32A1_C">();
	}
	static class UABP_Launcher_M32A1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Launcher_M32A1_C>();
	}
};
static_assert(alignof(UABP_Launcher_M32A1_C) == 0x000010, "Wrong alignment on UABP_Launcher_M32A1_C");
static_assert(sizeof(UABP_Launcher_M32A1_C) == 0x001620, "Wrong size on UABP_Launcher_M32A1_C");
static_assert(offsetof(UABP_Launcher_M32A1_C, UberGraphFrame) == 0x000370, "Member 'UABP_Launcher_M32A1_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimBlueprintExtension_PropertyAccess) == 0x000378, "Member 'UABP_Launcher_M32A1_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimBlueprintExtension_Base) == 0x000380, "Member 'UABP_Launcher_M32A1_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_Root) == 0x000388, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_Slot) == 0x0003A8, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_LocalToComponentSpace) == 0x0003F0, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone_14) == 0x000410, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone_14' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ComponentToLocalSpace) == 0x000538, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_SequencePlayer) == 0x000558, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone_13) == 0x0005A0, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone_13' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone_12) == 0x0006C8, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone_12' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone_11) == 0x0007F0, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone_11' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone_10) == 0x000918, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone_10' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone_9) == 0x000A40, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone_9' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone_8) == 0x000B68, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone_8' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone_7) == 0x000C90, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone_7' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone_6) == 0x000DB8, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone_6' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone_5) == 0x000EE0, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone_5' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone_4) == 0x001008, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone_4' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone_3) == 0x001130, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone_2) == 0x001258, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone_1) == 0x001380, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, AnimGraphNode_ModifyBone) == 0x0014A8, "Member 'UABP_Launcher_M32A1_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, RotationCounterSmoothed) == 0x0015D0, "Member 'UABP_Launcher_M32A1_C::RotationCounterSmoothed' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, RotationCounter) == 0x0015D8, "Member 'UABP_Launcher_M32A1_C::RotationCounter' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bPerformCylinderReset) == 0x0015E0, "Member 'UABP_Launcher_M32A1_C::bPerformCylinderReset' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bHideSpeedLoader) == 0x0015E1, "Member 'UABP_Launcher_M32A1_C::bHideSpeedLoader' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bHideShell01Used) == 0x0015E2, "Member 'UABP_Launcher_M32A1_C::bHideShell01Used' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bHideShell02Used) == 0x0015E3, "Member 'UABP_Launcher_M32A1_C::bHideShell02Used' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bHideShell03Used) == 0x0015E4, "Member 'UABP_Launcher_M32A1_C::bHideShell03Used' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bHideShell04Used) == 0x0015E5, "Member 'UABP_Launcher_M32A1_C::bHideShell04Used' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bHideShell05Used) == 0x0015E6, "Member 'UABP_Launcher_M32A1_C::bHideShell05Used' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bHideShell06Used) == 0x0015E7, "Member 'UABP_Launcher_M32A1_C::bHideShell06Used' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, ShellCounter) == 0x0015E8, "Member 'UABP_Launcher_M32A1_C::ShellCounter' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bHideShell01) == 0x0015EC, "Member 'UABP_Launcher_M32A1_C::bHideShell01' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bHideShell02) == 0x0015ED, "Member 'UABP_Launcher_M32A1_C::bHideShell02' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bHideShell03) == 0x0015EE, "Member 'UABP_Launcher_M32A1_C::bHideShell03' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bHideShell04) == 0x0015EF, "Member 'UABP_Launcher_M32A1_C::bHideShell04' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bHideShell05) == 0x0015F0, "Member 'UABP_Launcher_M32A1_C::bHideShell05' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bHideShell06) == 0x0015F1, "Member 'UABP_Launcher_M32A1_C::bHideShell06' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, As_Base_Magazine_Weapon) == 0x0015F8, "Member 'UABP_Launcher_M32A1_C::As_Base_Magazine_Weapon' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, ShellFlashSpawnClass) == 0x001600, "Member 'UABP_Launcher_M32A1_C::ShellFlashSpawnClass' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, ShellSmokeSpawnClass) == 0x001608, "Member 'UABP_Launcher_M32A1_C::ShellSmokeSpawnClass' has a wrong offset!");
static_assert(offsetof(UABP_Launcher_M32A1_C, bIsSmokeShell) == 0x001610, "Member 'UABP_Launcher_M32A1_C::bIsSmokeShell' has a wrong offset!");

}

