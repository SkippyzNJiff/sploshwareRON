#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RosterSelection_MiniCard

#include "Basic.hpp"

#include "CommonInput_structs.hpp"
#include "UMG_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.ExecuteUbergraph_W_RosterSelection_MiniCard
// 0x02F0 (0x02F0 - 0x0000)
struct W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue_1;    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue_1;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue_2;    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue_3;    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue_2;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue_3;        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue_4;    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue_4;        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_4;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class URosterCharacter*                       K2Node_CustomEvent_Character;                      // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0060(0x0018)()
	ERosterCharacterState                         Temp_byte_Variable;                                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_Text;                           // 0x0080(0x0018)()
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0098(0x0014)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x00B0(0x00D0)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush_1;                    // 0x0180(0x00D0)()
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0252(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0253(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0258(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FFocusEvent                            K2Node_Event_InFocusEvent_1;                       // 0x0268(0x0008)(NoDestructor)
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x0270(0x0008)(NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0279(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27A[0x2];                                      // 0x027A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x027C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHovered_ReturnValue;                    // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPressed_ReturnValue;                    // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPressed_ReturnValue_1;                  // 0x02BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotPlayerController*            CallFunc_GetReadyOrNotPlayerController_ReturnValue; // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ERosterCharacterState                         Temp_byte_Variable_5;                              // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WidgetOrChildHasFocus_HasFocus;           // 0x02C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x02CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x02CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_B_ImplicitCast;      // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast;    // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard) == 0x000010, "Wrong alignment on W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard");
static_assert(sizeof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard) == 0x0002F0, "Wrong size on W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, EntryPoint) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000008, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_GetLocalPlayerSubsystem_ReturnValue_1) == 0x000010, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_GetLocalPlayerSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_GetCurrentInputType_ReturnValue) == 0x000018, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_GetCurrentInputType_ReturnValue_1) == 0x000019, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_GetCurrentInputType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_SwitchEnum_CmpSuccess) == 0x00001A, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_SwitchEnum_CmpSuccess_1) == 0x00001B, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_GetLocalPlayerSubsystem_ReturnValue_2) == 0x000020, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_GetLocalPlayerSubsystem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_GetLocalPlayerSubsystem_ReturnValue_3) == 0x000028, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_GetLocalPlayerSubsystem_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_GetCurrentInputType_ReturnValue_2) == 0x000030, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_GetCurrentInputType_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_GetCurrentInputType_ReturnValue_3) == 0x000031, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_GetCurrentInputType_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_SwitchEnum_CmpSuccess_2) == 0x000032, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_SwitchEnum_CmpSuccess_3) == 0x000033, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_GetLocalPlayerSubsystem_ReturnValue_4) == 0x000038, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_GetLocalPlayerSubsystem_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_GetCurrentInputType_ReturnValue_4) == 0x000040, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_GetCurrentInputType_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_SwitchEnum_CmpSuccess_4) == 0x000041, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_SwitchEnum_CmpSuccess_4' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, Temp_object_Variable) == 0x000048, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_CustomEvent_Character) == 0x000050, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_CustomEvent_Character' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_CustomEvent_Loaded) == 0x000058, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_Conv_StringToText_ReturnValue) == 0x000060, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, Temp_byte_Variable) == 0x000078, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, Temp_byte_Variable_1) == 0x000079, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_CustomEvent_Text) == 0x000080, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_CustomEvent_Text' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_Select_Default) == 0x000098, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_IsValid_ReturnValue) == 0x0000AC, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000AD, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_MakeStruct_SlateBrush) == 0x0000B0, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_MakeStruct_SlateBrush_1) == 0x000180, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_MakeStruct_SlateBrush_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000250, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_Not_PreBool_ReturnValue) == 0x000251, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_Event_IsDesignTime) == 0x000252, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_IsValid_ReturnValue_1) == 0x000253, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, Temp_byte_Variable_2) == 0x000254, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_CreateDelegate_OutputDelegate) == 0x000258, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_Event_InFocusEvent_1) == 0x000268, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_Event_InFocusEvent_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_Event_InFocusEvent) == 0x000270, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, Temp_byte_Variable_3) == 0x000278, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, Temp_byte_Variable_4) == 0x000279, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_Event_MyGeometry) == 0x00027C, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_Event_InDeltaTime) == 0x0002B4, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_IsHovered_ReturnValue) == 0x0002B8, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_IsHovered_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_IsPressed_ReturnValue) == 0x0002B9, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_IsPressed_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_IsPressed_ReturnValue_1) == 0x0002BA, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_IsPressed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_BooleanAND_ReturnValue) == 0x0002BB, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_GetReadyOrNotPlayerController_ReturnValue) == 0x0002C0, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_GetReadyOrNotPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, Temp_byte_Variable_5) == 0x0002C8, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_WidgetOrChildHasFocus_HasFocus) == 0x0002C9, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_WidgetOrChildHasFocus_HasFocus' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_BooleanAND_ReturnValue_1) == 0x0002CA, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_Select_Default_1) == 0x0002CB, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_Greater_DoubleDouble_B_ImplicitCast) == 0x0002D0, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_Greater_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0002D8, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast) == 0x0002E0, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x0002E8, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.OnAddedToFocusPath
// 0x0008 (0x0008 - 0x0000)
struct W_RosterSelection_MiniCard_C_OnAddedToFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_OnAddedToFocusPath) == 0x000004, "Wrong alignment on W_RosterSelection_MiniCard_C_OnAddedToFocusPath");
static_assert(sizeof(W_RosterSelection_MiniCard_C_OnAddedToFocusPath) == 0x000008, "Wrong size on W_RosterSelection_MiniCard_C_OnAddedToFocusPath");
static_assert(offsetof(W_RosterSelection_MiniCard_C_OnAddedToFocusPath, InFocusEvent) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_OnAddedToFocusPath::InFocusEvent' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8
// 0x0008 (0x0008 - 0x0000)
struct W_RosterSelection_MiniCard_C_OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8");
static_assert(sizeof(W_RosterSelection_MiniCard_C_OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8) == 0x000008, "Wrong size on W_RosterSelection_MiniCard_C_OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8");
static_assert(offsetof(W_RosterSelection_MiniCard_C_OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8, Loaded) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8::Loaded' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.OnRemovedFromFocusPath
// 0x0008 (0x0008 - 0x0000)
struct W_RosterSelection_MiniCard_C_OnRemovedFromFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_OnRemovedFromFocusPath) == 0x000004, "Wrong alignment on W_RosterSelection_MiniCard_C_OnRemovedFromFocusPath");
static_assert(sizeof(W_RosterSelection_MiniCard_C_OnRemovedFromFocusPath) == 0x000008, "Wrong size on W_RosterSelection_MiniCard_C_OnRemovedFromFocusPath");
static_assert(offsetof(W_RosterSelection_MiniCard_C_OnRemovedFromFocusPath, InFocusEvent) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_OnRemovedFromFocusPath::InFocusEvent' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_RosterSelection_MiniCard_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_PreConstruct) == 0x000001, "Wrong alignment on W_RosterSelection_MiniCard_C_PreConstruct");
static_assert(sizeof(W_RosterSelection_MiniCard_C_PreConstruct) == 0x000001, "Wrong size on W_RosterSelection_MiniCard_C_PreConstruct");
static_assert(offsetof(W_RosterSelection_MiniCard_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetCharacter
// 0x0008 (0x0008 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetCharacter final
{
public:
	class URosterCharacter*                       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetCharacter) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_SetCharacter");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetCharacter) == 0x000008, "Wrong size on W_RosterSelection_MiniCard_C_SetCharacter");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetCharacter, Character) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetCharacter::Character' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetCustomStateText
// 0x0018 (0x0018 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetCustomStateText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetCustomStateText) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_SetCustomStateText");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetCustomStateText) == 0x000018, "Wrong size on W_RosterSelection_MiniCard_C_SetCustomStateText");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetCustomStateText, Text) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetCustomStateText::Text' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetEmpty
// 0x0018 (0x0018 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetEmpty final
{
public:
	bool                                          Empty_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderOpacity_InOpacity_ImplicitCast;  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetEmpty) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_SetEmpty");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetEmpty) == 0x000018, "Wrong size on W_RosterSelection_MiniCard_C_SetEmpty");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, Empty_0) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::Empty_0' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, Temp_bool_Variable) == 0x000001, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, Temp_byte_Variable) == 0x000002, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, Temp_byte_Variable_1) == 0x000003, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, Temp_bool_Variable_1) == 0x000004, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, Temp_byte_Variable_2) == 0x000005, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, Temp_byte_Variable_3) == 0x000006, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, K2Node_Select_Default) == 0x000012, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, K2Node_Select_Default_1) == 0x000013, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, CallFunc_SetRenderOpacity_InOpacity_ImplicitCast) == 0x000014, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::CallFunc_SetRenderOpacity_InOpacity_ImplicitCast' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetHoverState
// 0x0001 (0x0001 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetHoverState final
{
public:
	bool                                          Hovered;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetHoverState) == 0x000001, "Wrong alignment on W_RosterSelection_MiniCard_C_SetHoverState");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetHoverState) == 0x000001, "Wrong size on W_RosterSelection_MiniCard_C_SetHoverState");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetHoverState, Hovered) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetHoverState::Hovered' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetLocked
// 0x0038 (0x0038 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetLocked final
{
public:
	bool                                          Locked_0;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnlockText;                                        // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetRenderOpacity_InOpacity_ImplicitCast;  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetLocked) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_SetLocked");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetLocked) == 0x000038, "Wrong size on W_RosterSelection_MiniCard_C_SetLocked");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, Locked_0) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetLocked::Locked_0' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, UnlockText) == 0x000008, "Member 'W_RosterSelection_MiniCard_C_SetLocked::UnlockText' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, Temp_bool_Variable) == 0x000020, "Member 'W_RosterSelection_MiniCard_C_SetLocked::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, Temp_byte_Variable) == 0x000021, "Member 'W_RosterSelection_MiniCard_C_SetLocked::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, Temp_byte_Variable_1) == 0x000022, "Member 'W_RosterSelection_MiniCard_C_SetLocked::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, CallFunc_SelectFloat_ReturnValue) == 0x000028, "Member 'W_RosterSelection_MiniCard_C_SetLocked::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'W_RosterSelection_MiniCard_C_SetLocked::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, K2Node_Select_Default) == 0x000031, "Member 'W_RosterSelection_MiniCard_C_SetLocked::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, CallFunc_SetRenderOpacity_InOpacity_ImplicitCast) == 0x000034, "Member 'W_RosterSelection_MiniCard_C_SetLocked::CallFunc_SetRenderOpacity_InOpacity_ImplicitCast' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetPosition
// 0x0148 (0x0148 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetPosition final
{
public:
	ERosterSquadPosition                          Position_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterSquadPosition                          Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterSquadPosition                          Temp_byte_Variable_1;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_5;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_6;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_7;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_8;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_9;                              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterSquadPosition                          Temp_byte_Variable_2;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_3;                              // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_4;                              // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_5;                              // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_6;                              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_7;                              // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterSquadPosition                          Temp_byte_Variable_8;                              // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67[0x1];                                       // 0x0067(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0068(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0080(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0098(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x00B0(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x00C8(0x0018)()
	double                                        K2Node_Select_Default;                             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          K2Node_Select_Default_2;                           // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_3;                           // 0x0118(0x0018)()
	struct FLinearColor                           CallFunc_SquadPositionToColor_OutColor;            // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0140(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetPosition) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_SetPosition");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetPosition) == 0x000148, "Wrong size on W_RosterSelection_MiniCard_C_SetPosition");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Position_0) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Position_0' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable) == 0x000001, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'W_RosterSelection_MiniCard_C_SetPosition::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_real_Variable) == 0x000008, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_real_Variable_1) == 0x000010, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_real_Variable_2) == 0x000018, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_real_Variable_3) == 0x000020, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_real_Variable_4) == 0x000028, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_1) == 0x000030, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_real_Variable_5) == 0x000038, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_real_Variable_6) == 0x000040, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_real_Variable_6' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_real_Variable_7) == 0x000048, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_real_Variable_7' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_real_Variable_8) == 0x000050, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_real_Variable_8' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_real_Variable_9) == 0x000058, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_real_Variable_9' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_2) == 0x000060, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_3) == 0x000061, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_4) == 0x000062, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_5) == 0x000063, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_6) == 0x000064, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_7) == 0x000065, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_8) == 0x000066, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_text_Variable) == 0x000068, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_text_Variable_1) == 0x000080, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_text_Variable_2) == 0x000098, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_text_Variable_3) == 0x0000B0, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_text_Variable_4) == 0x0000C8, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, K2Node_Select_Default) == 0x0000E0, "Member 'W_RosterSelection_MiniCard_C_SetPosition::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, K2Node_Select_Default_1) == 0x0000E8, "Member 'W_RosterSelection_MiniCard_C_SetPosition::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, CallFunc_MakeVector2D_ReturnValue) == 0x0000F0, "Member 'W_RosterSelection_MiniCard_C_SetPosition::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, CallFunc_MakeVector2D_ReturnValue_1) == 0x000100, "Member 'W_RosterSelection_MiniCard_C_SetPosition::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, K2Node_Select_Default_2) == 0x000110, "Member 'W_RosterSelection_MiniCard_C_SetPosition::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, K2Node_Select_Default_3) == 0x000118, "Member 'W_RosterSelection_MiniCard_C_SetPosition::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, CallFunc_SquadPositionToColor_OutColor) == 0x000130, "Member 'W_RosterSelection_MiniCard_C_SetPosition::CallFunc_SquadPositionToColor_OutColor' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000140, "Member 'W_RosterSelection_MiniCard_C_SetPosition::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetSelected final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetSelected) == 0x000001, "Wrong alignment on W_RosterSelection_MiniCard_C_SetSelected");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetSelected) == 0x000001, "Wrong size on W_RosterSelection_MiniCard_C_SetSelected");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetSelected, Selected) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetSelected::Selected' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetupStateText
// 0x00D8 (0x00D8 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetupStateText final
{
public:
	class URosterCharacter*                       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0018(0x0018)()
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_StressPercentageAsStatus_StatusText;      // 0x0038(0x0018)()
	struct FSlateColor                            CallFunc_StressPercentageAsStatus_StatusColor;     // 0x0050(0x0014)()
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterCharacterState                         Temp_byte_Variable_3;                              // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67[0x1];                                       // 0x0067(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0068(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0080(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0098(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x00B0(0x0018)()
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterCharacterState                         Temp_byte_Variable_5;                              // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetupStateText) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_SetupStateText");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetupStateText) == 0x0000D8, "Wrong size on W_RosterSelection_MiniCard_C_SetupStateText");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Character) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Character' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_byte_Variable) == 0x000008, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000010, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, CallFunc_Conv_IntToText_ReturnValue) == 0x000018, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000030, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, CallFunc_StressPercentageAsStatus_StatusText) == 0x000038, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::CallFunc_StressPercentageAsStatus_StatusText' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, CallFunc_StressPercentageAsStatus_StatusColor) == 0x000050, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::CallFunc_StressPercentageAsStatus_StatusColor' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_byte_Variable_1) == 0x000064, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_byte_Variable_2) == 0x000065, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_byte_Variable_3) == 0x000066, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_text_Variable) == 0x000068, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_text_Variable_1) == 0x000080, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_text_Variable_2) == 0x000098, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, K2Node_Select_Default) == 0x0000B0, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0000C8, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_byte_Variable_4) == 0x0000D0, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_byte_Variable_5) == 0x0000D1, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, K2Node_Select_Default_1) == 0x0000D2, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x0000D4, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetVisualState
// 0x0002 (0x0002 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetVisualState final
{
public:
	bool                                          Hovered;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetVisualState) == 0x000001, "Wrong alignment on W_RosterSelection_MiniCard_C_SetVisualState");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetVisualState) == 0x000002, "Wrong size on W_RosterSelection_MiniCard_C_SetVisualState");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetVisualState, Hovered) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetVisualState::Hovered' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetVisualState, Pressed) == 0x000001, "Member 'W_RosterSelection_MiniCard_C_SetVisualState::Pressed' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_RosterSelection_MiniCard_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_Tick) == 0x000004, "Wrong alignment on W_RosterSelection_MiniCard_C_Tick");
static_assert(sizeof(W_RosterSelection_MiniCard_C_Tick) == 0x00003C, "Wrong size on W_RosterSelection_MiniCard_C_Tick");
static_assert(offsetof(W_RosterSelection_MiniCard_C_Tick, MyGeometry) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_Tick, InDeltaTime) == 0x000038, "Member 'W_RosterSelection_MiniCard_C_Tick::InDeltaTime' has a wrong offset!");

}

