#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_Tablet_EntryPoint_Selection

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_PreMission_Tablet_EntryPoint_Selection.W_PreMission_Tablet_EntryPoint_Selection_C
// 0x0100 (0x03C0 - 0x02C0)
class UW_PreMission_Tablet_EntryPoint_Selection_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       animReveal;                                        // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       animShowInfo;                                      // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UW_Text_C*                              lbl_Selected;                                      // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_EntryPoint;                                    // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_FloorLocation;                                 // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        InfoFadeDelay;                                     // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InfoVisible;                                       // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEntryPoint                            PointData;                                         // 0x0300(0x00A8)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 CurrentMissionURL;                                 // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UW_PreMission_PlanningMap_C*            W_Pre_Mission_Planning_Map;                        // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void BackPage(bool* Handled);
	void ChangePage(class FName PageName);
	void Construct();
	void ExecuteUbergraph_W_PreMission_Tablet_EntryPoint_Selection(int32 EntryPoint);
	void Hide(double Delay, bool Collapse);
	void HidePointInfo();
	void Reveal(double Delay);
	void SetInputMode(bool IsGamepad);
	void ShowPointInfo(double Delay);
	void UpdatePointInfo(const struct FEntryPoint& EntryPointData);

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_PreMission_Tablet_EntryPoint_Selection_C">();
	}
	static class UW_PreMission_Tablet_EntryPoint_Selection_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_PreMission_Tablet_EntryPoint_Selection_C>();
	}
};
static_assert(alignof(UW_PreMission_Tablet_EntryPoint_Selection_C) == 0x000008, "Wrong alignment on UW_PreMission_Tablet_EntryPoint_Selection_C");
static_assert(sizeof(UW_PreMission_Tablet_EntryPoint_Selection_C) == 0x0003C0, "Wrong size on UW_PreMission_Tablet_EntryPoint_Selection_C");
static_assert(offsetof(UW_PreMission_Tablet_EntryPoint_Selection_C, UberGraphFrame) == 0x0002C0, "Member 'UW_PreMission_Tablet_EntryPoint_Selection_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_EntryPoint_Selection_C, animReveal) == 0x0002C8, "Member 'UW_PreMission_Tablet_EntryPoint_Selection_C::animReveal' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_EntryPoint_Selection_C, animShowInfo) == 0x0002D0, "Member 'UW_PreMission_Tablet_EntryPoint_Selection_C::animShowInfo' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_EntryPoint_Selection_C, lbl_Selected) == 0x0002D8, "Member 'UW_PreMission_Tablet_EntryPoint_Selection_C::lbl_Selected' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_EntryPoint_Selection_C, txt_EntryPoint) == 0x0002E0, "Member 'UW_PreMission_Tablet_EntryPoint_Selection_C::txt_EntryPoint' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_EntryPoint_Selection_C, txt_FloorLocation) == 0x0002E8, "Member 'UW_PreMission_Tablet_EntryPoint_Selection_C::txt_FloorLocation' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_EntryPoint_Selection_C, InfoFadeDelay) == 0x0002F0, "Member 'UW_PreMission_Tablet_EntryPoint_Selection_C::InfoFadeDelay' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_EntryPoint_Selection_C, InfoVisible) == 0x0002F8, "Member 'UW_PreMission_Tablet_EntryPoint_Selection_C::InfoVisible' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_EntryPoint_Selection_C, PointData) == 0x000300, "Member 'UW_PreMission_Tablet_EntryPoint_Selection_C::PointData' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_EntryPoint_Selection_C, CurrentMissionURL) == 0x0003A8, "Member 'UW_PreMission_Tablet_EntryPoint_Selection_C::CurrentMissionURL' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_EntryPoint_Selection_C, W_Pre_Mission_Planning_Map) == 0x0003B8, "Member 'UW_PreMission_Tablet_EntryPoint_Selection_C::W_Pre_Mission_Planning_Map' has a wrong offset!");

}

