#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Button

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "E_Style_Buttons_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Button.W_Button_C
// 0x0550 (0x1B30 - 0x15E0)
class UW_Button_C final : public UCommonButtonImplementation
{
public:
	uint8                                         Pad_15D8[0x8];                                     // 0x15D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x15E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetSwitcher*                        ContentSwitcher;                                   // 0x15E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             CustomContents;                                    // 0x15F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_ButtonLabel;                                   // 0x15F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   ButtonLabelText;                                   // 0x1600(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	E_Style_Buttons                               SelectButtonStyle;                                 // 0x1618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1619[0x7];                                     // 0x1619(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             StyleGuide;                                        // 0x1620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bHovered;                                          // 0x1628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1629[0x7];                                     // 0x1629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UW_Button_C* Button)> Clicked;                               // 0x1630(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_Button_C* Button)> Hovered;                               // 0x1640(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Unhovered;                                         // 0x1650(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Pressed;                                           // 0x1660(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_Button_C* Button)> DoubleClicked;                         // 0x1670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         FontSizeOverride;                                  // 0x1680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1684[0x4];                                     // 0x1684(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             DescriptionWidget;                                 // 0x1688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceUppercaseDescription;                         // 0x1690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1691[0x7];                                     // 0x1691(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DescriptionText;                                   // 0x1698(0x0018)(Edit, BlueprintVisible)
	bool                                          StartActive;                                       // 0x16B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartActiveDisabled;                               // 0x16B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16B2[0x2];                                     // 0x16B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharacterLimit;                                    // 0x16B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_16B8[0x8];                                     // 0x16B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockStyle                        Widget_Style;                                      // 0x16C0(0x0340)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateBrush                            HoveredButtonStyle;                                // 0x1A00(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              Released;                                          // 0x1AD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_Button_C* Button)> Selected;                              // 0x1AE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_Button_C* Button)> Deselected;                            // 0x1AF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EHorizontalAlignment                          ContentHorizontalAlignment;                        // 0x1B00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            ContentVerticalAlignment;                          // 0x1B01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B02[0x6];                                     // 0x1B02(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UW_Button_C* Button)> OnRightMousePressed;                   // 0x1B08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnRightMouseReleased;                              // 0x1B18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void BP_OnClicked();
	void BP_OnDeselected();
	void BP_OnDoubleClicked();
	void BP_OnHovered();
	void BP_OnSelected();
	void BP_OnUnhovered();
	void Deselect();
	void DisableInteraction(bool Disable);
	void Enable(bool Enable_0);
	void EventOnPressed(class UCommonButtonBase* Button);
	void EventOnReleased(class UCommonButtonBase* Button);
	void ExecuteUbergraph_W_Button(int32 EntryPoint);
	void ForceClick();
	void ForceDoubleClick();
	void IgnoreInteraction(bool Ignore);
	void InitContent();
	void Initialize();
	void OnActionComplete();
	void OnActionProgress(float HeldPercent);
	void OnCurrentTextStyleChanged();
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnPressed();
	void PassthroughInteraction(bool PassThrough);
	void PreConstruct(bool IsDesignTime);
	void RightMousePressed();
	void RightMouseReleased();
	void Select();
	void SetBackgroundTint(const struct FLinearColor& InBackgroundColor);
	void SetButtonText(const class FText& Text);
	void TruncateText(bool Truncate, int32 CharacterLimit_0, const class FString& TruncationCharacters);

	class UCommonTextBlock* BP_GetButtonLabel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Button_C">();
	}
	static class UW_Button_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Button_C>();
	}
};
static_assert(alignof(UW_Button_C) == 0x000010, "Wrong alignment on UW_Button_C");
static_assert(sizeof(UW_Button_C) == 0x001B30, "Wrong size on UW_Button_C");
static_assert(offsetof(UW_Button_C, UberGraphFrame) == 0x0015E0, "Member 'UW_Button_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Button_C, ContentSwitcher) == 0x0015E8, "Member 'UW_Button_C::ContentSwitcher' has a wrong offset!");
static_assert(offsetof(UW_Button_C, CustomContents) == 0x0015F0, "Member 'UW_Button_C::CustomContents' has a wrong offset!");
static_assert(offsetof(UW_Button_C, txt_ButtonLabel) == 0x0015F8, "Member 'UW_Button_C::txt_ButtonLabel' has a wrong offset!");
static_assert(offsetof(UW_Button_C, ButtonLabelText) == 0x001600, "Member 'UW_Button_C::ButtonLabelText' has a wrong offset!");
static_assert(offsetof(UW_Button_C, SelectButtonStyle) == 0x001618, "Member 'UW_Button_C::SelectButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_Button_C, StyleGuide) == 0x001620, "Member 'UW_Button_C::StyleGuide' has a wrong offset!");
static_assert(offsetof(UW_Button_C, bHovered) == 0x001628, "Member 'UW_Button_C::bHovered' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Clicked) == 0x001630, "Member 'UW_Button_C::Clicked' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Hovered) == 0x001640, "Member 'UW_Button_C::Hovered' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Unhovered) == 0x001650, "Member 'UW_Button_C::Unhovered' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Pressed) == 0x001660, "Member 'UW_Button_C::Pressed' has a wrong offset!");
static_assert(offsetof(UW_Button_C, DoubleClicked) == 0x001670, "Member 'UW_Button_C::DoubleClicked' has a wrong offset!");
static_assert(offsetof(UW_Button_C, FontSizeOverride) == 0x001680, "Member 'UW_Button_C::FontSizeOverride' has a wrong offset!");
static_assert(offsetof(UW_Button_C, DescriptionWidget) == 0x001688, "Member 'UW_Button_C::DescriptionWidget' has a wrong offset!");
static_assert(offsetof(UW_Button_C, ForceUppercaseDescription) == 0x001690, "Member 'UW_Button_C::ForceUppercaseDescription' has a wrong offset!");
static_assert(offsetof(UW_Button_C, DescriptionText) == 0x001698, "Member 'UW_Button_C::DescriptionText' has a wrong offset!");
static_assert(offsetof(UW_Button_C, StartActive) == 0x0016B0, "Member 'UW_Button_C::StartActive' has a wrong offset!");
static_assert(offsetof(UW_Button_C, StartActiveDisabled) == 0x0016B1, "Member 'UW_Button_C::StartActiveDisabled' has a wrong offset!");
static_assert(offsetof(UW_Button_C, CharacterLimit) == 0x0016B4, "Member 'UW_Button_C::CharacterLimit' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Widget_Style) == 0x0016C0, "Member 'UW_Button_C::Widget_Style' has a wrong offset!");
static_assert(offsetof(UW_Button_C, HoveredButtonStyle) == 0x001A00, "Member 'UW_Button_C::HoveredButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Released) == 0x001AD0, "Member 'UW_Button_C::Released' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Selected) == 0x001AE0, "Member 'UW_Button_C::Selected' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Deselected) == 0x001AF0, "Member 'UW_Button_C::Deselected' has a wrong offset!");
static_assert(offsetof(UW_Button_C, ContentHorizontalAlignment) == 0x001B00, "Member 'UW_Button_C::ContentHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UW_Button_C, ContentVerticalAlignment) == 0x001B01, "Member 'UW_Button_C::ContentVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UW_Button_C, OnRightMousePressed) == 0x001B08, "Member 'UW_Button_C::OnRightMousePressed' has a wrong offset!");
static_assert(offsetof(UW_Button_C, OnRightMouseReleased) == 0x001B18, "Member 'UW_Button_C::OnRightMouseReleased' has a wrong offset!");

}

