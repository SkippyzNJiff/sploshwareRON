#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ArmorOverviewSlot

#include "Basic.hpp"

#include "CommonInput_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK::Params
{

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.AdjustFontSize
// 0x00D0 (0x00D0 - 0x0000)
struct W_ArmorOverviewSlot_C_AdjustFontSize final
{
public:
	class UTextBlock*                             TextWidget;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         FontSize;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x0010(0x0058)(Parm, OutParm, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0070(0x0058)(HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Size_ImplicitCast;               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_AdjustFontSize) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_AdjustFontSize");
static_assert(sizeof(W_ArmorOverviewSlot_C_AdjustFontSize) == 0x0000D0, "Wrong size on W_ArmorOverviewSlot_C_AdjustFontSize");
static_assert(offsetof(W_ArmorOverviewSlot_C_AdjustFontSize, TextWidget) == 0x000000, "Member 'W_ArmorOverviewSlot_C_AdjustFontSize::TextWidget' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_AdjustFontSize, FontSize) == 0x000008, "Member 'W_ArmorOverviewSlot_C_AdjustFontSize::FontSize' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_AdjustFontSize, Font) == 0x000010, "Member 'W_ArmorOverviewSlot_C_AdjustFontSize::Font' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_AdjustFontSize, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000068, "Member 'W_ArmorOverviewSlot_C_AdjustFontSize::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_AdjustFontSize, K2Node_MakeStruct_SlateFontInfo) == 0x000070, "Member 'W_ArmorOverviewSlot_C_AdjustFontSize::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_AdjustFontSize, K2Node_MakeStruct_Size_ImplicitCast) == 0x0000C8, "Member 'W_ArmorOverviewSlot_C_AdjustFontSize::K2Node_MakeStruct_Size_ImplicitCast' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_ArmorOverviewSlot_C_BackPage final
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_BackPage) == 0x000001, "Wrong alignment on W_ArmorOverviewSlot_C_BackPage");
static_assert(sizeof(W_ArmorOverviewSlot_C_BackPage) == 0x000001, "Wrong size on W_ArmorOverviewSlot_C_BackPage");
static_assert(offsetof(W_ArmorOverviewSlot_C_BackPage, Handled) == 0x000000, "Member 'W_ArmorOverviewSlot_C_BackPage::Handled' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.BindClick
// 0x0008 (0x0008 - 0x0000)
struct W_ArmorOverviewSlot_C_BindClick final
{
public:
	class UW_Button_C*                            ParentButton_0;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_BindClick) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_BindClick");
static_assert(sizeof(W_ArmorOverviewSlot_C_BindClick) == 0x000008, "Wrong size on W_ArmorOverviewSlot_C_BindClick");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindClick, ParentButton_0) == 0x000000, "Member 'W_ArmorOverviewSlot_C_BindClick::ParentButton_0' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.BindDoubleClick
// 0x0008 (0x0008 - 0x0000)
struct W_ArmorOverviewSlot_C_BindDoubleClick final
{
public:
	class UW_Button_C*                            ParentButton_0;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_BindDoubleClick) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_BindDoubleClick");
static_assert(sizeof(W_ArmorOverviewSlot_C_BindDoubleClick) == 0x000008, "Wrong size on W_ArmorOverviewSlot_C_BindDoubleClick");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindDoubleClick, ParentButton_0) == 0x000000, "Member 'W_ArmorOverviewSlot_C_BindDoubleClick::ParentButton_0' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.BindHovered
// 0x0010 (0x0010 - 0x0000)
struct W_ArmorOverviewSlot_C_BindHovered final
{
public:
	class UW_Button_C*                            ParentButton_0;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquipped_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_BindHovered) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_BindHovered");
static_assert(sizeof(W_ArmorOverviewSlot_C_BindHovered) == 0x000010, "Wrong size on W_ArmorOverviewSlot_C_BindHovered");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindHovered, ParentButton_0) == 0x000000, "Member 'W_ArmorOverviewSlot_C_BindHovered::ParentButton_0' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindHovered, CallFunc_GetEquipped_ReturnValue) == 0x000008, "Member 'W_ArmorOverviewSlot_C_BindHovered::CallFunc_GetEquipped_ReturnValue' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.BindPressedState
// 0x0002 (0x0002 - 0x0000)
struct W_ArmorOverviewSlot_C_BindPressedState final
{
public:
	bool                                          CallFunc_GetEquipped_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPressed_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_BindPressedState) == 0x000001, "Wrong alignment on W_ArmorOverviewSlot_C_BindPressedState");
static_assert(sizeof(W_ArmorOverviewSlot_C_BindPressedState) == 0x000002, "Wrong size on W_ArmorOverviewSlot_C_BindPressedState");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindPressedState, CallFunc_GetEquipped_ReturnValue) == 0x000000, "Member 'W_ArmorOverviewSlot_C_BindPressedState::CallFunc_GetEquipped_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindPressedState, CallFunc_IsPressed_ReturnValue) == 0x000001, "Member 'W_ArmorOverviewSlot_C_BindPressedState::CallFunc_IsPressed_ReturnValue' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.BindSelectedState
// 0x0010 (0x0010 - 0x0000)
struct W_ArmorOverviewSlot_C_BindSelectedState final
{
public:
	class UW_Button_C*                            ParentButton_0;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSelected_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_BindSelectedState) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_BindSelectedState");
static_assert(sizeof(W_ArmorOverviewSlot_C_BindSelectedState) == 0x000010, "Wrong size on W_ArmorOverviewSlot_C_BindSelectedState");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindSelectedState, ParentButton_0) == 0x000000, "Member 'W_ArmorOverviewSlot_C_BindSelectedState::ParentButton_0' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindSelectedState, CallFunc_GetSelected_ReturnValue) == 0x000008, "Member 'W_ArmorOverviewSlot_C_BindSelectedState::CallFunc_GetSelected_ReturnValue' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.BindToButton
// 0x0080 (0x0080 - 0x0000)
struct W_ArmorOverviewSlot_C_BindToButton final
{
public:
	class UW_Button_C*                            ParentButton_0;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          BindClicks;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UW_Button_C* Button)>    K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_Button_C* Button)>    K2Node_CreateDelegate_OutputDelegate_1;            // 0x001C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_Button_C* Button)>    K2Node_CreateDelegate_OutputDelegate_2;            // 0x002C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x003C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x004C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x005C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_Button_C* Button)>    K2Node_CreateDelegate_OutputDelegate_6;            // 0x006C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_BindToButton) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_BindToButton");
static_assert(sizeof(W_ArmorOverviewSlot_C_BindToButton) == 0x000080, "Wrong size on W_ArmorOverviewSlot_C_BindToButton");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindToButton, ParentButton_0) == 0x000000, "Member 'W_ArmorOverviewSlot_C_BindToButton::ParentButton_0' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindToButton, BindClicks) == 0x000008, "Member 'W_ArmorOverviewSlot_C_BindToButton::BindClicks' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindToButton, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'W_ArmorOverviewSlot_C_BindToButton::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindToButton, K2Node_CreateDelegate_OutputDelegate_1) == 0x00001C, "Member 'W_ArmorOverviewSlot_C_BindToButton::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindToButton, K2Node_CreateDelegate_OutputDelegate_2) == 0x00002C, "Member 'W_ArmorOverviewSlot_C_BindToButton::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindToButton, K2Node_CreateDelegate_OutputDelegate_3) == 0x00003C, "Member 'W_ArmorOverviewSlot_C_BindToButton::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindToButton, K2Node_CreateDelegate_OutputDelegate_4) == 0x00004C, "Member 'W_ArmorOverviewSlot_C_BindToButton::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindToButton, K2Node_CreateDelegate_OutputDelegate_5) == 0x00005C, "Member 'W_ArmorOverviewSlot_C_BindToButton::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindToButton, K2Node_CreateDelegate_OutputDelegate_6) == 0x00006C, "Member 'W_ArmorOverviewSlot_C_BindToButton::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.BindUnhovered
// 0x0001 (0x0001 - 0x0000)
struct W_ArmorOverviewSlot_C_BindUnhovered final
{
public:
	bool                                          CallFunc_GetEquipped_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_BindUnhovered) == 0x000001, "Wrong alignment on W_ArmorOverviewSlot_C_BindUnhovered");
static_assert(sizeof(W_ArmorOverviewSlot_C_BindUnhovered) == 0x000001, "Wrong size on W_ArmorOverviewSlot_C_BindUnhovered");
static_assert(offsetof(W_ArmorOverviewSlot_C_BindUnhovered, CallFunc_GetEquipped_ReturnValue) == 0x000000, "Member 'W_ArmorOverviewSlot_C_BindUnhovered::CallFunc_GetEquipped_ReturnValue' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_0_DoubleClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_0_DoubleClicked__DelegateSignature final
{
public:
	class UW_Button_C*                            Button_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_0_DoubleClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_0_DoubleClicked__DelegateSignature");
static_assert(sizeof(W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_0_DoubleClicked__DelegateSignature) == 0x000008, "Wrong size on W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_0_DoubleClicked__DelegateSignature");
static_assert(offsetof(W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_0_DoubleClicked__DelegateSignature, Button_0) == 0x000000, "Member 'W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_0_DoubleClicked__DelegateSignature::Button_0' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_5_Clicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_5_Clicked__DelegateSignature final
{
public:
	class UW_Button_C*                            Button_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_5_Clicked__DelegateSignature) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_5_Clicked__DelegateSignature");
static_assert(sizeof(W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_5_Clicked__DelegateSignature) == 0x000008, "Wrong size on W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_5_Clicked__DelegateSignature");
static_assert(offsetof(W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_5_Clicked__DelegateSignature, Button_0) == 0x000000, "Member 'W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_5_Clicked__DelegateSignature::Button_0' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_6_Hovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_6_Hovered__DelegateSignature final
{
public:
	class UW_Button_C*                            Button_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_6_Hovered__DelegateSignature) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_6_Hovered__DelegateSignature");
static_assert(sizeof(W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_6_Hovered__DelegateSignature) == 0x000008, "Wrong size on W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_6_Hovered__DelegateSignature");
static_assert(offsetof(W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_6_Hovered__DelegateSignature, Button_0) == 0x000000, "Member 'W_ArmorOverviewSlot_C_BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_6_Hovered__DelegateSignature::Button_0' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_ArmorOverviewSlot_C_ChangePage final
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_ChangePage) == 0x000004, "Wrong alignment on W_ArmorOverviewSlot_C_ChangePage");
static_assert(sizeof(W_ArmorOverviewSlot_C_ChangePage) == 0x000008, "Wrong size on W_ArmorOverviewSlot_C_ChangePage");
static_assert(offsetof(W_ArmorOverviewSlot_C_ChangePage, PageName) == 0x000000, "Member 'W_ArmorOverviewSlot_C_ChangePage::PageName' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.ExecuteUbergraph_W_ArmorOverviewSlot
// 0x0518 (0x0518 - 0x0000)
struct W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquipped_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquipped_ReturnValue_1;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquipped_ReturnValue_2;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquipped_ReturnValue_3;                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_Button_C*                            K2Node_ComponentBoundEvent_Button_2;               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_Button_C*                            K2Node_ComponentBoundEvent_Button_1;               // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquipped_ReturnValue_4;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsGamepad;                            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Delay_1;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Delay;                                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Button_C*                            K2Node_ComponentBoundEvent_Button;                 // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_OptionNameID;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              K2Node_CustomEvent_bNewInputType;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasUserFocus_ReturnValue;                 // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquipped_ReturnValue_5;                // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArmourMaterial*                        K2Node_Event_Item;                                 // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_CustomEvent_ItemName;                       // 0x0070(0x0018)()
	class FText                                   K2Node_CustomEvent_SlotName;                       // 0x0088(0x0018)()
	class FText                                   K2Node_CustomEvent_Subtext;                        // 0x00A0(0x0018)()
	class UTexture2D*                             K2Node_CustomEvent_ItemImage;                      // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x00C4(0x0008)(NoDestructor)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseItem*                              K2Node_CustomEvent_ArmorItem;                      // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UArmourMaterial*                        K2Node_CustomEvent_Material_1;                     // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EArmourCoverage                               K2Node_CustomEvent_Coverage_1;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate;            // 0x00E4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseBodyArmor_C*                       K2Node_DynamicCast_AsBase_Body_Armor;              // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0120(0x0050)(HasGetValueTypeHash)
	TMap<EItemCategory, class UClass*>            K2Node_Event_ItemCategory;                         // 0x0170(0x0050)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01C0(0x0010)(ReferenceParm)
	struct FSavedLoadout                          K2Node_Event_ActiveLoadout;                        // 0x01D0(0x02E8)()
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x04B8(0x0018)()
	class FName                                   K2Node_Event_PageName;                             // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_Text;                                 // 0x04D8(0x0018)(ConstParm)
	bool                                          K2Node_Event_Show;                                 // 0x04F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EArmourCoverage                               K2Node_CustomEvent_Coverage;                       // 0x04F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F2[0x6];                                      // 0x04F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetArmorCoverageText_CoverageText;        // 0x04F8(0x0018)()
	class UArmourMaterial*                        K2Node_CustomEvent_Material;                       // 0x0510(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot");
static_assert(sizeof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot) == 0x000518, "Wrong size on W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, EntryPoint) == 0x000000, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_GetEquipped_ReturnValue) == 0x000004, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_GetEquipped_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_GetEquipped_ReturnValue_1) == 0x000005, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_GetEquipped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_GetEquipped_ReturnValue_2) == 0x000006, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_GetEquipped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_GetEquipped_ReturnValue_3) == 0x000007, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_GetEquipped_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_ComponentBoundEvent_Button_2) == 0x000008, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_ComponentBoundEvent_Button_2' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_ComponentBoundEvent_Button_1) == 0x000010, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_GetEquipped_ReturnValue_4) == 0x000018, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_GetEquipped_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_Event_IsGamepad) == 0x000019, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_Event_Delay_1) == 0x000020, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_Event_Collapse) == 0x000028, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_Event_Delay) == 0x000030, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_Event_IsDesignTime) == 0x000038, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_ComponentBoundEvent_Button) == 0x000040, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_PlayAnimationForward_ReturnValue) == 0x000048, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_Event_OptionNameID) == 0x000050, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_Event_OptionNameID' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_GetOwningPlayer_ReturnValue) == 0x000058, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_CustomEvent_bNewInputType) == 0x000060, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_CustomEvent_bNewInputType' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_HasUserFocus_ReturnValue) == 0x000061, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_HasUserFocus_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000062, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_GetEquipped_ReturnValue_5) == 0x000063, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_GetEquipped_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_Event_Item) == 0x000068, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_Event_Item' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_CustomEvent_ItemName) == 0x000070, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_CustomEvent_ItemName' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_CustomEvent_SlotName) == 0x000088, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_CustomEvent_SlotName' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_CustomEvent_Subtext) == 0x0000A0, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_CustomEvent_Subtext' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_CustomEvent_ItemImage) == 0x0000B8, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_CustomEvent_ItemImage' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_IsValid_ReturnValue) == 0x0000C0, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_TextIsEmpty_ReturnValue) == 0x0000C1, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_Not_PreBool_ReturnValue) == 0x0000C2, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_Event_InFocusEvent) == 0x0000C4, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_CustomEvent_ArmorItem) == 0x0000D0, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_CustomEvent_ArmorItem' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_CustomEvent_Material_1) == 0x0000D8, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_CustomEvent_Material_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_CustomEvent_Coverage_1) == 0x0000E0, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_CustomEvent_Coverage_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_CreateDelegate_OutputDelegate) == 0x0000E4, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x0000F8, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_GetCurrentInputType_ReturnValue) == 0x000100, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_IsValid_ReturnValue_1) == 0x000101, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_DynamicCast_AsBase_Body_Armor) == 0x000108, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_DynamicCast_AsBase_Body_Armor' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_DynamicCast_bSuccess) == 0x000110, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000118, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_MakeStruct_FormatArgumentData) == 0x000120, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_Event_ItemCategory) == 0x000170, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_Event_ItemCategory' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_MakeArray_Array) == 0x0001C0, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_Event_ActiveLoadout) == 0x0001D0, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_Event_ActiveLoadout' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_Format_ReturnValue) == 0x0004B8, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_Event_PageName) == 0x0004D0, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_Event_Text) == 0x0004D8, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_Event_Text' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_Event_Show) == 0x0004F0, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_Event_Show' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_CustomEvent_Coverage) == 0x0004F1, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_CustomEvent_Coverage' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, CallFunc_GetArmorCoverageText_CoverageText) == 0x0004F8, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::CallFunc_GetArmorCoverageText_CoverageText' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot, K2Node_CustomEvent_Material) == 0x000510, "Member 'W_ArmorOverviewSlot_C_ExecuteUbergraph_W_ArmorOverviewSlot::K2Node_CustomEvent_Material' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.GetEquippedColorByState
// 0x0040 (0x0040 - 0x0000)
struct W_ArmorOverviewSlot_C_GetEquippedColorByState final
{
public:
	struct FSlateColor                            ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ReturnParm)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0018(0x0014)()
	struct FSlateColor                            K2Node_Select_Default_1;                           // 0x002C(0x0014)()
};
static_assert(alignof(W_ArmorOverviewSlot_C_GetEquippedColorByState) == 0x000004, "Wrong alignment on W_ArmorOverviewSlot_C_GetEquippedColorByState");
static_assert(sizeof(W_ArmorOverviewSlot_C_GetEquippedColorByState) == 0x000040, "Wrong size on W_ArmorOverviewSlot_C_GetEquippedColorByState");
static_assert(offsetof(W_ArmorOverviewSlot_C_GetEquippedColorByState, ReturnValue) == 0x000000, "Member 'W_ArmorOverviewSlot_C_GetEquippedColorByState::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_GetEquippedColorByState, Temp_bool_Variable) == 0x000014, "Member 'W_ArmorOverviewSlot_C_GetEquippedColorByState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_GetEquippedColorByState, Temp_bool_Variable_1) == 0x000015, "Member 'W_ArmorOverviewSlot_C_GetEquippedColorByState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_GetEquippedColorByState, K2Node_Select_Default) == 0x000018, "Member 'W_ArmorOverviewSlot_C_GetEquippedColorByState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_GetEquippedColorByState, K2Node_Select_Default_1) == 0x00002C, "Member 'W_ArmorOverviewSlot_C_GetEquippedColorByState::K2Node_Select_Default_1' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.GetNormalColorByState
// 0x0040 (0x0040 - 0x0000)
struct W_ArmorOverviewSlot_C_GetNormalColorByState final
{
public:
	struct FSlateColor                            ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ReturnParm)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0018(0x0014)()
	struct FSlateColor                            K2Node_Select_Default_1;                           // 0x002C(0x0014)()
};
static_assert(alignof(W_ArmorOverviewSlot_C_GetNormalColorByState) == 0x000004, "Wrong alignment on W_ArmorOverviewSlot_C_GetNormalColorByState");
static_assert(sizeof(W_ArmorOverviewSlot_C_GetNormalColorByState) == 0x000040, "Wrong size on W_ArmorOverviewSlot_C_GetNormalColorByState");
static_assert(offsetof(W_ArmorOverviewSlot_C_GetNormalColorByState, ReturnValue) == 0x000000, "Member 'W_ArmorOverviewSlot_C_GetNormalColorByState::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_GetNormalColorByState, Temp_bool_Variable) == 0x000014, "Member 'W_ArmorOverviewSlot_C_GetNormalColorByState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_GetNormalColorByState, Temp_bool_Variable_1) == 0x000015, "Member 'W_ArmorOverviewSlot_C_GetNormalColorByState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_GetNormalColorByState, K2Node_Select_Default) == 0x000018, "Member 'W_ArmorOverviewSlot_C_GetNormalColorByState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_GetNormalColorByState, K2Node_Select_Default_1) == 0x00002C, "Member 'W_ArmorOverviewSlot_C_GetNormalColorByState::K2Node_Select_Default_1' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.HeaderSubpageNavigation
// 0x0008 (0x0008 - 0x0000)
struct W_ArmorOverviewSlot_C_HeaderSubpageNavigation final
{
public:
	class FName                                   OptionNameID;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_HeaderSubpageNavigation) == 0x000004, "Wrong alignment on W_ArmorOverviewSlot_C_HeaderSubpageNavigation");
static_assert(sizeof(W_ArmorOverviewSlot_C_HeaderSubpageNavigation) == 0x000008, "Wrong size on W_ArmorOverviewSlot_C_HeaderSubpageNavigation");
static_assert(offsetof(W_ArmorOverviewSlot_C_HeaderSubpageNavigation, OptionNameID) == 0x000000, "Member 'W_ArmorOverviewSlot_C_HeaderSubpageNavigation::OptionNameID' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.Hide
// 0x0010 (0x0010 - 0x0000)
struct W_ArmorOverviewSlot_C_Hide final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_Hide) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_Hide");
static_assert(sizeof(W_ArmorOverviewSlot_C_Hide) == 0x000010, "Wrong size on W_ArmorOverviewSlot_C_Hide");
static_assert(offsetof(W_ArmorOverviewSlot_C_Hide, Delay) == 0x000000, "Member 'W_ArmorOverviewSlot_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_Hide, Collapse) == 0x000008, "Member 'W_ArmorOverviewSlot_C_Hide::Collapse' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.InputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct W_ArmorOverviewSlot_C_InputMethodChanged final
{
public:
	ECommonInputType                              bNewInputType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_InputMethodChanged) == 0x000001, "Wrong alignment on W_ArmorOverviewSlot_C_InputMethodChanged");
static_assert(sizeof(W_ArmorOverviewSlot_C_InputMethodChanged) == 0x000001, "Wrong size on W_ArmorOverviewSlot_C_InputMethodChanged");
static_assert(offsetof(W_ArmorOverviewSlot_C_InputMethodChanged, bNewInputType) == 0x000000, "Member 'W_ArmorOverviewSlot_C_InputMethodChanged::bNewInputType' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.OnAddedToFocusPath
// 0x0008 (0x0008 - 0x0000)
struct W_ArmorOverviewSlot_C_OnAddedToFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(W_ArmorOverviewSlot_C_OnAddedToFocusPath) == 0x000004, "Wrong alignment on W_ArmorOverviewSlot_C_OnAddedToFocusPath");
static_assert(sizeof(W_ArmorOverviewSlot_C_OnAddedToFocusPath) == 0x000008, "Wrong size on W_ArmorOverviewSlot_C_OnAddedToFocusPath");
static_assert(offsetof(W_ArmorOverviewSlot_C_OnAddedToFocusPath, InFocusEvent) == 0x000000, "Member 'W_ArmorOverviewSlot_C_OnAddedToFocusPath::InFocusEvent' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_ArmorOverviewSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_PreConstruct) == 0x000001, "Wrong alignment on W_ArmorOverviewSlot_C_PreConstruct");
static_assert(sizeof(W_ArmorOverviewSlot_C_PreConstruct) == 0x000001, "Wrong size on W_ArmorOverviewSlot_C_PreConstruct");
static_assert(offsetof(W_ArmorOverviewSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_ArmorOverviewSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.Reveal
// 0x0008 (0x0008 - 0x0000)
struct W_ArmorOverviewSlot_C_Reveal final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_Reveal) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_Reveal");
static_assert(sizeof(W_ArmorOverviewSlot_C_Reveal) == 0x000008, "Wrong size on W_ArmorOverviewSlot_C_Reveal");
static_assert(offsetof(W_ArmorOverviewSlot_C_Reveal, Delay) == 0x000000, "Member 'W_ArmorOverviewSlot_C_Reveal::Delay' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.SetArmorCoverage
// 0x0020 (0x0020 - 0x0000)
struct W_ArmorOverviewSlot_C_SetArmorCoverage final
{
public:
	EArmourCoverage                               ArmorCoverage;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetArmorCoverageText_CoverageText;        // 0x0008(0x0018)()
};
static_assert(alignof(W_ArmorOverviewSlot_C_SetArmorCoverage) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_SetArmorCoverage");
static_assert(sizeof(W_ArmorOverviewSlot_C_SetArmorCoverage) == 0x000020, "Wrong size on W_ArmorOverviewSlot_C_SetArmorCoverage");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetArmorCoverage, ArmorCoverage) == 0x000000, "Member 'W_ArmorOverviewSlot_C_SetArmorCoverage::ArmorCoverage' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetArmorCoverage, CallFunc_GetArmorCoverageText_CoverageText) == 0x000008, "Member 'W_ArmorOverviewSlot_C_SetArmorCoverage::CallFunc_GetArmorCoverageText_CoverageText' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.SetArmorMaterial
// 0x0008 (0x0008 - 0x0000)
struct W_ArmorOverviewSlot_C_SetArmorMaterial final
{
public:
	class UArmourMaterial*                        Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_SetArmorMaterial) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_SetArmorMaterial");
static_assert(sizeof(W_ArmorOverviewSlot_C_SetArmorMaterial) == 0x000008, "Wrong size on W_ArmorOverviewSlot_C_SetArmorMaterial");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetArmorMaterial, Item) == 0x000000, "Member 'W_ArmorOverviewSlot_C_SetArmorMaterial::Item' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_ArmorOverviewSlot_C_SetInputMode final
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_SetInputMode) == 0x000001, "Wrong alignment on W_ArmorOverviewSlot_C_SetInputMode");
static_assert(sizeof(W_ArmorOverviewSlot_C_SetInputMode) == 0x000001, "Wrong size on W_ArmorOverviewSlot_C_SetInputMode");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_ArmorOverviewSlot_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.SetManualDetails
// 0x0050 (0x0050 - 0x0000)
struct W_ArmorOverviewSlot_C_SetManualDetails final
{
public:
	class FText                                   ItemName_0;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   SlotName;                                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   Subtext;                                           // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UTexture2D*                             ItemImage_0;                                       // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_SetManualDetails) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_SetManualDetails");
static_assert(sizeof(W_ArmorOverviewSlot_C_SetManualDetails) == 0x000050, "Wrong size on W_ArmorOverviewSlot_C_SetManualDetails");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetManualDetails, ItemName_0) == 0x000000, "Member 'W_ArmorOverviewSlot_C_SetManualDetails::ItemName_0' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetManualDetails, SlotName) == 0x000018, "Member 'W_ArmorOverviewSlot_C_SetManualDetails::SlotName' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetManualDetails, Subtext) == 0x000030, "Member 'W_ArmorOverviewSlot_C_SetManualDetails::Subtext' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetManualDetails, ItemImage_0) == 0x000048, "Member 'W_ArmorOverviewSlot_C_SetManualDetails::ItemImage_0' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.SetVisualState
// 0x0088 (0x0088 - 0x0000)
struct W_ArmorOverviewSlot_C_SetVisualState final
{
public:
	bool                                          Hovered;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Equipped;                                          // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default;                             // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            CallFunc_GetEquippedColorByState_ReturnValue;      // 0x004C(0x0014)()
	struct FSlateColor                            CallFunc_GetNormalColorByState_ReturnValue;        // 0x0060(0x0014)()
	struct FSlateColor                            K2Node_Select_Default_4;                           // 0x0074(0x0014)()
};
static_assert(alignof(W_ArmorOverviewSlot_C_SetVisualState) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_SetVisualState");
static_assert(sizeof(W_ArmorOverviewSlot_C_SetVisualState) == 0x000088, "Wrong size on W_ArmorOverviewSlot_C_SetVisualState");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Hovered) == 0x000000, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Hovered' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Pressed) == 0x000001, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Pressed' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Equipped) == 0x000002, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Equipped' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Temp_bool_Variable) == 0x000003, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Temp_byte_Variable) == 0x000004, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Temp_byte_Variable_1) == 0x000005, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Temp_bool_Variable_1) == 0x000006, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Temp_byte_Variable_2) == 0x000007, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Temp_byte_Variable_3) == 0x000008, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Temp_bool_Variable_2) == 0x000009, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Temp_byte_Variable_4) == 0x00000A, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Temp_byte_Variable_5) == 0x00000B, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Temp_bool_Variable_3) == 0x00000C, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Temp_struct_Variable) == 0x000010, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Temp_struct_Variable_1) == 0x000020, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, Temp_bool_Variable_4) == 0x000030, "Member 'W_ArmorOverviewSlot_C_SetVisualState::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, CallFunc_BooleanOR_ReturnValue) == 0x000031, "Member 'W_ArmorOverviewSlot_C_SetVisualState::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, CallFunc_BooleanOR_ReturnValue_1) == 0x000032, "Member 'W_ArmorOverviewSlot_C_SetVisualState::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, K2Node_Select_Default) == 0x000038, "Member 'W_ArmorOverviewSlot_C_SetVisualState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, K2Node_Select_Default_1) == 0x000048, "Member 'W_ArmorOverviewSlot_C_SetVisualState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, K2Node_Select_Default_2) == 0x000049, "Member 'W_ArmorOverviewSlot_C_SetVisualState::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, K2Node_Select_Default_3) == 0x00004A, "Member 'W_ArmorOverviewSlot_C_SetVisualState::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, CallFunc_GetEquippedColorByState_ReturnValue) == 0x00004C, "Member 'W_ArmorOverviewSlot_C_SetVisualState::CallFunc_GetEquippedColorByState_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, CallFunc_GetNormalColorByState_ReturnValue) == 0x000060, "Member 'W_ArmorOverviewSlot_C_SetVisualState::CallFunc_GetNormalColorByState_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_SetVisualState, K2Node_Select_Default_4) == 0x000074, "Member 'W_ArmorOverviewSlot_C_SetVisualState::K2Node_Select_Default_4' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.ShowSubtext
// 0x0020 (0x0020 - 0x0000)
struct W_ArmorOverviewSlot_C_ShowSubtext final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Show;                                              // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_ShowSubtext) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_ShowSubtext");
static_assert(sizeof(W_ArmorOverviewSlot_C_ShowSubtext) == 0x000020, "Wrong size on W_ArmorOverviewSlot_C_ShowSubtext");
static_assert(offsetof(W_ArmorOverviewSlot_C_ShowSubtext, Text) == 0x000000, "Member 'W_ArmorOverviewSlot_C_ShowSubtext::Text' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_ShowSubtext, Show) == 0x000018, "Member 'W_ArmorOverviewSlot_C_ShowSubtext::Show' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.UnbindFromButton
// 0x0074 (0x0074 - 0x0000)
struct W_ArmorOverviewSlot_C_UnbindFromButton final
{
public:
	TDelegate<void(class UW_Button_C* Button)>    K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UW_Button_C* Button)>    K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_Button_C* Button)>    K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0044(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_Button_C* Button)>    K2Node_CreateDelegate_OutputDelegate_6;            // 0x0064(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_UnbindFromButton) == 0x000004, "Wrong alignment on W_ArmorOverviewSlot_C_UnbindFromButton");
static_assert(sizeof(W_ArmorOverviewSlot_C_UnbindFromButton) == 0x000074, "Wrong size on W_ArmorOverviewSlot_C_UnbindFromButton");
static_assert(offsetof(W_ArmorOverviewSlot_C_UnbindFromButton, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'W_ArmorOverviewSlot_C_UnbindFromButton::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UnbindFromButton, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'W_ArmorOverviewSlot_C_UnbindFromButton::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UnbindFromButton, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'W_ArmorOverviewSlot_C_UnbindFromButton::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UnbindFromButton, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'W_ArmorOverviewSlot_C_UnbindFromButton::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UnbindFromButton, K2Node_CreateDelegate_OutputDelegate_3) == 0x000034, "Member 'W_ArmorOverviewSlot_C_UnbindFromButton::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UnbindFromButton, K2Node_CreateDelegate_OutputDelegate_4) == 0x000044, "Member 'W_ArmorOverviewSlot_C_UnbindFromButton::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UnbindFromButton, K2Node_CreateDelegate_OutputDelegate_5) == 0x000054, "Member 'W_ArmorOverviewSlot_C_UnbindFromButton::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UnbindFromButton, K2Node_CreateDelegate_OutputDelegate_6) == 0x000064, "Member 'W_ArmorOverviewSlot_C_UnbindFromButton::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.UpdateActiveLoadout
// 0x02E8 (0x02E8 - 0x0000)
struct W_ArmorOverviewSlot_C_UpdateActiveLoadout final
{
public:
	struct FSavedLoadout                          ActiveLoadout;                                     // 0x0000(0x02E8)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_ArmorOverviewSlot_C_UpdateActiveLoadout) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_UpdateActiveLoadout");
static_assert(sizeof(W_ArmorOverviewSlot_C_UpdateActiveLoadout) == 0x0002E8, "Wrong size on W_ArmorOverviewSlot_C_UpdateActiveLoadout");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateActiveLoadout, ActiveLoadout) == 0x000000, "Member 'W_ArmorOverviewSlot_C_UpdateActiveLoadout::ActiveLoadout' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.UpdateArmor
// 0x0018 (0x0018 - 0x0000)
struct W_ArmorOverviewSlot_C_UpdateArmor final
{
public:
	class ABaseItem*                              ArmorItem;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UArmourMaterial*                        Material;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EArmourCoverage                               Coverage;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_UpdateArmor) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_UpdateArmor");
static_assert(sizeof(W_ArmorOverviewSlot_C_UpdateArmor) == 0x000018, "Wrong size on W_ArmorOverviewSlot_C_UpdateArmor");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateArmor, ArmorItem) == 0x000000, "Member 'W_ArmorOverviewSlot_C_UpdateArmor::ArmorItem' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateArmor, Material) == 0x000008, "Member 'W_ArmorOverviewSlot_C_UpdateArmor::Material' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateArmor, Coverage) == 0x000010, "Member 'W_ArmorOverviewSlot_C_UpdateArmor::Coverage' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.UpdateArmorCoverage
// 0x0001 (0x0001 - 0x0000)
struct W_ArmorOverviewSlot_C_UpdateArmorCoverage final
{
public:
	EArmourCoverage                               Coverage;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_UpdateArmorCoverage) == 0x000001, "Wrong alignment on W_ArmorOverviewSlot_C_UpdateArmorCoverage");
static_assert(sizeof(W_ArmorOverviewSlot_C_UpdateArmorCoverage) == 0x000001, "Wrong size on W_ArmorOverviewSlot_C_UpdateArmorCoverage");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateArmorCoverage, Coverage) == 0x000000, "Member 'W_ArmorOverviewSlot_C_UpdateArmorCoverage::Coverage' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.UpdateArmorMaterial
// 0x0008 (0x0008 - 0x0000)
struct W_ArmorOverviewSlot_C_UpdateArmorMaterial final
{
public:
	class UArmourMaterial*                        Material;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_UpdateArmorMaterial) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_UpdateArmorMaterial");
static_assert(sizeof(W_ArmorOverviewSlot_C_UpdateArmorMaterial) == 0x000008, "Wrong size on W_ArmorOverviewSlot_C_UpdateArmorMaterial");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateArmorMaterial, Material) == 0x000000, "Member 'W_ArmorOverviewSlot_C_UpdateArmorMaterial::Material' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.UpdateCurrentItemMap
// 0x0050 (0x0050 - 0x0000)
struct W_ArmorOverviewSlot_C_UpdateCurrentItemMap final
{
public:
	TMap<EItemCategory, class UClass*>            ItemCategory;                                      // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_ArmorOverviewSlot_C_UpdateCurrentItemMap) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_UpdateCurrentItemMap");
static_assert(sizeof(W_ArmorOverviewSlot_C_UpdateCurrentItemMap) == 0x000050, "Wrong size on W_ArmorOverviewSlot_C_UpdateCurrentItemMap");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateCurrentItemMap, ItemCategory) == 0x000000, "Member 'W_ArmorOverviewSlot_C_UpdateCurrentItemMap::ItemCategory' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.UpdateDetailFontSize
// 0x00B8 (0x00B8 - 0x0000)
struct W_ArmorOverviewSlot_C_UpdateDetailFontSize final
{
public:
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         CallFunc_AdjustFontSize_Font;                      // 0x0008(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_AdjustFontSize_Font_1;                    // 0x0060(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_UpdateDetailFontSize) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_UpdateDetailFontSize");
static_assert(sizeof(W_ArmorOverviewSlot_C_UpdateDetailFontSize) == 0x0000B8, "Wrong size on W_ArmorOverviewSlot_C_UpdateDetailFontSize");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateDetailFontSize, CallFunc_SelectInt_ReturnValue) == 0x000000, "Member 'W_ArmorOverviewSlot_C_UpdateDetailFontSize::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateDetailFontSize, CallFunc_AdjustFontSize_Font) == 0x000008, "Member 'W_ArmorOverviewSlot_C_UpdateDetailFontSize::CallFunc_AdjustFontSize_Font' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateDetailFontSize, CallFunc_AdjustFontSize_Font_1) == 0x000060, "Member 'W_ArmorOverviewSlot_C_UpdateDetailFontSize::CallFunc_AdjustFontSize_Font_1' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.UpdateNameFontSize
// 0x0060 (0x0060 - 0x0000)
struct W_ArmorOverviewSlot_C_UpdateNameFontSize final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_AdjustFontSize_Font;                      // 0x0008(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_UpdateNameFontSize) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_UpdateNameFontSize");
static_assert(sizeof(W_ArmorOverviewSlot_C_UpdateNameFontSize) == 0x000060, "Wrong size on W_ArmorOverviewSlot_C_UpdateNameFontSize");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateNameFontSize, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'W_ArmorOverviewSlot_C_UpdateNameFontSize::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateNameFontSize, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'W_ArmorOverviewSlot_C_UpdateNameFontSize::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateNameFontSize, CallFunc_SelectInt_ReturnValue) == 0x000004, "Member 'W_ArmorOverviewSlot_C_UpdateNameFontSize::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateNameFontSize, CallFunc_AdjustFontSize_Font) == 0x000008, "Member 'W_ArmorOverviewSlot_C_UpdateNameFontSize::CallFunc_AdjustFontSize_Font' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.UpdateStyle
// 0x0018 (0x0018 - 0x0000)
struct W_ArmorOverviewSlot_C_UpdateStyle final
{
public:
	bool                                          bUseGamepad_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonButtonStyle>         K2Node_Select_Default_2;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_UpdateStyle) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_UpdateStyle");
static_assert(sizeof(W_ArmorOverviewSlot_C_UpdateStyle) == 0x000018, "Wrong size on W_ArmorOverviewSlot_C_UpdateStyle");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateStyle, bUseGamepad_0) == 0x000000, "Member 'W_ArmorOverviewSlot_C_UpdateStyle::bUseGamepad_0' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateStyle, Temp_bool_Variable) == 0x000001, "Member 'W_ArmorOverviewSlot_C_UpdateStyle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateStyle, Temp_byte_Variable) == 0x000002, "Member 'W_ArmorOverviewSlot_C_UpdateStyle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateStyle, Temp_byte_Variable_1) == 0x000003, "Member 'W_ArmorOverviewSlot_C_UpdateStyle::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateStyle, Temp_bool_Variable_1) == 0x000004, "Member 'W_ArmorOverviewSlot_C_UpdateStyle::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateStyle, Temp_bool_Variable_2) == 0x000005, "Member 'W_ArmorOverviewSlot_C_UpdateStyle::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateStyle, Temp_byte_Variable_2) == 0x000006, "Member 'W_ArmorOverviewSlot_C_UpdateStyle::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateStyle, Temp_byte_Variable_3) == 0x000007, "Member 'W_ArmorOverviewSlot_C_UpdateStyle::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateStyle, K2Node_Select_Default) == 0x000008, "Member 'W_ArmorOverviewSlot_C_UpdateStyle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateStyle, K2Node_Select_Default_1) == 0x000009, "Member 'W_ArmorOverviewSlot_C_UpdateStyle::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_UpdateStyle, K2Node_Select_Default_2) == 0x000010, "Member 'W_ArmorOverviewSlot_C_UpdateStyle::K2Node_Select_Default_2' has a wrong offset!");

// Function W_ArmorOverviewSlot.W_ArmorOverviewSlot_C.GetFocusTarget
// 0x0010 (0x0010 - 0x0000)
struct W_ArmorOverviewSlot_C_GetFocusTarget final
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ArmorOverviewSlot_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_ArmorOverviewSlot_C_GetFocusTarget");
static_assert(sizeof(W_ArmorOverviewSlot_C_GetFocusTarget) == 0x000010, "Wrong size on W_ArmorOverviewSlot_C_GetFocusTarget");
static_assert(offsetof(W_ArmorOverviewSlot_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_ArmorOverviewSlot_C_GetFocusTarget::Focus' has a wrong offset!");
static_assert(offsetof(W_ArmorOverviewSlot_C_GetFocusTarget, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'W_ArmorOverviewSlot_C_GetFocusTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

