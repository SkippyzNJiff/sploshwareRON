#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Spinbox

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function W_Spinbox.W_Spinbox_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_Spinbox_C_BackPage final
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_BackPage) == 0x000001, "Wrong alignment on W_Spinbox_C_BackPage");
static_assert(sizeof(W_Spinbox_C_BackPage) == 0x000001, "Wrong size on W_Spinbox_C_BackPage");
static_assert(offsetof(W_Spinbox_C_BackPage, Handled) == 0x000000, "Member 'W_Spinbox_C_BackPage::Handled' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature final
{
public:
	class UW_Button_C*                            Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature) == 0x000008, "Wrong alignment on W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature");
static_assert(sizeof(W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature) == 0x000008, "Wrong size on W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature");
static_assert(offsetof(W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature, Button) == 0x000000, "Member 'W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature::Button' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_5_Hovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_5_Hovered__DelegateSignature final
{
public:
	class UW_Button_C*                            Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_5_Hovered__DelegateSignature) == 0x000008, "Wrong alignment on W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_5_Hovered__DelegateSignature");
static_assert(sizeof(W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_5_Hovered__DelegateSignature) == 0x000008, "Wrong size on W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_5_Hovered__DelegateSignature");
static_assert(offsetof(W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_5_Hovered__DelegateSignature, Button) == 0x000000, "Member 'W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_5_Hovered__DelegateSignature::Button' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature");
static_assert(sizeof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature) == 0x000004, "Wrong size on W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature");
static_assert(offsetof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature, InValue) == 0x000000, "Member 'W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature::InValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextCommit                                   CommitMethod;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature) == 0x000004, "Wrong alignment on W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature");
static_assert(sizeof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature) == 0x000008, "Wrong size on W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature");
static_assert(offsetof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature, InValue) == 0x000000, "Member 'W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature::InValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature, CommitMethod) == 0x000004, "Member 'W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature::CommitMethod' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature");
static_assert(sizeof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature) == 0x000004, "Wrong size on W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature");
static_assert(offsetof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature, InValue) == 0x000000, "Member 'W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature::InValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_ChangePage final
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_ChangePage) == 0x000004, "Wrong alignment on W_Spinbox_C_ChangePage");
static_assert(sizeof(W_Spinbox_C_ChangePage) == 0x000008, "Wrong size on W_Spinbox_C_ChangePage");
static_assert(offsetof(W_Spinbox_C_ChangePage, PageName) == 0x000000, "Member 'W_Spinbox_C_ChangePage::PageName' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.ExecuteUbergraph_W_Spinbox
// 0x0108 (0x0108 - 0x0000)
struct W_Spinbox_C_ExecuteUbergraph_W_Spinbox final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle;              // 0x0008(0x0010)(NoDestructor)
	float                                         K2Node_ComponentBoundEvent_InValue_2;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextCommit                                   K2Node_ComponentBoundEvent_CommitMethod;           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Button_C*                            K2Node_ComponentBoundEvent_Button_1;               // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_InValue_1;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_ComponentBoundEvent_InValue;                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Delay_1;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Delay;                                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_PageName;                             // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsGamepad;                            // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Button_C*                            K2Node_ComponentBoundEvent_Button;                 // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue_1;        // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_SliderExponent_ImplicitCast;    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_UpdateValue_Value_ImplicitCast;           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CallDelegate_InValue_ImplicitCast;          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMinValue_NewValue_ImplicitCast;        // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMinSliderValue_NewValue_ImplicitCast;  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMaxSliderValue_NewValue_ImplicitCast;  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMaxValue_NewValue_ImplicitCast;        // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetDelta_NewValue_ImplicitCast;           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetValue_NewValue_ImplicitCast;           // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetValue_NewValue_ImplicitCast_1;         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_UpdateValue_Value_ImplicitCast_1;         // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox) == 0x000008, "Wrong alignment on W_Spinbox_C_ExecuteUbergraph_W_Spinbox");
static_assert(sizeof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox) == 0x000108, "Wrong size on W_Spinbox_C_ExecuteUbergraph_W_Spinbox");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, EntryPoint) == 0x000000, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_MakeStruct_DataTableRowHandle) == 0x000008, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_MakeStruct_DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_ComponentBoundEvent_InValue_2) == 0x000018, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_ComponentBoundEvent_InValue_2' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_ComponentBoundEvent_CommitMethod) == 0x00001C, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_ComponentBoundEvent_CommitMethod' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_ComponentBoundEvent_Button_1) == 0x000020, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_ComponentBoundEvent_InValue_1) == 0x000028, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_ComponentBoundEvent_InValue_1' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, Temp_byte_Variable) == 0x00002C, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, Temp_bool_Variable) == 0x00002D, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_ComponentBoundEvent_InValue) == 0x000030, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_ComponentBoundEvent_InValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_Event_Delay_1) == 0x000038, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_Event_Collapse) == 0x000040, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_Event_Delay) == 0x000048, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_Event_IsDesignTime) == 0x000050, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_Event_PageName) == 0x000054, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_Event_IsGamepad) == 0x00005C, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_ComponentBoundEvent_Button) == 0x000060, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, Temp_byte_Variable_1) == 0x000068, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, CallFunc_Conv_DoubleToString_ReturnValue) == 0x000070, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_Select_Default) == 0x000080, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, CallFunc_Concat_StrStr_ReturnValue) == 0x000088, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000098, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, CallFunc_Conv_DoubleToString_ReturnValue_1) == 0x0000A8, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::CallFunc_Conv_DoubleToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000B8, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_VariableSet_SliderExponent_ImplicitCast) == 0x0000C8, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_VariableSet_SliderExponent_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, CallFunc_UpdateValue_Value_ImplicitCast) == 0x0000D0, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::CallFunc_UpdateValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_CallDelegate_InValue_ImplicitCast) == 0x0000D8, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_CallDelegate_InValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, CallFunc_SetMinValue_NewValue_ImplicitCast) == 0x0000E0, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::CallFunc_SetMinValue_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, CallFunc_SetMinSliderValue_NewValue_ImplicitCast) == 0x0000E4, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::CallFunc_SetMinSliderValue_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, CallFunc_SetMaxSliderValue_NewValue_ImplicitCast) == 0x0000E8, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::CallFunc_SetMaxSliderValue_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, CallFunc_SetMaxValue_NewValue_ImplicitCast) == 0x0000EC, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::CallFunc_SetMaxValue_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, CallFunc_SetDelta_NewValue_ImplicitCast) == 0x0000F0, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::CallFunc_SetDelta_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, CallFunc_SetValue_NewValue_ImplicitCast) == 0x0000F4, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::CallFunc_SetValue_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, CallFunc_SetValue_NewValue_ImplicitCast_1) == 0x0000F8, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::CallFunc_SetValue_NewValue_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, CallFunc_UpdateValue_Value_ImplicitCast_1) == 0x000100, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::CallFunc_UpdateValue_Value_ImplicitCast_1' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.GetMaxSliderValue
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_GetMaxSliderValue final
{
public:
	double                                        MaximumSliderValue_0;                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_GetMaxSliderValue) == 0x000008, "Wrong alignment on W_Spinbox_C_GetMaxSliderValue");
static_assert(sizeof(W_Spinbox_C_GetMaxSliderValue) == 0x000008, "Wrong size on W_Spinbox_C_GetMaxSliderValue");
static_assert(offsetof(W_Spinbox_C_GetMaxSliderValue, MaximumSliderValue_0) == 0x000000, "Member 'W_Spinbox_C_GetMaxSliderValue::MaximumSliderValue_0' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.GetMaxValue
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_GetMaxValue final
{
public:
	double                                        MaximumValue_0;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_GetMaxValue) == 0x000008, "Wrong alignment on W_Spinbox_C_GetMaxValue");
static_assert(sizeof(W_Spinbox_C_GetMaxValue) == 0x000008, "Wrong size on W_Spinbox_C_GetMaxValue");
static_assert(offsetof(W_Spinbox_C_GetMaxValue, MaximumValue_0) == 0x000000, "Member 'W_Spinbox_C_GetMaxValue::MaximumValue_0' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.GetMinSliderValue
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_GetMinSliderValue final
{
public:
	double                                        MinimumSliderValue_0;                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_GetMinSliderValue) == 0x000008, "Wrong alignment on W_Spinbox_C_GetMinSliderValue");
static_assert(sizeof(W_Spinbox_C_GetMinSliderValue) == 0x000008, "Wrong size on W_Spinbox_C_GetMinSliderValue");
static_assert(offsetof(W_Spinbox_C_GetMinSliderValue, MinimumSliderValue_0) == 0x000000, "Member 'W_Spinbox_C_GetMinSliderValue::MinimumSliderValue_0' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.GetMinValue
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_GetMinValue final
{
public:
	double                                        MinimumValue_0;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_GetMinValue) == 0x000008, "Wrong alignment on W_Spinbox_C_GetMinValue");
static_assert(sizeof(W_Spinbox_C_GetMinValue) == 0x000008, "Wrong size on W_Spinbox_C_GetMinValue");
static_assert(offsetof(W_Spinbox_C_GetMinValue, MinimumValue_0) == 0x000000, "Member 'W_Spinbox_C_GetMinValue::MinimumValue_0' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.Hide
// 0x0010 (0x0010 - 0x0000)
struct W_Spinbox_C_Hide final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_Hide) == 0x000008, "Wrong alignment on W_Spinbox_C_Hide");
static_assert(sizeof(W_Spinbox_C_Hide) == 0x000010, "Wrong size on W_Spinbox_C_Hide");
static_assert(offsetof(W_Spinbox_C_Hide, Delay) == 0x000000, "Member 'W_Spinbox_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_Hide, Collapse) == 0x000008, "Member 'W_Spinbox_C_Hide::Collapse' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.IsValueDirty
// 0x0002 (0x0002 - 0x0000)
struct W_Spinbox_C_IsValueDirty final
{
public:
	bool                                          IsDirty;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_IsValueDirty) == 0x000001, "Wrong alignment on W_Spinbox_C_IsValueDirty");
static_assert(sizeof(W_Spinbox_C_IsValueDirty) == 0x000002, "Wrong size on W_Spinbox_C_IsValueDirty");
static_assert(offsetof(W_Spinbox_C_IsValueDirty, IsDirty) == 0x000000, "Member 'W_Spinbox_C_IsValueDirty::IsDirty' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_IsValueDirty, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000001, "Member 'W_Spinbox_C_IsValueDirty::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_Spinbox_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_PreConstruct) == 0x000001, "Wrong alignment on W_Spinbox_C_PreConstruct");
static_assert(sizeof(W_Spinbox_C_PreConstruct) == 0x000001, "Wrong size on W_Spinbox_C_PreConstruct");
static_assert(offsetof(W_Spinbox_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_Spinbox_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.Reveal
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_Reveal final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_Reveal) == 0x000008, "Wrong alignment on W_Spinbox_C_Reveal");
static_assert(sizeof(W_Spinbox_C_Reveal) == 0x000008, "Wrong size on W_Spinbox_C_Reveal");
static_assert(offsetof(W_Spinbox_C_Reveal, Delay) == 0x000000, "Member 'W_Spinbox_C_Reveal::Delay' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.SetDefaultValue
// 0x0018 (0x0018 - 0x0000)
struct W_Spinbox_C_SetDefaultValue final
{
public:
	double                                        DefaultValue_0;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowResetButton;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_SetDefaultValue) == 0x000008, "Wrong alignment on W_Spinbox_C_SetDefaultValue");
static_assert(sizeof(W_Spinbox_C_SetDefaultValue) == 0x000018, "Wrong size on W_Spinbox_C_SetDefaultValue");
static_assert(offsetof(W_Spinbox_C_SetDefaultValue, DefaultValue_0) == 0x000000, "Member 'W_Spinbox_C_SetDefaultValue::DefaultValue_0' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_SetDefaultValue, ShowResetButton) == 0x000008, "Member 'W_Spinbox_C_SetDefaultValue::ShowResetButton' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_SetDefaultValue, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000009, "Member 'W_Spinbox_C_SetDefaultValue::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_SetDefaultValue, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'W_Spinbox_C_SetDefaultValue::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_Spinbox_C_SetInputMode final
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_SetInputMode) == 0x000001, "Wrong alignment on W_Spinbox_C_SetInputMode");
static_assert(sizeof(W_Spinbox_C_SetInputMode) == 0x000001, "Wrong size on W_Spinbox_C_SetInputMode");
static_assert(offsetof(W_Spinbox_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_Spinbox_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.SetMaxSliderValue
// 0x0010 (0x0010 - 0x0000)
struct W_Spinbox_C_SetMaxSliderValue final
{
public:
	double                                        NewValue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMaxSliderValue_NewValue_ImplicitCast;  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_SetMaxSliderValue) == 0x000008, "Wrong alignment on W_Spinbox_C_SetMaxSliderValue");
static_assert(sizeof(W_Spinbox_C_SetMaxSliderValue) == 0x000010, "Wrong size on W_Spinbox_C_SetMaxSliderValue");
static_assert(offsetof(W_Spinbox_C_SetMaxSliderValue, NewValue) == 0x000000, "Member 'W_Spinbox_C_SetMaxSliderValue::NewValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_SetMaxSliderValue, CallFunc_SetMaxSliderValue_NewValue_ImplicitCast) == 0x000008, "Member 'W_Spinbox_C_SetMaxSliderValue::CallFunc_SetMaxSliderValue_NewValue_ImplicitCast' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.SetMaxValue
// 0x0010 (0x0010 - 0x0000)
struct W_Spinbox_C_SetMaxValue final
{
public:
	double                                        NewValue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMaxValue_NewValue_ImplicitCast;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_SetMaxValue) == 0x000008, "Wrong alignment on W_Spinbox_C_SetMaxValue");
static_assert(sizeof(W_Spinbox_C_SetMaxValue) == 0x000010, "Wrong size on W_Spinbox_C_SetMaxValue");
static_assert(offsetof(W_Spinbox_C_SetMaxValue, NewValue) == 0x000000, "Member 'W_Spinbox_C_SetMaxValue::NewValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_SetMaxValue, CallFunc_SetMaxValue_NewValue_ImplicitCast) == 0x000008, "Member 'W_Spinbox_C_SetMaxValue::CallFunc_SetMaxValue_NewValue_ImplicitCast' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.SetMinSliderValue
// 0x0010 (0x0010 - 0x0000)
struct W_Spinbox_C_SetMinSliderValue final
{
public:
	double                                        NewValue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMinSliderValue_NewValue_ImplicitCast;  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_SetMinSliderValue) == 0x000008, "Wrong alignment on W_Spinbox_C_SetMinSliderValue");
static_assert(sizeof(W_Spinbox_C_SetMinSliderValue) == 0x000010, "Wrong size on W_Spinbox_C_SetMinSliderValue");
static_assert(offsetof(W_Spinbox_C_SetMinSliderValue, NewValue) == 0x000000, "Member 'W_Spinbox_C_SetMinSliderValue::NewValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_SetMinSliderValue, CallFunc_SetMinSliderValue_NewValue_ImplicitCast) == 0x000008, "Member 'W_Spinbox_C_SetMinSliderValue::CallFunc_SetMinSliderValue_NewValue_ImplicitCast' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.SetMinValue
// 0x0010 (0x0010 - 0x0000)
struct W_Spinbox_C_SetMinValue final
{
public:
	double                                        NewValue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMinValue_NewValue_ImplicitCast;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_SetMinValue) == 0x000008, "Wrong alignment on W_Spinbox_C_SetMinValue");
static_assert(sizeof(W_Spinbox_C_SetMinValue) == 0x000010, "Wrong size on W_Spinbox_C_SetMinValue");
static_assert(offsetof(W_Spinbox_C_SetMinValue, NewValue) == 0x000000, "Member 'W_Spinbox_C_SetMinValue::NewValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_SetMinValue, CallFunc_SetMinValue_NewValue_ImplicitCast) == 0x000008, "Member 'W_Spinbox_C_SetMinValue::CallFunc_SetMinValue_NewValue_ImplicitCast' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.SetValue
// 0x0030 (0x0030 - 0x0000)
struct W_Spinbox_C_SetValue final
{
public:
	double                                        Value_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NormalizeToRange_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue;            // 0x0010(0x0018)()
	float                                         CallFunc_SetValue_NewValue_ImplicitCast;           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetPercent_InPercent_ImplicitCast;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_SetValue) == 0x000008, "Wrong alignment on W_Spinbox_C_SetValue");
static_assert(sizeof(W_Spinbox_C_SetValue) == 0x000030, "Wrong size on W_Spinbox_C_SetValue");
static_assert(offsetof(W_Spinbox_C_SetValue, Value_0) == 0x000000, "Member 'W_Spinbox_C_SetValue::Value_0' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_SetValue, CallFunc_NormalizeToRange_ReturnValue) == 0x000008, "Member 'W_Spinbox_C_SetValue::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_SetValue, CallFunc_Conv_DoubleToText_ReturnValue) == 0x000010, "Member 'W_Spinbox_C_SetValue::CallFunc_Conv_DoubleToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_SetValue, CallFunc_SetValue_NewValue_ImplicitCast) == 0x000028, "Member 'W_Spinbox_C_SetValue::CallFunc_SetValue_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_SetValue, CallFunc_SetPercent_InPercent_ImplicitCast) == 0x00002C, "Member 'W_Spinbox_C_SetValue::CallFunc_SetPercent_InPercent_ImplicitCast' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.UpdateInputStyle
// 0x0009 (0x0009 - 0x0000)
struct W_Spinbox_C_UpdateInputStyle final
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_UpdateInputStyle) == 0x000001, "Wrong alignment on W_Spinbox_C_UpdateInputStyle");
static_assert(sizeof(W_Spinbox_C_UpdateInputStyle) == 0x000009, "Wrong size on W_Spinbox_C_UpdateInputStyle");
static_assert(offsetof(W_Spinbox_C_UpdateInputStyle, IsGamepad) == 0x000000, "Member 'W_Spinbox_C_UpdateInputStyle::IsGamepad' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_UpdateInputStyle, Temp_bool_Variable) == 0x000001, "Member 'W_Spinbox_C_UpdateInputStyle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_UpdateInputStyle, Temp_byte_Variable) == 0x000002, "Member 'W_Spinbox_C_UpdateInputStyle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_UpdateInputStyle, Temp_byte_Variable_1) == 0x000003, "Member 'W_Spinbox_C_UpdateInputStyle::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_UpdateInputStyle, Temp_bool_Variable_1) == 0x000004, "Member 'W_Spinbox_C_UpdateInputStyle::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_UpdateInputStyle, Temp_byte_Variable_2) == 0x000005, "Member 'W_Spinbox_C_UpdateInputStyle::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_UpdateInputStyle, Temp_byte_Variable_3) == 0x000006, "Member 'W_Spinbox_C_UpdateInputStyle::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_UpdateInputStyle, K2Node_Select_Default) == 0x000007, "Member 'W_Spinbox_C_UpdateInputStyle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_UpdateInputStyle, K2Node_Select_Default_1) == 0x000008, "Member 'W_Spinbox_C_UpdateInputStyle::K2Node_Select_Default_1' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.UpdateResetButton
// 0x0020 (0x0020 - 0x0000)
struct W_Spinbox_C_UpdateResetButton final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValueDirty_IsDirty;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonButtonStyle>         K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_UpdateResetButton) == 0x000008, "Wrong alignment on W_Spinbox_C_UpdateResetButton");
static_assert(sizeof(W_Spinbox_C_UpdateResetButton) == 0x000020, "Wrong size on W_Spinbox_C_UpdateResetButton");
static_assert(offsetof(W_Spinbox_C_UpdateResetButton, Temp_bool_Variable) == 0x000000, "Member 'W_Spinbox_C_UpdateResetButton::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_UpdateResetButton, CallFunc_IsValueDirty_IsDirty) == 0x000001, "Member 'W_Spinbox_C_UpdateResetButton::CallFunc_IsValueDirty_IsDirty' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_UpdateResetButton, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'W_Spinbox_C_UpdateResetButton::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_UpdateResetButton, K2Node_Select_Default) == 0x000008, "Member 'W_Spinbox_C_UpdateResetButton::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_UpdateResetButton, CallFunc_SelectColor_ReturnValue) == 0x000010, "Member 'W_Spinbox_C_UpdateResetButton::CallFunc_SelectColor_ReturnValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.UpdateValue
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_UpdateValue final
{
public:
	double                                        Value_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_UpdateValue) == 0x000008, "Wrong alignment on W_Spinbox_C_UpdateValue");
static_assert(sizeof(W_Spinbox_C_UpdateValue) == 0x000008, "Wrong size on W_Spinbox_C_UpdateValue");
static_assert(offsetof(W_Spinbox_C_UpdateValue, Value_0) == 0x000000, "Member 'W_Spinbox_C_UpdateValue::Value_0' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.GetFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_GetFocusTarget final
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_Spinbox_C_GetFocusTarget");
static_assert(sizeof(W_Spinbox_C_GetFocusTarget) == 0x000008, "Wrong size on W_Spinbox_C_GetFocusTarget");
static_assert(offsetof(W_Spinbox_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_Spinbox_C_GetFocusTarget::Focus' has a wrong offset!");

}

