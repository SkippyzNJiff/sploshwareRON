#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Briefing_Media_AudioEntry

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_Briefing_Media_AudioEntry.W_Briefing_Media_AudioEntry_C.ExecuteUbergraph_W_Briefing_Media_AudioEntry
// 0x0018 (0x0018 - 0x0000)
struct W_Briefing_Media_AudioEntry_C_ExecuteUbergraph_W_Briefing_Media_AudioEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x0004(0x0008)(NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            K2Node_Event_InFocusEvent_1;                       // 0x0010(0x0008)(NoDestructor)
};
static_assert(alignof(W_Briefing_Media_AudioEntry_C_ExecuteUbergraph_W_Briefing_Media_AudioEntry) == 0x000004, "Wrong alignment on W_Briefing_Media_AudioEntry_C_ExecuteUbergraph_W_Briefing_Media_AudioEntry");
static_assert(sizeof(W_Briefing_Media_AudioEntry_C_ExecuteUbergraph_W_Briefing_Media_AudioEntry) == 0x000018, "Wrong size on W_Briefing_Media_AudioEntry_C_ExecuteUbergraph_W_Briefing_Media_AudioEntry");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_ExecuteUbergraph_W_Briefing_Media_AudioEntry, EntryPoint) == 0x000000, "Member 'W_Briefing_Media_AudioEntry_C_ExecuteUbergraph_W_Briefing_Media_AudioEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_ExecuteUbergraph_W_Briefing_Media_AudioEntry, K2Node_Event_InFocusEvent) == 0x000004, "Member 'W_Briefing_Media_AudioEntry_C_ExecuteUbergraph_W_Briefing_Media_AudioEntry::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_ExecuteUbergraph_W_Briefing_Media_AudioEntry, K2Node_Event_IsDesignTime) == 0x00000C, "Member 'W_Briefing_Media_AudioEntry_C_ExecuteUbergraph_W_Briefing_Media_AudioEntry::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_ExecuteUbergraph_W_Briefing_Media_AudioEntry, K2Node_Event_InFocusEvent_1) == 0x000010, "Member 'W_Briefing_Media_AudioEntry_C_ExecuteUbergraph_W_Briefing_Media_AudioEntry::K2Node_Event_InFocusEvent_1' has a wrong offset!");

// Function W_Briefing_Media_AudioEntry.W_Briefing_Media_AudioEntry_C.GetIconColor
// 0x0114 (0x0114 - 0x0000)
struct W_Briefing_Media_AudioEntry_C_GetIconColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor;               // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor;                // 0x0020(0x0014)()
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor_1;             // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor_1;              // 0x0044(0x0014)()
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor_2;             // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor_2;              // 0x0068(0x0014)()
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x007C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_1;                // 0x008C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor_3;             // 0x009C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor_3;              // 0x00AC(0x0014)()
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_2;                // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor_4;             // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor_4;              // 0x00E0(0x0014)()
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_3;                // 0x00F4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_4;                // 0x0104(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Media_AudioEntry_C_GetIconColor) == 0x000004, "Wrong alignment on W_Briefing_Media_AudioEntry_C_GetIconColor");
static_assert(sizeof(W_Briefing_Media_AudioEntry_C_GetIconColor) == 0x000114, "Wrong size on W_Briefing_Media_AudioEntry_C_GetIconColor");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, Color) == 0x000000, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::Color' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_GetColorByName_LinearColor) == 0x000010, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_GetColorByName_LinearColor' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_GetColorByName_SlateColor) == 0x000020, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_GetColorByName_SlateColor' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_GetColorByName_LinearColor_1) == 0x000034, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_GetColorByName_LinearColor_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_GetColorByName_SlateColor_1) == 0x000044, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_GetColorByName_SlateColor_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_GetColorByName_LinearColor_2) == 0x000058, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_GetColorByName_LinearColor_2' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_GetColorByName_SlateColor_2) == 0x000068, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_GetColorByName_SlateColor_2' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_SelectColor_ReturnValue) == 0x00007C, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_SelectColor_ReturnValue_1) == 0x00008C, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_SelectColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_GetColorByName_LinearColor_3) == 0x00009C, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_GetColorByName_LinearColor_3' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_GetColorByName_SlateColor_3) == 0x0000AC, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_GetColorByName_SlateColor_3' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_SelectColor_ReturnValue_2) == 0x0000C0, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_SelectColor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_GetColorByName_LinearColor_4) == 0x0000D0, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_GetColorByName_LinearColor_4' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_GetColorByName_SlateColor_4) == 0x0000E0, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_GetColorByName_SlateColor_4' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_SelectColor_ReturnValue_3) == 0x0000F4, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_SelectColor_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetIconColor, CallFunc_SelectColor_ReturnValue_4) == 0x000104, "Member 'W_Briefing_Media_AudioEntry_C_GetIconColor::CallFunc_SelectColor_ReturnValue_4' has a wrong offset!");

// Function W_Briefing_Media_AudioEntry.W_Briefing_Media_AudioEntry_C.GetTextColor
// 0x011C (0x011C - 0x0000)
struct W_Briefing_Media_AudioEntry_C_GetTextColor final
{
public:
	struct FSlateColor                            Color;                                             // 0x0000(0x0014)(Parm, OutParm)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor;                // 0x0028(0x0014)()
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor_1;             // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor_1;              // 0x004C(0x0014)()
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor_2;             // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor_2;              // 0x0070(0x0014)()
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0084(0x0014)()
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor_3;             // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor_3;              // 0x00A8(0x0014)()
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor_4;             // 0x00BC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor_4;              // 0x00CC(0x0014)()
	struct FSlateColor                            K2Node_Select_Default_1;                           // 0x00E0(0x0014)()
	struct FSlateColor                            K2Node_Select_Default_2;                           // 0x00F4(0x0014)()
	struct FSlateColor                            K2Node_Select_Default_3;                           // 0x0108(0x0014)()
};
static_assert(alignof(W_Briefing_Media_AudioEntry_C_GetTextColor) == 0x000004, "Wrong alignment on W_Briefing_Media_AudioEntry_C_GetTextColor");
static_assert(sizeof(W_Briefing_Media_AudioEntry_C_GetTextColor) == 0x00011C, "Wrong size on W_Briefing_Media_AudioEntry_C_GetTextColor");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, Color) == 0x000000, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::Color' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, Temp_bool_Variable) == 0x000014, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, Temp_bool_Variable_1) == 0x000015, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, Temp_bool_Variable_2) == 0x000016, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, Temp_bool_Variable_3) == 0x000017, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, CallFunc_GetColorByName_LinearColor) == 0x000018, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::CallFunc_GetColorByName_LinearColor' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, CallFunc_GetColorByName_SlateColor) == 0x000028, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::CallFunc_GetColorByName_SlateColor' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, CallFunc_GetColorByName_LinearColor_1) == 0x00003C, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::CallFunc_GetColorByName_LinearColor_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, CallFunc_GetColorByName_SlateColor_1) == 0x00004C, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::CallFunc_GetColorByName_SlateColor_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, CallFunc_GetColorByName_LinearColor_2) == 0x000060, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::CallFunc_GetColorByName_LinearColor_2' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, CallFunc_GetColorByName_SlateColor_2) == 0x000070, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::CallFunc_GetColorByName_SlateColor_2' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, K2Node_Select_Default) == 0x000084, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, CallFunc_GetColorByName_LinearColor_3) == 0x000098, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::CallFunc_GetColorByName_LinearColor_3' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, CallFunc_GetColorByName_SlateColor_3) == 0x0000A8, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::CallFunc_GetColorByName_SlateColor_3' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, CallFunc_GetColorByName_LinearColor_4) == 0x0000BC, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::CallFunc_GetColorByName_LinearColor_4' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, CallFunc_GetColorByName_SlateColor_4) == 0x0000CC, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::CallFunc_GetColorByName_SlateColor_4' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, K2Node_Select_Default_1) == 0x0000E0, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, K2Node_Select_Default_2) == 0x0000F4, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_GetTextColor, K2Node_Select_Default_3) == 0x000108, "Member 'W_Briefing_Media_AudioEntry_C_GetTextColor::K2Node_Select_Default_3' has a wrong offset!");

// Function W_Briefing_Media_AudioEntry.W_Briefing_Media_AudioEntry_C.OnAddedToFocusPath
// 0x0008 (0x0008 - 0x0000)
struct W_Briefing_Media_AudioEntry_C_OnAddedToFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(W_Briefing_Media_AudioEntry_C_OnAddedToFocusPath) == 0x000004, "Wrong alignment on W_Briefing_Media_AudioEntry_C_OnAddedToFocusPath");
static_assert(sizeof(W_Briefing_Media_AudioEntry_C_OnAddedToFocusPath) == 0x000008, "Wrong size on W_Briefing_Media_AudioEntry_C_OnAddedToFocusPath");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_OnAddedToFocusPath, InFocusEvent) == 0x000000, "Member 'W_Briefing_Media_AudioEntry_C_OnAddedToFocusPath::InFocusEvent' has a wrong offset!");

// Function W_Briefing_Media_AudioEntry.W_Briefing_Media_AudioEntry_C.OnRemovedFromFocusPath
// 0x0008 (0x0008 - 0x0000)
struct W_Briefing_Media_AudioEntry_C_OnRemovedFromFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(W_Briefing_Media_AudioEntry_C_OnRemovedFromFocusPath) == 0x000004, "Wrong alignment on W_Briefing_Media_AudioEntry_C_OnRemovedFromFocusPath");
static_assert(sizeof(W_Briefing_Media_AudioEntry_C_OnRemovedFromFocusPath) == 0x000008, "Wrong size on W_Briefing_Media_AudioEntry_C_OnRemovedFromFocusPath");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_OnRemovedFromFocusPath, InFocusEvent) == 0x000000, "Member 'W_Briefing_Media_AudioEntry_C_OnRemovedFromFocusPath::InFocusEvent' has a wrong offset!");

// Function W_Briefing_Media_AudioEntry.W_Briefing_Media_AudioEntry_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_Briefing_Media_AudioEntry_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Media_AudioEntry_C_PreConstruct) == 0x000001, "Wrong alignment on W_Briefing_Media_AudioEntry_C_PreConstruct");
static_assert(sizeof(W_Briefing_Media_AudioEntry_C_PreConstruct) == 0x000001, "Wrong size on W_Briefing_Media_AudioEntry_C_PreConstruct");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_Briefing_Media_AudioEntry_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_Briefing_Media_AudioEntry.W_Briefing_Media_AudioEntry_C.SetHoverState
// 0x0001 (0x0001 - 0x0000)
struct W_Briefing_Media_AudioEntry_C_SetHoverState final
{
public:
	bool                                          Hovered;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Media_AudioEntry_C_SetHoverState) == 0x000001, "Wrong alignment on W_Briefing_Media_AudioEntry_C_SetHoverState");
static_assert(sizeof(W_Briefing_Media_AudioEntry_C_SetHoverState) == 0x000001, "Wrong size on W_Briefing_Media_AudioEntry_C_SetHoverState");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_SetHoverState, Hovered) == 0x000000, "Member 'W_Briefing_Media_AudioEntry_C_SetHoverState::Hovered' has a wrong offset!");

// Function W_Briefing_Media_AudioEntry.W_Briefing_Media_AudioEntry_C.SetIsPlaying
// 0x0018 (0x0018 - 0x0000)
struct W_Briefing_Media_AudioEntry_C_SetIsPlaying final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsNotEmpty_NotEmpty;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Media_AudioEntry_C_SetIsPlaying) == 0x000008, "Wrong alignment on W_Briefing_Media_AudioEntry_C_SetIsPlaying");
static_assert(sizeof(W_Briefing_Media_AudioEntry_C_SetIsPlaying) == 0x000018, "Wrong size on W_Briefing_Media_AudioEntry_C_SetIsPlaying");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_SetIsPlaying, IsPlaying) == 0x000000, "Member 'W_Briefing_Media_AudioEntry_C_SetIsPlaying::IsPlaying' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_SetIsPlaying, Temp_bool_Variable) == 0x000001, "Member 'W_Briefing_Media_AudioEntry_C_SetIsPlaying::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_SetIsPlaying, Temp_byte_Variable) == 0x000002, "Member 'W_Briefing_Media_AudioEntry_C_SetIsPlaying::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_SetIsPlaying, Temp_byte_Variable_1) == 0x000003, "Member 'W_Briefing_Media_AudioEntry_C_SetIsPlaying::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_SetIsPlaying, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'W_Briefing_Media_AudioEntry_C_SetIsPlaying::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_SetIsPlaying, CallFunc_TextIsNotEmpty_NotEmpty) == 0x000010, "Member 'W_Briefing_Media_AudioEntry_C_SetIsPlaying::CallFunc_TextIsNotEmpty_NotEmpty' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_SetIsPlaying, K2Node_Select_Default) == 0x000011, "Member 'W_Briefing_Media_AudioEntry_C_SetIsPlaying::K2Node_Select_Default' has a wrong offset!");

// Function W_Briefing_Media_AudioEntry.W_Briefing_Media_AudioEntry_C.SetPressedState
// 0x0001 (0x0001 - 0x0000)
struct W_Briefing_Media_AudioEntry_C_SetPressedState final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Media_AudioEntry_C_SetPressedState) == 0x000001, "Wrong alignment on W_Briefing_Media_AudioEntry_C_SetPressedState");
static_assert(sizeof(W_Briefing_Media_AudioEntry_C_SetPressedState) == 0x000001, "Wrong size on W_Briefing_Media_AudioEntry_C_SetPressedState");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_SetPressedState, Pressed) == 0x000000, "Member 'W_Briefing_Media_AudioEntry_C_SetPressedState::Pressed' has a wrong offset!");

// Function W_Briefing_Media_AudioEntry.W_Briefing_Media_AudioEntry_C.UpdateVisualState
// 0x0028 (0x0028 - 0x0000)
struct W_Briefing_Media_AudioEntry_C_UpdateVisualState final
{
public:
	bool                                          Hovered;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Selected;                                          // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Playing;                                           // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetIconColor_Color;                       // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetTextColor_Color;                       // 0x0014(0x0014)()
};
static_assert(alignof(W_Briefing_Media_AudioEntry_C_UpdateVisualState) == 0x000004, "Wrong alignment on W_Briefing_Media_AudioEntry_C_UpdateVisualState");
static_assert(sizeof(W_Briefing_Media_AudioEntry_C_UpdateVisualState) == 0x000028, "Wrong size on W_Briefing_Media_AudioEntry_C_UpdateVisualState");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_UpdateVisualState, Hovered) == 0x000000, "Member 'W_Briefing_Media_AudioEntry_C_UpdateVisualState::Hovered' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_UpdateVisualState, Pressed) == 0x000001, "Member 'W_Briefing_Media_AudioEntry_C_UpdateVisualState::Pressed' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_UpdateVisualState, Selected) == 0x000002, "Member 'W_Briefing_Media_AudioEntry_C_UpdateVisualState::Selected' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_UpdateVisualState, Playing) == 0x000003, "Member 'W_Briefing_Media_AudioEntry_C_UpdateVisualState::Playing' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_UpdateVisualState, CallFunc_GetIconColor_Color) == 0x000004, "Member 'W_Briefing_Media_AudioEntry_C_UpdateVisualState::CallFunc_GetIconColor_Color' has a wrong offset!");
static_assert(offsetof(W_Briefing_Media_AudioEntry_C_UpdateVisualState, CallFunc_GetTextColor_Color) == 0x000014, "Member 'W_Briefing_Media_AudioEntry_C_UpdateVisualState::CallFunc_GetTextColor_Color' has a wrong offset!");

}

