#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Stats_List

#include "Basic.hpp"

#include "ReadyOrNot_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Stats_List.W_Stats_List_C
// 0x0370 (0x0658 - 0x02E8)
class UW_Stats_List_C final : public UStatViewerWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UGridPanel*                             GP_Design;                                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridPanel*                             GP_StatList;                                       // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_div;                                           // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               LabelAndDifference;                                // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       lbl_StatName;                                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_CompareDiff;                                   // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_Value;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_Value_Compare;                                 // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         RowCount;                                          // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCompare;                                          // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_335[0x3];                                      // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class UCommonTextBlock*>  ValueMap;                                          // 0x0338(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class FString, class UCommonTextBlock*>  DiffMap;                                           // 0x0388(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class FString, class UCommonTextBlock*>  LabelMap;                                          // 0x03D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class FString, class UCommonTextBlock*>  CompareValueMap;                                   // 0x0428(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Is_Design_Time;                                    // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFriend                                CompareFriend;                                     // 0x0480(0x01C8)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UCommonTextBlock*>               TimeStats;                                         // 0x0648(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void AddDiv();
	void BackPage(bool* Handled);
	void CancelCompare();
	void ChangePage(class FName PageName);
	void CompareStats();
	void CompareWithFriend(const struct FFriend& Friend);
	void Construct();
	void CopyTextObject(class UCommonTextBlock* CommonTextToCopy, class UCommonTextBlock** NewCommonTextBlock);
	void CreateComparisonValueEntry(const struct FDataTableRowHandle& StatRowHandle, int32 InRow, int32 InColumn, class UCommonTextBlock** ValueTextWidget);
	void CreateLabel(const struct FDataTableRowHandle& StatRowHandle, int32 Row, int32 Column, class UOverlay** LabelOverlay);
	void CreateValueEntry(const struct FDataTableRowHandle& StatRowHandle, int32 InRow, int32 InColumn, class UCommonTextBlock** ValueTextWidget);
	void ExecuteUbergraph_W_Stats_List(int32 EntryPoint);
	void FormatPlaytime(int64 Time__in_seconds_, class FText* Result);
	void Hide(double Delay, bool Collapse);
	void OnInitialized();
	void OnStatChanged(const class FString& StatID);
	void PopulateStats();
	void PreConstruct(bool IsDesignTime);
	void Reveal(double Delay);
	void SetInputMode(bool IsGamepad);
	void StatsLoaded();
	void UpdateCompareValueEntry(const class FString& StatID);
	void UpdateValueEntry(const class FString& StatID);

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Stats_List_C">();
	}
	static class UW_Stats_List_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Stats_List_C>();
	}
};
static_assert(alignof(UW_Stats_List_C) == 0x000008, "Wrong alignment on UW_Stats_List_C");
static_assert(sizeof(UW_Stats_List_C) == 0x000658, "Wrong size on UW_Stats_List_C");
static_assert(offsetof(UW_Stats_List_C, UberGraphFrame) == 0x0002E8, "Member 'UW_Stats_List_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, GP_Design) == 0x0002F0, "Member 'UW_Stats_List_C::GP_Design' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, GP_StatList) == 0x0002F8, "Member 'UW_Stats_List_C::GP_StatList' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, img_div) == 0x000300, "Member 'UW_Stats_List_C::img_div' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, LabelAndDifference) == 0x000308, "Member 'UW_Stats_List_C::LabelAndDifference' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, lbl_StatName) == 0x000310, "Member 'UW_Stats_List_C::lbl_StatName' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, txt_CompareDiff) == 0x000318, "Member 'UW_Stats_List_C::txt_CompareDiff' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, txt_Value) == 0x000320, "Member 'UW_Stats_List_C::txt_Value' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, txt_Value_Compare) == 0x000328, "Member 'UW_Stats_List_C::txt_Value_Compare' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, RowCount) == 0x000330, "Member 'UW_Stats_List_C::RowCount' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, bCompare) == 0x000334, "Member 'UW_Stats_List_C::bCompare' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, ValueMap) == 0x000338, "Member 'UW_Stats_List_C::ValueMap' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, DiffMap) == 0x000388, "Member 'UW_Stats_List_C::DiffMap' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, LabelMap) == 0x0003D8, "Member 'UW_Stats_List_C::LabelMap' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, CompareValueMap) == 0x000428, "Member 'UW_Stats_List_C::CompareValueMap' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, Is_Design_Time) == 0x000478, "Member 'UW_Stats_List_C::Is_Design_Time' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, CompareFriend) == 0x000480, "Member 'UW_Stats_List_C::CompareFriend' has a wrong offset!");
static_assert(offsetof(UW_Stats_List_C, TimeStats) == 0x000648, "Member 'UW_Stats_List_C::TimeStats' has a wrong offset!");

}

