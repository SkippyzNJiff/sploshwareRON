#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_WeaponWheel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_WeaponWheel.W_WeaponWheel_C
// 0x01F8 (0x0690 - 0x0498)
class UW_WeaponWheel_C final : public UWeaponWheelWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0498(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBackgroundBlur*                        BackgroundBlur;                                    // 0x04A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         Controls_Container;                                // 0x04A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_DebugInfoContainer_C*                DebugInfoContainer_Items;                          // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_DebugInfoContainer_C*                DebugInfoContainer_Logic;                          // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_DebugInfoContainer_C*                DebugInfoContainer_Settings;                       // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_250;                                         // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               TestSmoothCursor;                                  // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             WeaponStat_Category_Text;                          // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             WeaponStat_ItemName_Text;                          // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WeaponWheel_Background;                            // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WeaponWheel_InnerBorder;                           // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           WeaponWheel_ItemInfo_Container;                    // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           WeaponWheel_ItemStats_Container;                   // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_WeaponWheel_MultiItem_Selection_C*   WeaponWheel_MultiItem_Selection;                   // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WeaponWheel_OuterBorder;                           // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           WeaponWheelArea;                                   // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMap<class FName, class UW_WeaponWheel_RadialSelection_C*> WheelCategoryToRadialSelectionWidget; // 0x0520(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UW_WeaponWheel_ItemStat_C*>      ItemStats;                                         // 0x0570(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UW_WeaponWheel_RadialSelection_C*> WeaponWheelCategories;                           // 0x0580(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class ABaseItem*>                      ItemCategories;                                    // 0x0590(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	EEasingFunc                                   StatGrowthEffect;                                  // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_5A1[0x7];                                      // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StatGrowthSpeed;                                   // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         CategoryTextFontSize;                              // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         ItemTextFontSize;                                  // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class ABaseItem*>                      Primary_Weapons;                                   // 0x05B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	TArray<class ABaseItem*>                      Secondary_Weapons;                                 // 0x05C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	TArray<class ABaseItem*>                      Grenades;                                          // 0x05D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	TArray<class ABaseItem*>                      Assistants;                                        // 0x05E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	TArray<class ABaseItem*>                      Tactical_Devices;                                  // 0x05F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	TArray<class ABaseItem*>                      TabletDevices;                                     // 0x0608(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	class UW_WeaponWheel_RadialSelection_C*       CurrentSelectedRadialWidget;                       // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_WeaponWheel_RadialSelection_C*       PreviousSelectedRadialWidget;                      // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 Category_Index, class FName Category_Name)> CategoryDeselected; // 0x0628(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 Category_Index, class FName Category_Name)> CategorySelected; // 0x0638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 Category_Index, class FName Category_Name, int32 Item_Index, class FName Item_Name)> ItemSelected; // 0x0648(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 Category_Index, class FName Category_Name, int32 Item_Index, class FName Item_Name)> ItemDeselected; // 0x0658(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         MaxItemStats;                                      // 0x0668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66C[0x4];                                      // 0x066C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         ItemExecutables;                                   // 0x0670(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<class UWeaponWheelScript*>             ItemExecutableScripts;                             // 0x0680(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AddAssistants(const class ABaseItem*& Assistants_0);
	void AddExecutableItemToCategory(class UClass* NewWeaponWheelScript, const int32 AtIndex);
	void AddGrenade(const class ABaseItem*& GrenadeItem);
	void AddItemToCategory(const class ABaseItem*& Item, const class FName Wheel_Category);
	void AddPrimaryWeapon(class ABaseItem* PrimaryWeaponItem);
	void AddSecondaryWeapon(const class ABaseItem*& SecondayWeaponItem);
	void AddTabletDevice(const class ABaseItem*& TabletDevice_Item);
	void AddTactical_Device(const class ABaseItem*& Tactical_Device_Item);
	void ClearStats();
	void Construct();
	void CreateWheelCategory(int32 Index_0, class FName Category_Name, class UCanvasPanelSlot** Canvas_Panel_Slot);
	void CreateWheelStat(class UClass* ItemStatClass, double FillSpeed, EEasingFunc EasingFunction, const struct FItemLookupTable& LookupTable, class UW_WeaponWheel_ItemStat_C** ItemStatWidget);
	bool ExecuteRadial();
	void ExecuteUbergraph_W_WeaponWheel(int32 EntryPoint);
	void FindDataTableRowNameFromItemName(class FName ItemName, class FName* RowName);
	bool HideWheel();
	bool IsWheelCursorVisible();
	void MoveItemToAnotherCategory(class ABaseItem* Item, class FName ToCategory, int32 NewIndexInCategory);
	void MoveItemToAnotherCategory__Index_(int32 ItemIndex, class FName FromCategory, class FName ToCategory, int32 NewIndexInCategory);
	void MoveItemToBack(class ABaseItem* Item);
	void MoveItemToBack__Index_(int32 ItemIndex, class FName CategoryName);
	void MoveItemToFront(class ABaseItem* Item);
	void MoveItemToFront__Index_(int32 ItemIndex, class FName CategoryName);
	void MoveItemToNewSpot(class ABaseItem* Item, int32 NewIndex);
	void MoveItemToNewSpot__Index_(int32 ItemIndex, class FName CategoryName, int32 NewIndex);
	void NextItem();
	void NotifyAllCategoriesOnWheelCreated();
	void NotifyAllStatsOnWheelCreated();
	void OnItemDeselected();
	void OnItemSelcted(bool Play_Animation);
	void OnRadialMenuCreated();
	bool OnRadialMenuInitialized();
	bool OnRadialSectorCreated(int32 Index_0, float InAngle);
	void OnSectorDeselected(int32 DeselectedIndex);
	void OnSectorSelected(int32 SelectedIndex);
	void PlaceWidgetInWheel(class UCanvasPanelSlot*& Canvas_Slot, const struct FVector2D& Positionn);
	void PopulateAllCategories();
	void PopulateCategory(TArray<class ABaseItem*>& Items, class FName Category_Name_);
	void PreConstruct(bool IsDesignTime);
	void PreviousItem();
	void RefreshCategory(TArray<class ABaseItem*>& New_Category_Items, TArray<class UWeaponWheelScript*>& NewWeaponWheelScripts, class FName Category_Name, int32 StartingItemIndex);
	void RefreshMultiItemWidget();
	void RefreshStats(TArray<class UClass*>& ItemStats_0, const struct FItemLookupTable& ItemDataTable);
	void RemoveAssistant(class ABaseItem* AssistantItem);
	void RemoveExecutableItemFromCategory(class UClass* NewWeaponWheelScript, const int32 AtIndex);
	void RemoveGrenade(class ABaseItem* GrenadeItem);
	void RemoveItemFromCategory(const class ABaseItem*& Item, const class FName Wheel_Category);
	bool RemoveNullItemsFromAllCategories();
	bool RemoveNullItemsFromCategory(const class FName& WeaponWheelCategoryName);
	void RemovePrimaryWeapon(class ABaseItem* PrimaryWeaponItem);
	void RemoveSecondaryWeapon(class ABaseItem* SecondaryWeaponItem);
	void RemoveTabletDevice(class ABaseItem* TabletDeviceItem);
	void RemoveTactical_Devices(class ABaseItem* DoorDeviceItem);
	void SelectItem(class UW_WeaponWheel_RadialSelection_C* ItemToSelect, bool Play_Animation, bool Play_Sound, bool Refresh_Stats, bool* bSuccess);
	bool ShowWheel();
	void ShuffleItemsInCategory(const class FName CategoryName);
	void StatEnumToName(uint8 Item_Stat, class FName* Stat_Name);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateAssistants(TArray<class ABaseItem*>& NewAssistants, int32 StartingItemIndex);
	void UpdateDebugInformation();
	void UpdateGrenades(TArray<class ABaseItem*>& NewGrenades, int32 StartingItemIndex);
	void UpdatePrimaryWeapons(TArray<class ABaseItem*>& New_Primary_Weapons, int32 StartingItemIndex);
	void UpdateSecondaryWeapons(TArray<class ABaseItem*>& NewSecondaryWeapons, int32 StartingItemIndex);
	void UpdateTabletDevices(TArray<class ABaseItem*>& NewTabletDevices, int32 StartingItemIndex);
	void UpdateTacticalDevices(TArray<class ABaseItem*>& NewDoorDevices, int32 StartingItemIndex);

	void GetCurrentICategorytemCount(int32* Return_Value) const;
	void GetCurrentItemSelectionIndex(int32* Return_Value) const;
	void IsItemAtBack(class ABaseItem* Item, bool* Return_Value) const;
	void IsItemAtFront(class ABaseItem* Item, bool* Return_Value) const;
	void IsItemAtIndex(class ABaseItem* Item, int32 Index_0, bool* Return_Value) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_WeaponWheel_C">();
	}
	static class UW_WeaponWheel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_WeaponWheel_C>();
	}
};
static_assert(alignof(UW_WeaponWheel_C) == 0x000008, "Wrong alignment on UW_WeaponWheel_C");
static_assert(sizeof(UW_WeaponWheel_C) == 0x000690, "Wrong size on UW_WeaponWheel_C");
static_assert(offsetof(UW_WeaponWheel_C, UberGraphFrame) == 0x000498, "Member 'UW_WeaponWheel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, BackgroundBlur) == 0x0004A0, "Member 'UW_WeaponWheel_C::BackgroundBlur' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, Controls_Container) == 0x0004A8, "Member 'UW_WeaponWheel_C::Controls_Container' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, DebugInfoContainer_Items) == 0x0004B0, "Member 'UW_WeaponWheel_C::DebugInfoContainer_Items' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, DebugInfoContainer_Logic) == 0x0004B8, "Member 'UW_WeaponWheel_C::DebugInfoContainer_Logic' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, DebugInfoContainer_Settings) == 0x0004C0, "Member 'UW_WeaponWheel_C::DebugInfoContainer_Settings' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, Image_250) == 0x0004C8, "Member 'UW_WeaponWheel_C::Image_250' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, TestSmoothCursor) == 0x0004D0, "Member 'UW_WeaponWheel_C::TestSmoothCursor' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, WeaponStat_Category_Text) == 0x0004D8, "Member 'UW_WeaponWheel_C::WeaponStat_Category_Text' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, WeaponStat_ItemName_Text) == 0x0004E0, "Member 'UW_WeaponWheel_C::WeaponStat_ItemName_Text' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, WeaponWheel_Background) == 0x0004E8, "Member 'UW_WeaponWheel_C::WeaponWheel_Background' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, WeaponWheel_InnerBorder) == 0x0004F0, "Member 'UW_WeaponWheel_C::WeaponWheel_InnerBorder' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, WeaponWheel_ItemInfo_Container) == 0x0004F8, "Member 'UW_WeaponWheel_C::WeaponWheel_ItemInfo_Container' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, WeaponWheel_ItemStats_Container) == 0x000500, "Member 'UW_WeaponWheel_C::WeaponWheel_ItemStats_Container' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, WeaponWheel_MultiItem_Selection) == 0x000508, "Member 'UW_WeaponWheel_C::WeaponWheel_MultiItem_Selection' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, WeaponWheel_OuterBorder) == 0x000510, "Member 'UW_WeaponWheel_C::WeaponWheel_OuterBorder' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, WeaponWheelArea) == 0x000518, "Member 'UW_WeaponWheel_C::WeaponWheelArea' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, WheelCategoryToRadialSelectionWidget) == 0x000520, "Member 'UW_WeaponWheel_C::WheelCategoryToRadialSelectionWidget' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, ItemStats) == 0x000570, "Member 'UW_WeaponWheel_C::ItemStats' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, WeaponWheelCategories) == 0x000580, "Member 'UW_WeaponWheel_C::WeaponWheelCategories' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, ItemCategories) == 0x000590, "Member 'UW_WeaponWheel_C::ItemCategories' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, StatGrowthEffect) == 0x0005A0, "Member 'UW_WeaponWheel_C::StatGrowthEffect' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, StatGrowthSpeed) == 0x0005A8, "Member 'UW_WeaponWheel_C::StatGrowthSpeed' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, CategoryTextFontSize) == 0x0005B0, "Member 'UW_WeaponWheel_C::CategoryTextFontSize' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, ItemTextFontSize) == 0x0005B4, "Member 'UW_WeaponWheel_C::ItemTextFontSize' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, Primary_Weapons) == 0x0005B8, "Member 'UW_WeaponWheel_C::Primary_Weapons' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, Secondary_Weapons) == 0x0005C8, "Member 'UW_WeaponWheel_C::Secondary_Weapons' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, Grenades) == 0x0005D8, "Member 'UW_WeaponWheel_C::Grenades' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, Assistants) == 0x0005E8, "Member 'UW_WeaponWheel_C::Assistants' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, Tactical_Devices) == 0x0005F8, "Member 'UW_WeaponWheel_C::Tactical_Devices' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, TabletDevices) == 0x000608, "Member 'UW_WeaponWheel_C::TabletDevices' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, CurrentSelectedRadialWidget) == 0x000618, "Member 'UW_WeaponWheel_C::CurrentSelectedRadialWidget' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, PreviousSelectedRadialWidget) == 0x000620, "Member 'UW_WeaponWheel_C::PreviousSelectedRadialWidget' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, CategoryDeselected) == 0x000628, "Member 'UW_WeaponWheel_C::CategoryDeselected' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, CategorySelected) == 0x000638, "Member 'UW_WeaponWheel_C::CategorySelected' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, ItemSelected) == 0x000648, "Member 'UW_WeaponWheel_C::ItemSelected' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, ItemDeselected) == 0x000658, "Member 'UW_WeaponWheel_C::ItemDeselected' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, MaxItemStats) == 0x000668, "Member 'UW_WeaponWheel_C::MaxItemStats' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, ItemExecutables) == 0x000670, "Member 'UW_WeaponWheel_C::ItemExecutables' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_C, ItemExecutableScripts) == 0x000680, "Member 'UW_WeaponWheel_C::ItemExecutableScripts' has a wrong offset!");

}

