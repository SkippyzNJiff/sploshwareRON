#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_MissionScore_Progress

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "FMODStudio_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_MissionScore_Progress.W_MissionScore_Progress_C
// 0x0170 (0x0430 - 0x02C0)
class UW_MissionScore_Progress_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       GradeReveal;                                       // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Fade;                                              // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ProgressMeter;                                     // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_DEBUG;                                         // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_DEBUG_1;                                       // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_DEBUG_2;                                       // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_DifficultyName;                                // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Grade;                                         // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_PlusMinus;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Score;                                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Unresolved;                                    // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_DEBUG;                                          // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        HighScore;                                         // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScorePercent;                                      // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Grades;                                            // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        Score;                                             // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ProgressDynMat;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 Grade;                                             // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UW_MissionScore_ScorePanel_C*           ScorePanel;                                        // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UW_MissionScore_ScorePanel_C*           PenaltyPanel;                                      // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FScoreGroup                            ScoreData;                                         // 0x0378(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FScorePenaltyData                      PenaltyData;                                       // 0x03B0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CurrentScore;                                      // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetScore;                                       // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxScore;                                          // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AddingScore;                                       // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Failed;                                            // 0x03DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Penalty;                                           // 0x03DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DF[0x1];                                      // 0x03DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AnimTime;                                          // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimDuration;                                      // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimProgress;                                      // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DEBUG_COUNT;                                       // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          playingSound;                                      // 0x03FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FD[0x3];                                      // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             PenaltyCount;                                      // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             scoreCount;                                        // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             scoreGrade;                                        // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     countEvent;                                        // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TMulticastInlineDelegate<void()>              OnGradeRevealed;                                   // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AddToScore();
	void Construct();
	void Destruct();
	void ExecuteUbergraph_W_MissionScore_Progress(int32 EntryPoint);
	void Finished_FBB0C8E14C37FCFA6D2B82B609745084();
	void gradeSound();
	void PreConstruct(bool IsDesignTime);
	void RevealGrade(const class FString& Grade_0, bool bUnresolved);
	void SequenceEvent__ENTRYPOINTW_MissionScore_Progress();
	void SetDebug(const class FText& DebugText1, const class FText& DebugText2, const class FText& DebugText3);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdatePenalty(const struct FScorePenaltyData& PenaltyData_0);
	void UpdateProgressMeter(int32 CurrentScore_0);
	void UpdateScore(const struct FScoreGroup& ScoreData_0);
	void UpdateSound();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_MissionScore_Progress_C">();
	}
	static class UW_MissionScore_Progress_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_MissionScore_Progress_C>();
	}
};
static_assert(alignof(UW_MissionScore_Progress_C) == 0x000008, "Wrong alignment on UW_MissionScore_Progress_C");
static_assert(sizeof(UW_MissionScore_Progress_C) == 0x000430, "Wrong size on UW_MissionScore_Progress_C");
static_assert(offsetof(UW_MissionScore_Progress_C, UberGraphFrame) == 0x0002C0, "Member 'UW_MissionScore_Progress_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, GradeReveal) == 0x0002C8, "Member 'UW_MissionScore_Progress_C::GradeReveal' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, Fade) == 0x0002D0, "Member 'UW_MissionScore_Progress_C::Fade' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, ProgressMeter) == 0x0002D8, "Member 'UW_MissionScore_Progress_C::ProgressMeter' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, txt_DEBUG) == 0x0002E0, "Member 'UW_MissionScore_Progress_C::txt_DEBUG' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, txt_DEBUG_1) == 0x0002E8, "Member 'UW_MissionScore_Progress_C::txt_DEBUG_1' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, txt_DEBUG_2) == 0x0002F0, "Member 'UW_MissionScore_Progress_C::txt_DEBUG_2' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, txt_DifficultyName) == 0x0002F8, "Member 'UW_MissionScore_Progress_C::txt_DifficultyName' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, txt_Grade) == 0x000300, "Member 'UW_MissionScore_Progress_C::txt_Grade' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, txt_PlusMinus) == 0x000308, "Member 'UW_MissionScore_Progress_C::txt_PlusMinus' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, txt_Score) == 0x000310, "Member 'UW_MissionScore_Progress_C::txt_Score' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, txt_Unresolved) == 0x000318, "Member 'UW_MissionScore_Progress_C::txt_Unresolved' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, VB_DEBUG) == 0x000320, "Member 'UW_MissionScore_Progress_C::VB_DEBUG' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, HighScore) == 0x000328, "Member 'UW_MissionScore_Progress_C::HighScore' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, ScorePercent) == 0x000330, "Member 'UW_MissionScore_Progress_C::ScorePercent' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, Grades) == 0x000338, "Member 'UW_MissionScore_Progress_C::Grades' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, Score) == 0x000348, "Member 'UW_MissionScore_Progress_C::Score' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, ProgressDynMat) == 0x000350, "Member 'UW_MissionScore_Progress_C::ProgressDynMat' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, Grade) == 0x000358, "Member 'UW_MissionScore_Progress_C::Grade' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, ScorePanel) == 0x000368, "Member 'UW_MissionScore_Progress_C::ScorePanel' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, PenaltyPanel) == 0x000370, "Member 'UW_MissionScore_Progress_C::PenaltyPanel' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, ScoreData) == 0x000378, "Member 'UW_MissionScore_Progress_C::ScoreData' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, PenaltyData) == 0x0003B0, "Member 'UW_MissionScore_Progress_C::PenaltyData' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, CurrentScore) == 0x0003D0, "Member 'UW_MissionScore_Progress_C::CurrentScore' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, TargetScore) == 0x0003D4, "Member 'UW_MissionScore_Progress_C::TargetScore' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, MaxScore) == 0x0003D8, "Member 'UW_MissionScore_Progress_C::MaxScore' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, AddingScore) == 0x0003DC, "Member 'UW_MissionScore_Progress_C::AddingScore' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, Failed) == 0x0003DD, "Member 'UW_MissionScore_Progress_C::Failed' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, Penalty) == 0x0003DE, "Member 'UW_MissionScore_Progress_C::Penalty' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, AnimTime) == 0x0003E0, "Member 'UW_MissionScore_Progress_C::AnimTime' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, AnimDuration) == 0x0003E8, "Member 'UW_MissionScore_Progress_C::AnimDuration' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, AnimProgress) == 0x0003F0, "Member 'UW_MissionScore_Progress_C::AnimProgress' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, DEBUG_COUNT) == 0x0003F8, "Member 'UW_MissionScore_Progress_C::DEBUG_COUNT' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, playingSound) == 0x0003FC, "Member 'UW_MissionScore_Progress_C::playingSound' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, PenaltyCount) == 0x000400, "Member 'UW_MissionScore_Progress_C::PenaltyCount' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, scoreCount) == 0x000408, "Member 'UW_MissionScore_Progress_C::scoreCount' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, scoreGrade) == 0x000410, "Member 'UW_MissionScore_Progress_C::scoreGrade' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, countEvent) == 0x000418, "Member 'UW_MissionScore_Progress_C::countEvent' has a wrong offset!");
static_assert(offsetof(UW_MissionScore_Progress_C, OnGradeRevealed) == 0x000420, "Member 'UW_MissionScore_Progress_C::OnGradeRevealed' has a wrong offset!");

}

