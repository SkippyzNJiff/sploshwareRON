#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModioUICore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Modio_structs.hpp"


namespace SDK
{

// Enum ModioUICore.EModioUILoadState
// NumValues: 0x0005
enum class EModioUILoadState : uint8
{
	NotLoaded                                = 0,
	Loading                                  = 1,
	Loaded                                   = 2,
	Errored                                  = 3,
	EModioUILoadState_MAX                    = 4,
};

// Enum ModioUICore.EModioModInstallationStatus
// NumValues: 0x000D
enum class EModioModInstallationStatus : uint8
{
	NotInstalled                             = 0,
	Error                                    = 1,
	Enabled                                  = 2,
	Disabled                                 = 3,
	Purchased                                = 4,
	SystemInstall                            = 5,
	Queued                                   = 6,
	Initializing                             = 7,
	Downloading                              = 8,
	Extracting                               = 9,
	Uploading                                = 10,
	Uploaded                                 = 11,
	EModioModInstallationStatus_MAX          = 12,
};

// Enum ModioUICore.EModioUIDialogType
// NumValues: 0x0006
enum class EModioUIDialogType : uint8
{
	ModDetails                               = 0,
	ReportMod                                = 1,
	EnableDisableManagement                  = 2,
	PurchaseMod                              = 3,
	StoreUi                                  = 4,
	EModioUIDialogType_MAX                   = 5,
};

// Enum ModioUICore.EModioUIMediaDownloadEventType
// NumValues: 0x0004
enum class EModioUIMediaDownloadEventType : uint8
{
	ModGalleryImages                         = 0,
	ModCreatorAvatarImage                    = 1,
	ModLogo                                  = 2,
	EModioUIMediaDownloadEventType_MAX       = 3,
};

// Enum ModioUICore.EModioUIModInfoEventType
// NumValues: 0x0003
enum class EModioUIModInfoEventType : uint8
{
	ListAllMods                              = 0,
	GetModInfo                               = 1,
	EModioUIModInfoEventType_MAX             = 2,
};

// Enum ModioUICore.EModioTextValidationRule
// NumValues: 0x0009
enum class EModioTextValidationRule : uint8
{
	ETVR_ValidateEmailAddress                = 0,
	ETVR_ValidateAllLetters                  = 1,
	ETVR_ValidateAllNumeric                  = 2,
	ETVR_ValidateAlphanumeric                = 3,
	ETVR_ValidateLength                      = 4,
	ETVR_ValidateNotEmpty                    = 5,
	ETVR_ValidateNoWhitespace                = 6,
	ETVR_ValidateNotBlank                    = 7,
	ETVR_MAX                                 = 8,
};

// Enum ModioUICore.EModioUITokenPackEventType
// NumValues: 0x0003
enum class EModioUITokenPackEventType : uint8
{
	ListAllTokenPacks                        = 0,
	GetTokenPack                             = 1,
	EModioUITokenPackEventType_MAX           = 2,
};

// Enum ModioUICore.EModioModBrowserState
// NumValues: 0x0003
enum class EModioModBrowserState : uint8
{
	ModsView                                 = 0,
	LibraryView                              = 1,
	EModioModBrowserState_MAX                = 2,
};

// Enum ModioUICore.EModioUIComponentID
// NumValues: 0x0016
enum class EModioUIComponentID : uint8
{
	Button                                   = 0,
	StaticText                               = 1,
	EditableText                             = 2,
	MultilineEditableText                    = 3,
	CodeInputText                            = 4,
	EnumSelector                             = 5,
	PresetFilterSelector                     = 6,
	ModTile                                  = 7,
	ModalDialog                              = 8,
	Image                                    = 9,
	ProgressWidget                           = 10,
	CheckBox                                 = 11,
	ModList                                  = 12,
	TagDisplay                               = 13,
	ObjectList                               = 14,
	EnumSelectorEntry                        = 15,
	CommandMenu                              = 16,
	FilterSelectorEntry                      = 17,
	ModPropertyCollection                    = 18,
	UserDisplay                              = 19,
	ObjectSelector                           = 20,
	EModioUIComponentID_MAX                  = 21,
};

// Enum ModioUICore.EModioUIFeatureFlags
// NumValues: 0x0004
enum class EModioUIFeatureFlags : uint8
{
	ModEnableDisable                         = 0,
	Monetization                             = 1,
	ModDownvote                              = 2,
	EModioUIFeatureFlags_MAX                 = 3,
};

// ScriptStruct ModioUICore.TextTransformOverride
// 0x0002 (0x0002 - 0x0000)
struct FTextTransformOverride final
{
public:
	bool                                          bOverride;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextTransformPolicy                          Value;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextTransformOverride) == 0x000001, "Wrong alignment on FTextTransformOverride");
static_assert(sizeof(FTextTransformOverride) == 0x000002, "Wrong size on FTextTransformOverride");
static_assert(offsetof(FTextTransformOverride, bOverride) == 0x000000, "Member 'FTextTransformOverride::bOverride' has a wrong offset!");
static_assert(offsetof(FTextTransformOverride, Value) == 0x000001, "Member 'FTextTransformOverride::Value' has a wrong offset!");

// ScriptStruct ModioUICore.ModioDefaultCodeInputTextBoxStyle
// 0x02B0 (0x05F0 - 0x0340)
struct FModioDefaultCodeInputTextBoxStyle final : public FTextBlockStyle
{
public:
	struct FSlateBrush                            CharacterBorderBrushBase;                          // 0x0340(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CharacterBorderBrushFocused;                       // 0x0410(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                CharacterBorderPadding;                            // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            FakeCaretBrush;                                    // 0x04F0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          FakeCaretHorizontalAlignment;                      // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            FakeCaretVerticalAlignment;                        // 0x05C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C2[0x2];                                      // 0x05C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                CharacterPadding;                                  // 0x05C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                CharacterSpacing;                                  // 0x05D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinimumCharacterWidth;                             // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E8[0x8];                                      // 0x05E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioDefaultCodeInputTextBoxStyle) == 0x000010, "Wrong alignment on FModioDefaultCodeInputTextBoxStyle");
static_assert(sizeof(FModioDefaultCodeInputTextBoxStyle) == 0x0005F0, "Wrong size on FModioDefaultCodeInputTextBoxStyle");
static_assert(offsetof(FModioDefaultCodeInputTextBoxStyle, CharacterBorderBrushBase) == 0x000340, "Member 'FModioDefaultCodeInputTextBoxStyle::CharacterBorderBrushBase' has a wrong offset!");
static_assert(offsetof(FModioDefaultCodeInputTextBoxStyle, CharacterBorderBrushFocused) == 0x000410, "Member 'FModioDefaultCodeInputTextBoxStyle::CharacterBorderBrushFocused' has a wrong offset!");
static_assert(offsetof(FModioDefaultCodeInputTextBoxStyle, CharacterBorderPadding) == 0x0004E0, "Member 'FModioDefaultCodeInputTextBoxStyle::CharacterBorderPadding' has a wrong offset!");
static_assert(offsetof(FModioDefaultCodeInputTextBoxStyle, FakeCaretBrush) == 0x0004F0, "Member 'FModioDefaultCodeInputTextBoxStyle::FakeCaretBrush' has a wrong offset!");
static_assert(offsetof(FModioDefaultCodeInputTextBoxStyle, FakeCaretHorizontalAlignment) == 0x0005C0, "Member 'FModioDefaultCodeInputTextBoxStyle::FakeCaretHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FModioDefaultCodeInputTextBoxStyle, FakeCaretVerticalAlignment) == 0x0005C1, "Member 'FModioDefaultCodeInputTextBoxStyle::FakeCaretVerticalAlignment' has a wrong offset!");
static_assert(offsetof(FModioDefaultCodeInputTextBoxStyle, CharacterPadding) == 0x0005C4, "Member 'FModioDefaultCodeInputTextBoxStyle::CharacterPadding' has a wrong offset!");
static_assert(offsetof(FModioDefaultCodeInputTextBoxStyle, CharacterSpacing) == 0x0005D4, "Member 'FModioDefaultCodeInputTextBoxStyle::CharacterSpacing' has a wrong offset!");
static_assert(offsetof(FModioDefaultCodeInputTextBoxStyle, MinimumCharacterWidth) == 0x0005E4, "Member 'FModioDefaultCodeInputTextBoxStyle::MinimumCharacterWidth' has a wrong offset!");

// ScriptStruct ModioUICore.ModioUICommandAssetEntry
// 0x00A0 (0x00A8 - 0x0008)
struct FModioUICommandAssetEntry final : public FTableRowBase
{
public:
	TMap<class FName, class FText>                CommandTexts;                                      // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSlateBrush>         CommandIconBrushes;                                // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioUICommandAssetEntry) == 0x000008, "Wrong alignment on FModioUICommandAssetEntry");
static_assert(sizeof(FModioUICommandAssetEntry) == 0x0000A8, "Wrong size on FModioUICommandAssetEntry");
static_assert(offsetof(FModioUICommandAssetEntry, CommandTexts) == 0x000008, "Member 'FModioUICommandAssetEntry::CommandTexts' has a wrong offset!");
static_assert(offsetof(FModioUICommandAssetEntry, CommandIconBrushes) == 0x000058, "Member 'FModioUICommandAssetEntry::CommandIconBrushes' has a wrong offset!");

// ScriptStruct ModioUICore.ModioTextValidationRule
// 0x0028 (0x0028 - 0x0000)
struct FModioTextValidationRule final
{
public:
	EModioTextValidationRule                      RuleToUse;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ValidationMessage;                                 // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MinimumLength;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumLength;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioTextValidationRule) == 0x000008, "Wrong alignment on FModioTextValidationRule");
static_assert(sizeof(FModioTextValidationRule) == 0x000028, "Wrong size on FModioTextValidationRule");
static_assert(offsetof(FModioTextValidationRule, RuleToUse) == 0x000000, "Member 'FModioTextValidationRule::RuleToUse' has a wrong offset!");
static_assert(offsetof(FModioTextValidationRule, ValidationMessage) == 0x000008, "Member 'FModioTextValidationRule::ValidationMessage' has a wrong offset!");
static_assert(offsetof(FModioTextValidationRule, MinimumLength) == 0x000020, "Member 'FModioTextValidationRule::MinimumLength' has a wrong offset!");
static_assert(offsetof(FModioTextValidationRule, MaximumLength) == 0x000024, "Member 'FModioTextValidationRule::MaximumLength' has a wrong offset!");

// ScriptStruct ModioUICore.ModioUIColorEntry
// 0x0010 (0x0018 - 0x0008)
struct FModioUIColorEntry final : public FTableRowBase
{
public:
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioUIColorEntry) == 0x000008, "Wrong alignment on FModioUIColorEntry");
static_assert(sizeof(FModioUIColorEntry) == 0x000018, "Wrong size on FModioUIColorEntry");
static_assert(offsetof(FModioUIColorEntry, Color) == 0x000008, "Member 'FModioUIColorEntry::Color' has a wrong offset!");

// ScriptStruct ModioUICore.LinearColorRef
// 0x0018 (0x0018 - 0x0000)
struct FLinearColorRef final
{
public:
	class FName                                   ReferencedColorName;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FallbackColor;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLinearColorRef) == 0x000004, "Wrong alignment on FLinearColorRef");
static_assert(sizeof(FLinearColorRef) == 0x000018, "Wrong size on FLinearColorRef");
static_assert(offsetof(FLinearColorRef, ReferencedColorName) == 0x000000, "Member 'FLinearColorRef::ReferencedColorName' has a wrong offset!");
static_assert(offsetof(FLinearColorRef, FallbackColor) == 0x000008, "Member 'FLinearColorRef::FallbackColor' has a wrong offset!");

// ScriptStruct ModioUICore.LinearColorRefOverride
// 0x001C (0x001C - 0x0000)
struct FLinearColorRefOverride final
{
public:
	bool                                          bOverride;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColorRef                        Color;                                             // 0x0004(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLinearColorRefOverride) == 0x000004, "Wrong alignment on FLinearColorRefOverride");
static_assert(sizeof(FLinearColorRefOverride) == 0x00001C, "Wrong size on FLinearColorRefOverride");
static_assert(offsetof(FLinearColorRefOverride, bOverride) == 0x000000, "Member 'FLinearColorRefOverride::bOverride' has a wrong offset!");
static_assert(offsetof(FLinearColorRefOverride, Color) == 0x000004, "Member 'FLinearColorRefOverride::Color' has a wrong offset!");

// ScriptStruct ModioUICore.TextOverride
// 0x0020 (0x0020 - 0x0000)
struct FTextOverride final
{
public:
	bool                                          bOverride;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextOverride) == 0x000008, "Wrong alignment on FTextOverride");
static_assert(sizeof(FTextOverride) == 0x000020, "Wrong size on FTextOverride");
static_assert(offsetof(FTextOverride, bOverride) == 0x000000, "Member 'FTextOverride::bOverride' has a wrong offset!");
static_assert(offsetof(FTextOverride, Value) == 0x000008, "Member 'FTextOverride::Value' has a wrong offset!");

// ScriptStruct ModioUICore.ClassPathOverride
// 0x0028 (0x0028 - 0x0000)
struct FClassPathOverride final
{
public:
	bool                                          bOverride;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         Value;                                             // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClassPathOverride) == 0x000008, "Wrong alignment on FClassPathOverride");
static_assert(sizeof(FClassPathOverride) == 0x000028, "Wrong size on FClassPathOverride");
static_assert(offsetof(FClassPathOverride, bOverride) == 0x000000, "Member 'FClassPathOverride::bOverride' has a wrong offset!");
static_assert(offsetof(FClassPathOverride, Value) == 0x000008, "Member 'FClassPathOverride::Value' has a wrong offset!");

// ScriptStruct ModioUICore.ModioCommonButtonParams
// 0x0078 (0x0078 - 0x0000)
struct FModioCommonButtonParams final
{
public:
	bool                                          bIsSpacer;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Width;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextOverride                          ButtonRoleDescription;                             // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         MinWidth;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinHeight;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClassPathOverride                     Style;                                             // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    TriggeringInputAction;                             // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bConsumePointerInput;                              // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUseFallbackDefaultInputAction;              // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioCommonButtonParams) == 0x000008, "Wrong alignment on FModioCommonButtonParams");
static_assert(sizeof(FModioCommonButtonParams) == 0x000078, "Wrong size on FModioCommonButtonParams");
static_assert(offsetof(FModioCommonButtonParams, bIsSpacer) == 0x000000, "Member 'FModioCommonButtonParams::bIsSpacer' has a wrong offset!");
static_assert(offsetof(FModioCommonButtonParams, Width) == 0x000004, "Member 'FModioCommonButtonParams::Width' has a wrong offset!");
static_assert(offsetof(FModioCommonButtonParams, Height) == 0x000008, "Member 'FModioCommonButtonParams::Height' has a wrong offset!");
static_assert(offsetof(FModioCommonButtonParams, ButtonRoleDescription) == 0x000010, "Member 'FModioCommonButtonParams::ButtonRoleDescription' has a wrong offset!");
static_assert(offsetof(FModioCommonButtonParams, MinWidth) == 0x000030, "Member 'FModioCommonButtonParams::MinWidth' has a wrong offset!");
static_assert(offsetof(FModioCommonButtonParams, MinHeight) == 0x000034, "Member 'FModioCommonButtonParams::MinHeight' has a wrong offset!");
static_assert(offsetof(FModioCommonButtonParams, Style) == 0x000038, "Member 'FModioCommonButtonParams::Style' has a wrong offset!");
static_assert(offsetof(FModioCommonButtonParams, TriggeringInputAction) == 0x000060, "Member 'FModioCommonButtonParams::TriggeringInputAction' has a wrong offset!");
static_assert(offsetof(FModioCommonButtonParams, bConsumePointerInput) == 0x000070, "Member 'FModioCommonButtonParams::bConsumePointerInput' has a wrong offset!");
static_assert(offsetof(FModioCommonButtonParams, bShouldUseFallbackDefaultInputAction) == 0x000071, "Member 'FModioCommonButtonParams::bShouldUseFallbackDefaultInputAction' has a wrong offset!");

// ScriptStruct ModioUICore.InputActionOverride
// 0x0018 (0x0018 - 0x0000)
struct FInputActionOverride final
{
public:
	bool                                          bOverride;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputActionOverride) == 0x000008, "Wrong alignment on FInputActionOverride");
static_assert(sizeof(FInputActionOverride) == 0x000018, "Wrong size on FInputActionOverride");
static_assert(offsetof(FInputActionOverride, bOverride) == 0x000000, "Member 'FInputActionOverride::bOverride' has a wrong offset!");
static_assert(offsetof(FInputActionOverride, Value) == 0x000008, "Member 'FInputActionOverride::Value' has a wrong offset!");

// ScriptStruct ModioUICore.ModioDialogButtonInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FModioDialogButtonInfo final
{
public:
	class FText                                   ButtonLabel;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClassPathOverride                     StyleOverride;                                     // 0x0018(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FInputActionOverride                   InputActionOverride;                               // 0x0040(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bShowTooltip;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TooltipTitleText;                                  // 0x0060(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TooltipInfoText;                                   // 0x0078(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TooltipTagText;                                    // 0x0090(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bFocusedByDefault;                                 // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioDialogButtonInfo) == 0x000008, "Wrong alignment on FModioDialogButtonInfo");
static_assert(sizeof(FModioDialogButtonInfo) == 0x0000B0, "Wrong size on FModioDialogButtonInfo");
static_assert(offsetof(FModioDialogButtonInfo, ButtonLabel) == 0x000000, "Member 'FModioDialogButtonInfo::ButtonLabel' has a wrong offset!");
static_assert(offsetof(FModioDialogButtonInfo, StyleOverride) == 0x000018, "Member 'FModioDialogButtonInfo::StyleOverride' has a wrong offset!");
static_assert(offsetof(FModioDialogButtonInfo, InputActionOverride) == 0x000040, "Member 'FModioDialogButtonInfo::InputActionOverride' has a wrong offset!");
static_assert(offsetof(FModioDialogButtonInfo, bShowTooltip) == 0x000058, "Member 'FModioDialogButtonInfo::bShowTooltip' has a wrong offset!");
static_assert(offsetof(FModioDialogButtonInfo, TooltipTitleText) == 0x000060, "Member 'FModioDialogButtonInfo::TooltipTitleText' has a wrong offset!");
static_assert(offsetof(FModioDialogButtonInfo, TooltipInfoText) == 0x000078, "Member 'FModioDialogButtonInfo::TooltipInfoText' has a wrong offset!");
static_assert(offsetof(FModioDialogButtonInfo, TooltipTagText) == 0x000090, "Member 'FModioDialogButtonInfo::TooltipTagText' has a wrong offset!");
static_assert(offsetof(FModioDialogButtonInfo, bFocusedByDefault) == 0x0000A8, "Member 'FModioDialogButtonInfo::bFocusedByDefault' has a wrong offset!");

// ScriptStruct ModioUICore.ModioFeaturedCategoryParams
// 0x0048 (0x0048 - 0x0000)
struct FModioFeaturedCategoryParams final
{
public:
	class FText                                   CategoryName;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExcludedTags;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EModioSortDirection                           Direction;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioSortFieldType                           SortField;                                         // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Count;                                             // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioFeaturedCategoryParams) == 0x000008, "Wrong alignment on FModioFeaturedCategoryParams");
static_assert(sizeof(FModioFeaturedCategoryParams) == 0x000048, "Wrong size on FModioFeaturedCategoryParams");
static_assert(offsetof(FModioFeaturedCategoryParams, CategoryName) == 0x000000, "Member 'FModioFeaturedCategoryParams::CategoryName' has a wrong offset!");
static_assert(offsetof(FModioFeaturedCategoryParams, Tags) == 0x000018, "Member 'FModioFeaturedCategoryParams::Tags' has a wrong offset!");
static_assert(offsetof(FModioFeaturedCategoryParams, ExcludedTags) == 0x000028, "Member 'FModioFeaturedCategoryParams::ExcludedTags' has a wrong offset!");
static_assert(offsetof(FModioFeaturedCategoryParams, Direction) == 0x000038, "Member 'FModioFeaturedCategoryParams::Direction' has a wrong offset!");
static_assert(offsetof(FModioFeaturedCategoryParams, SortField) == 0x000039, "Member 'FModioFeaturedCategoryParams::SortField' has a wrong offset!");
static_assert(offsetof(FModioFeaturedCategoryParams, Count) == 0x000040, "Member 'FModioFeaturedCategoryParams::Count' has a wrong offset!");

// ScriptStruct ModioUICore.IntegerOverride
// 0x0008 (0x0008 - 0x0000)
struct FIntegerOverride final
{
public:
	bool                                          bOverride;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntegerOverride) == 0x000004, "Wrong alignment on FIntegerOverride");
static_assert(sizeof(FIntegerOverride) == 0x000008, "Wrong size on FIntegerOverride");
static_assert(offsetof(FIntegerOverride, bOverride) == 0x000000, "Member 'FIntegerOverride::bOverride' has a wrong offset!");
static_assert(offsetof(FIntegerOverride, Value) == 0x000004, "Member 'FIntegerOverride::Value' has a wrong offset!");

// ScriptStruct ModioUICore.FloatOverride
// 0x0008 (0x0008 - 0x0000)
struct FFloatOverride final
{
public:
	bool                                          bOverride;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatOverride) == 0x000004, "Wrong alignment on FFloatOverride");
static_assert(sizeof(FFloatOverride) == 0x000008, "Wrong size on FFloatOverride");
static_assert(offsetof(FFloatOverride, bOverride) == 0x000000, "Member 'FFloatOverride::bOverride' has a wrong offset!");
static_assert(offsetof(FFloatOverride, Value) == 0x000004, "Member 'FFloatOverride::Value' has a wrong offset!");

// ScriptStruct ModioUICore.HAlignOverride
// 0x0002 (0x0002 - 0x0000)
struct FHAlignOverride final
{
public:
	bool                                          bOverride;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          Value;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHAlignOverride) == 0x000001, "Wrong alignment on FHAlignOverride");
static_assert(sizeof(FHAlignOverride) == 0x000002, "Wrong size on FHAlignOverride");
static_assert(offsetof(FHAlignOverride, bOverride) == 0x000000, "Member 'FHAlignOverride::bOverride' has a wrong offset!");
static_assert(offsetof(FHAlignOverride, Value) == 0x000001, "Member 'FHAlignOverride::Value' has a wrong offset!");

// ScriptStruct ModioUICore.SlateFontInfoOverride
// 0x0060 (0x0060 - 0x0000)
struct FSlateFontInfoOverride final
{
public:
	bool                                          bOverride;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Value;                                             // 0x0008(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlateFontInfoOverride) == 0x000008, "Wrong alignment on FSlateFontInfoOverride");
static_assert(sizeof(FSlateFontInfoOverride) == 0x000060, "Wrong size on FSlateFontInfoOverride");
static_assert(offsetof(FSlateFontInfoOverride, bOverride) == 0x000000, "Member 'FSlateFontInfoOverride::bOverride' has a wrong offset!");
static_assert(offsetof(FSlateFontInfoOverride, Value) == 0x000008, "Member 'FSlateFontInfoOverride::Value' has a wrong offset!");

// ScriptStruct ModioUICore.ModioRetryCounter
// 0x0004 (0x0004 - 0x0000)
struct FModioRetryCounter final
{
public:
	int32                                         RetriesRemaining;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FModioRetryCounter) == 0x000004, "Wrong alignment on FModioRetryCounter");
static_assert(sizeof(FModioRetryCounter) == 0x000004, "Wrong size on FModioRetryCounter");
static_assert(offsetof(FModioRetryCounter, RetriesRemaining) == 0x000000, "Member 'FModioRetryCounter::RetriesRemaining' has a wrong offset!");

// ScriptStruct ModioUICore.ModioUIComponentMetadata
// 0x0020 (0x0020 - 0x0000)
struct FModioUIComponentMetadata
{
public:
	TArray<class UClass*>                         RequiredInterfaces;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	EModioUIComponentID                           ComponentID;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ComponentDisplayName;                              // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioUIComponentMetadata) == 0x000008, "Wrong alignment on FModioUIComponentMetadata");
static_assert(sizeof(FModioUIComponentMetadata) == 0x000020, "Wrong size on FModioUIComponentMetadata");
static_assert(offsetof(FModioUIComponentMetadata, RequiredInterfaces) == 0x000000, "Member 'FModioUIComponentMetadata::RequiredInterfaces' has a wrong offset!");
static_assert(offsetof(FModioUIComponentMetadata, ComponentID) == 0x000010, "Member 'FModioUIComponentMetadata::ComponentID' has a wrong offset!");
static_assert(offsetof(FModioUIComponentMetadata, ComponentDisplayName) == 0x000014, "Member 'FModioUIComponentMetadata::ComponentDisplayName' has a wrong offset!");

// ScriptStruct ModioUICore.ModioUICommandMenuComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUICommandMenuComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUICommandMenuComponentMetadata) == 0x000008, "Wrong alignment on FModioUICommandMenuComponentMetadata");
static_assert(sizeof(FModioUICommandMenuComponentMetadata) == 0x000020, "Wrong size on FModioUICommandMenuComponentMetadata");

// ScriptStruct ModioUICore.ModioStackedBool
// 0x0010 (0x0010 - 0x0000)
struct FModioStackedBool final
{
public:
	TArray<bool>                                  ValueStack;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioStackedBool) == 0x000008, "Wrong alignment on FModioStackedBool");
static_assert(sizeof(FModioStackedBool) == 0x000010, "Wrong size on FModioStackedBool");
static_assert(offsetof(FModioStackedBool, ValueStack) == 0x000000, "Member 'FModioStackedBool::ValueStack' has a wrong offset!");

// ScriptStruct ModioUICore.ModioUIModListComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUIModListComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUIModListComponentMetadata) == 0x000008, "Wrong alignment on FModioUIModListComponentMetadata");
static_assert(sizeof(FModioUIModListComponentMetadata) == 0x000020, "Wrong size on FModioUIModListComponentMetadata");

// ScriptStruct ModioUICore.ModioUIButtonComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUIButtonComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUIButtonComponentMetadata) == 0x000008, "Wrong alignment on FModioUIButtonComponentMetadata");
static_assert(sizeof(FModioUIButtonComponentMetadata) == 0x000020, "Wrong size on FModioUIButtonComponentMetadata");

// ScriptStruct ModioUICore.ModioUITextComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUITextComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUITextComponentMetadata) == 0x000008, "Wrong alignment on FModioUITextComponentMetadata");
static_assert(sizeof(FModioUITextComponentMetadata) == 0x000020, "Wrong size on FModioUITextComponentMetadata");

// ScriptStruct ModioUICore.ModioUIEditableTextComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUIEditableTextComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUIEditableTextComponentMetadata) == 0x000008, "Wrong alignment on FModioUIEditableTextComponentMetadata");
static_assert(sizeof(FModioUIEditableTextComponentMetadata) == 0x000020, "Wrong size on FModioUIEditableTextComponentMetadata");

// ScriptStruct ModioUICore.ModioUIImageComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUIImageComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUIImageComponentMetadata) == 0x000008, "Wrong alignment on FModioUIImageComponentMetadata");
static_assert(sizeof(FModioUIImageComponentMetadata) == 0x000020, "Wrong size on FModioUIImageComponentMetadata");

// ScriptStruct ModioUICore.ModioUIPresetFilterSelectorComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUIPresetFilterSelectorComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUIPresetFilterSelectorComponentMetadata) == 0x000008, "Wrong alignment on FModioUIPresetFilterSelectorComponentMetadata");
static_assert(sizeof(FModioUIPresetFilterSelectorComponentMetadata) == 0x000020, "Wrong size on FModioUIPresetFilterSelectorComponentMetadata");

// ScriptStruct ModioUICore.ModioUIProgressBarComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUIProgressBarComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUIProgressBarComponentMetadata) == 0x000008, "Wrong alignment on FModioUIProgressBarComponentMetadata");
static_assert(sizeof(FModioUIProgressBarComponentMetadata) == 0x000020, "Wrong size on FModioUIProgressBarComponentMetadata");

// ScriptStruct ModioUICore.ModioUITagComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUITagComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUITagComponentMetadata) == 0x000008, "Wrong alignment on FModioUITagComponentMetadata");
static_assert(sizeof(FModioUITagComponentMetadata) == 0x000020, "Wrong size on FModioUITagComponentMetadata");

// ScriptStruct ModioUICore.ModioUIObjectListComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUIObjectListComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUIObjectListComponentMetadata) == 0x000008, "Wrong alignment on FModioUIObjectListComponentMetadata");
static_assert(sizeof(FModioUIObjectListComponentMetadata) == 0x000020, "Wrong size on FModioUIObjectListComponentMetadata");

// ScriptStruct ModioUICore.ModioUIObjectSelectorComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUIObjectSelectorComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUIObjectSelectorComponentMetadata) == 0x000008, "Wrong alignment on FModioUIObjectSelectorComponentMetadata");
static_assert(sizeof(FModioUIObjectSelectorComponentMetadata) == 0x000020, "Wrong size on FModioUIObjectSelectorComponentMetadata");

// ScriptStruct ModioUICore.ModioUIEnumSelectorComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUIEnumSelectorComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUIEnumSelectorComponentMetadata) == 0x000008, "Wrong alignment on FModioUIEnumSelectorComponentMetadata");
static_assert(sizeof(FModioUIEnumSelectorComponentMetadata) == 0x000020, "Wrong size on FModioUIEnumSelectorComponentMetadata");

// ScriptStruct ModioUICore.ModioUIEnumSelectorEntryComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUIEnumSelectorEntryComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUIEnumSelectorEntryComponentMetadata) == 0x000008, "Wrong alignment on FModioUIEnumSelectorEntryComponentMetadata");
static_assert(sizeof(FModioUIEnumSelectorEntryComponentMetadata) == 0x000020, "Wrong size on FModioUIEnumSelectorEntryComponentMetadata");

// ScriptStruct ModioUICore.ModioUIPresetFilterSelectorEntryComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUIPresetFilterSelectorEntryComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUIPresetFilterSelectorEntryComponentMetadata) == 0x000008, "Wrong alignment on FModioUIPresetFilterSelectorEntryComponentMetadata");
static_assert(sizeof(FModioUIPresetFilterSelectorEntryComponentMetadata) == 0x000020, "Wrong size on FModioUIPresetFilterSelectorEntryComponentMetadata");

// ScriptStruct ModioUICore.ModioUIModPropertyCollectionVisualizerComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUIModPropertyCollectionVisualizerComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUIModPropertyCollectionVisualizerComponentMetadata) == 0x000008, "Wrong alignment on FModioUIModPropertyCollectionVisualizerComponentMetadata");
static_assert(sizeof(FModioUIModPropertyCollectionVisualizerComponentMetadata) == 0x000020, "Wrong size on FModioUIModPropertyCollectionVisualizerComponentMetadata");

// ScriptStruct ModioUICore.ModioUIModTileComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUIModTileComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUIModTileComponentMetadata) == 0x000008, "Wrong alignment on FModioUIModTileComponentMetadata");
static_assert(sizeof(FModioUIModTileComponentMetadata) == 0x000020, "Wrong size on FModioUIModTileComponentMetadata");

// ScriptStruct ModioUICore.ModioUIUserDisplayComponentMetadata
// 0x0000 (0x0020 - 0x0020)
struct FModioUIUserDisplayComponentMetadata final : public FModioUIComponentMetadata
{
};
static_assert(alignof(FModioUIUserDisplayComponentMetadata) == 0x000008, "Wrong alignment on FModioUIUserDisplayComponentMetadata");
static_assert(sizeof(FModioUIUserDisplayComponentMetadata) == 0x000020, "Wrong size on FModioUIUserDisplayComponentMetadata");

}

