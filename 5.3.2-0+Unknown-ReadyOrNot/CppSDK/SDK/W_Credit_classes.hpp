#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Credit

#include "Basic.hpp"

#include "ST_Style_Text_structs.hpp"
#include "Engine_structs.hpp"
#include "ST_Credit_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Credit.W_Credit_C
// 0x0380 (0x0648 - 0x02C8)
class UW_Credit_C final : public UBaseCredit
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       animRevealCreditsTitle;                            // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       animRevealLegal;                                   // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       animRevealNameOnly;                                // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       animRevealHeader;                                  // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       animReveal;                                        // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Credit;                                         // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_CreditsTitle;                                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Header;                                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Legal;                                          // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_NameOnly;                                       // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Header;                                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Name_0;                                            // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                RoleList;                                          // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_CreditsTitle;                                  // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Header;                                        // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Legal;                                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Name;                                          // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_NameOnly;                                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWrapBox*                               WB_Roles;                                          // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   FullName;                                          // 0x0368(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<class FText>                           Roles;                                             // 0x0380(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FST_Style_Text                         NameTextStyle;                                     // 0x0390(0x00C8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FST_Style_Text                         RolesTextStyle;                                    // 0x0458(0x00C8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FText                                   CreditHeader;                                      // 0x0520(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FST_Credit                             CreditFlow;                                        // 0x0538(0x0098)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class UDataTable*                             CreditsDataTable;                                  // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHeader;                                          // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_5D9[0x7];                                      // 0x05D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CreditsTitle;                                      // 0x05E0(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   NameOnly;                                          // 0x05F8(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   Legal;                                             // 0x0610(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          IsCreditsTitle;                                    // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsLegal;                                           // 0x0629(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsNameOnly;                                        // 0x062A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_62B[0x5];                                      // 0x062B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        VisibleMin;                                        // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        VisibleMax;                                        // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsScrollingDown;                                   // 0x0640(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BackPage(bool* Handled);
	void ChangePage(class FName PageName);
	void Construct();
	void ExecuteUbergraph_W_Credit(int32 EntryPoint);
	void Get_Anim_Duration(class UWidgetAnimation* Anim, double* Duration);
	void Hide(double Delay, bool Collapse);
	void IsAnimating(bool* Animating);
	void IsInBotMargin(bool* IsInBotMargin_0);
	void IsInTopMargin(bool* InView);
	void PreConstruct(bool IsDesignTime);
	void Reveal(double Delay);
	void SetInputMode(bool IsGamepad);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void WhichAnimation(class UWidgetAnimation** Animation);

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Credit_C">();
	}
	static class UW_Credit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Credit_C>();
	}
};
static_assert(alignof(UW_Credit_C) == 0x000008, "Wrong alignment on UW_Credit_C");
static_assert(sizeof(UW_Credit_C) == 0x000648, "Wrong size on UW_Credit_C");
static_assert(offsetof(UW_Credit_C, UberGraphFrame) == 0x0002C8, "Member 'UW_Credit_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, animRevealCreditsTitle) == 0x0002D0, "Member 'UW_Credit_C::animRevealCreditsTitle' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, animRevealLegal) == 0x0002D8, "Member 'UW_Credit_C::animRevealLegal' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, animRevealNameOnly) == 0x0002E0, "Member 'UW_Credit_C::animRevealNameOnly' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, animRevealHeader) == 0x0002E8, "Member 'UW_Credit_C::animRevealHeader' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, animReveal) == 0x0002F0, "Member 'UW_Credit_C::animReveal' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, HB_Credit) == 0x0002F8, "Member 'UW_Credit_C::HB_Credit' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, HB_CreditsTitle) == 0x000300, "Member 'UW_Credit_C::HB_CreditsTitle' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, HB_Header) == 0x000308, "Member 'UW_Credit_C::HB_Header' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, HB_Legal) == 0x000310, "Member 'UW_Credit_C::HB_Legal' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, HB_NameOnly) == 0x000318, "Member 'UW_Credit_C::HB_NameOnly' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, Header) == 0x000320, "Member 'UW_Credit_C::Header' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, Name_0) == 0x000328, "Member 'UW_Credit_C::Name_0' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, RoleList) == 0x000330, "Member 'UW_Credit_C::RoleList' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, txt_CreditsTitle) == 0x000338, "Member 'UW_Credit_C::txt_CreditsTitle' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, txt_Header) == 0x000340, "Member 'UW_Credit_C::txt_Header' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, txt_Legal) == 0x000348, "Member 'UW_Credit_C::txt_Legal' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, txt_Name) == 0x000350, "Member 'UW_Credit_C::txt_Name' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, txt_NameOnly) == 0x000358, "Member 'UW_Credit_C::txt_NameOnly' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, WB_Roles) == 0x000360, "Member 'UW_Credit_C::WB_Roles' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, FullName) == 0x000368, "Member 'UW_Credit_C::FullName' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, Roles) == 0x000380, "Member 'UW_Credit_C::Roles' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, NameTextStyle) == 0x000390, "Member 'UW_Credit_C::NameTextStyle' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, RolesTextStyle) == 0x000458, "Member 'UW_Credit_C::RolesTextStyle' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, CreditHeader) == 0x000520, "Member 'UW_Credit_C::CreditHeader' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, CreditFlow) == 0x000538, "Member 'UW_Credit_C::CreditFlow' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, CreditsDataTable) == 0x0005D0, "Member 'UW_Credit_C::CreditsDataTable' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, IsHeader) == 0x0005D8, "Member 'UW_Credit_C::IsHeader' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, CreditsTitle) == 0x0005E0, "Member 'UW_Credit_C::CreditsTitle' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, NameOnly) == 0x0005F8, "Member 'UW_Credit_C::NameOnly' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, Legal) == 0x000610, "Member 'UW_Credit_C::Legal' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, IsCreditsTitle) == 0x000628, "Member 'UW_Credit_C::IsCreditsTitle' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, IsLegal) == 0x000629, "Member 'UW_Credit_C::IsLegal' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, IsNameOnly) == 0x00062A, "Member 'UW_Credit_C::IsNameOnly' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, VisibleMin) == 0x000630, "Member 'UW_Credit_C::VisibleMin' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, VisibleMax) == 0x000638, "Member 'UW_Credit_C::VisibleMax' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, IsScrollingDown) == 0x000640, "Member 'UW_Credit_C::IsScrollingDown' has a wrong offset!");

}

