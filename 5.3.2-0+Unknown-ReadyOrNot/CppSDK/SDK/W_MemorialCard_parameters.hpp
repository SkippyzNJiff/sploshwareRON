#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_MemorialCard

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function W_MemorialCard.W_MemorialCard_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_MemorialCard_C_BackPage final
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MemorialCard_C_BackPage) == 0x000001, "Wrong alignment on W_MemorialCard_C_BackPage");
static_assert(sizeof(W_MemorialCard_C_BackPage) == 0x000001, "Wrong size on W_MemorialCard_C_BackPage");
static_assert(offsetof(W_MemorialCard_C_BackPage, Handled) == 0x000000, "Member 'W_MemorialCard_C_BackPage::Handled' has a wrong offset!");

// Function W_MemorialCard.W_MemorialCard_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_MemorialCard_C_ChangePage final
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MemorialCard_C_ChangePage) == 0x000004, "Wrong alignment on W_MemorialCard_C_ChangePage");
static_assert(sizeof(W_MemorialCard_C_ChangePage) == 0x000008, "Wrong size on W_MemorialCard_C_ChangePage");
static_assert(offsetof(W_MemorialCard_C_ChangePage, PageName) == 0x000000, "Member 'W_MemorialCard_C_ChangePage::PageName' has a wrong offset!");

// Function W_MemorialCard.W_MemorialCard_C.ExecuteUbergraph_W_MemorialCard
// 0x00E8 (0x00E8 - 0x0000)
struct W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_PageName;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URosterCharacter*                       K2Node_CustomEvent_Character;                      // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_FormatName_OutText;                       // 0x0028(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0040(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0090(0x0010)(ReferenceParm)
	bool                                          K2Node_Event_IsGamepad;                            // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00A8(0x0018)()
	double                                        K2Node_Event_Delay_1;                              // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Delay;                                // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_1;            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard) == 0x000008, "Wrong alignment on W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard");
static_assert(sizeof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard) == 0x0000E8, "Wrong size on W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, EntryPoint) == 0x000000, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000008, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, K2Node_Event_PageName) == 0x000010, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, K2Node_CustomEvent_Character) == 0x000018, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::K2Node_CustomEvent_Character' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000020, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, CallFunc_FormatName_OutText) == 0x000028, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::CallFunc_FormatName_OutText' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, K2Node_MakeStruct_FormatArgumentData) == 0x000040, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, K2Node_MakeArray_Array) == 0x000090, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, K2Node_Event_IsGamepad) == 0x0000A0, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, CallFunc_Format_ReturnValue) == 0x0000A8, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, K2Node_Event_Delay_1) == 0x0000C0, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, CallFunc_PlayAnimationForward_ReturnValue) == 0x0000C8, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, K2Node_Event_Delay) == 0x0000D0, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, K2Node_Event_Collapse) == 0x0000D8, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, CallFunc_Delay_Duration_ImplicitCast) == 0x0000DC, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard, CallFunc_Delay_Duration_ImplicitCast_1) == 0x0000E0, "Member 'W_MemorialCard_C_ExecuteUbergraph_W_MemorialCard::CallFunc_Delay_Duration_ImplicitCast_1' has a wrong offset!");

// Function W_MemorialCard.W_MemorialCard_C.Hide
// 0x0010 (0x0010 - 0x0000)
struct W_MemorialCard_C_Hide final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MemorialCard_C_Hide) == 0x000008, "Wrong alignment on W_MemorialCard_C_Hide");
static_assert(sizeof(W_MemorialCard_C_Hide) == 0x000010, "Wrong size on W_MemorialCard_C_Hide");
static_assert(offsetof(W_MemorialCard_C_Hide, Delay) == 0x000000, "Member 'W_MemorialCard_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_MemorialCard_C_Hide, Collapse) == 0x000008, "Member 'W_MemorialCard_C_Hide::Collapse' has a wrong offset!");

// Function W_MemorialCard.W_MemorialCard_C.Reveal
// 0x0008 (0x0008 - 0x0000)
struct W_MemorialCard_C_Reveal final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MemorialCard_C_Reveal) == 0x000008, "Wrong alignment on W_MemorialCard_C_Reveal");
static_assert(sizeof(W_MemorialCard_C_Reveal) == 0x000008, "Wrong size on W_MemorialCard_C_Reveal");
static_assert(offsetof(W_MemorialCard_C_Reveal, Delay) == 0x000000, "Member 'W_MemorialCard_C_Reveal::Delay' has a wrong offset!");

// Function W_MemorialCard.W_MemorialCard_C.SetCharacter
// 0x0008 (0x0008 - 0x0000)
struct W_MemorialCard_C_SetCharacter final
{
public:
	class URosterCharacter*                       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MemorialCard_C_SetCharacter) == 0x000008, "Wrong alignment on W_MemorialCard_C_SetCharacter");
static_assert(sizeof(W_MemorialCard_C_SetCharacter) == 0x000008, "Wrong size on W_MemorialCard_C_SetCharacter");
static_assert(offsetof(W_MemorialCard_C_SetCharacter, Character) == 0x000000, "Member 'W_MemorialCard_C_SetCharacter::Character' has a wrong offset!");

// Function W_MemorialCard.W_MemorialCard_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_MemorialCard_C_SetInputMode final
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MemorialCard_C_SetInputMode) == 0x000001, "Wrong alignment on W_MemorialCard_C_SetInputMode");
static_assert(sizeof(W_MemorialCard_C_SetInputMode) == 0x000001, "Wrong size on W_MemorialCard_C_SetInputMode");
static_assert(offsetof(W_MemorialCard_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_MemorialCard_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_MemorialCard.W_MemorialCard_C.GetFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct W_MemorialCard_C_GetFocusTarget final
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MemorialCard_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_MemorialCard_C_GetFocusTarget");
static_assert(sizeof(W_MemorialCard_C_GetFocusTarget) == 0x000008, "Wrong size on W_MemorialCard_C_GetFocusTarget");
static_assert(offsetof(W_MemorialCard_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_MemorialCard_C_GetFocusTarget::Focus' has a wrong offset!");

}

