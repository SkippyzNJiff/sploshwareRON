#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_DamagePaperdoll

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_DamagePaperdoll.W_DamagePaperdoll_C
// 0x00F0 (0x0500 - 0x0410)
class UW_DamagePaperdoll_C final : public UPlayerPaperdollWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0410(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          bFlashingHead;                                     // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlashingLeftLeg;                                  // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlashingLeftArm;                                  // 0x041A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlashingRightLeg;                                 // 0x041B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlashingRightArm;                                 // 0x041C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlashingBody;                                     // 0x041D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDamagedLeftLeg;                                   // 0x041E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDamagedRightLeg;                                  // 0x041F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDamagedHead;                                      // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDamagedBody;                                      // 0x0421(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDamagedLeftArm;                                   // 0x0422(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDamagedRightArm;                                  // 0x0423(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowFlashyBits;                                   // 0x0424(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_425[0x3];                                      // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FlashingTime;                                      // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        FlashOnLength;                                     // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        FlashOffLength;                                    // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        FlashOnDurationLeft;                               // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlashOffDurationLeft;                              // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HealedPaperdollColor;                              // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           DamagedPaperdollColor;                             // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           FinalDamagedPaperdollColor;                        // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bHealedLeftLeg;                                    // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHealedRightLeg;                                   // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHealedRightArm;                                   // 0x0482(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHealedLeftArm;                                    // 0x0483(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHealedHead;                                       // 0x0484(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_485[0x3];                                      // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UImage*>                         HeadImages;                                        // 0x0488(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UImage*>                         BodyImages;                                        // 0x0498(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UImage*>                         LeftArmImages;                                     // 0x04A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UImage*>                         RightArmImages;                                    // 0x04B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UImage*>                         LeftLegImages;                                     // 0x04C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UImage*>                         RightLegImages;                                    // 0x04D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UImage*>                         OutlineImages;                                     // 0x04E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        LastHealthVal;                                     // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Apply_Damage_State(class UImage* InImage, bool& bDamagedLimb, bool& bFlashingLimb, double LimbHealth, TDelegate<void()> Event);
	void bodyPartDamaged(bool bHeadDamaged, bool bBodyDamaged, bool bLeftArmDamaged, bool bRightArmDamaged, bool bLeftLegDamaged, bool bRightLegDamaged, bool bLeftFootDamaged, bool bRightFootDamaged);
	void CarryingChanged();
	void Construct();
	void ExecuteUbergraph_W_DamagePaperdoll(int32 EntryPoint);
	ESlateVisibility GetArmDmgLeftVisibility();
	ESlateVisibility GetArmDmgRightVisibility();
	ESlateVisibility GetHeadDmgVisibility();
	ESlateVisibility GetLegDmgLeftVisibility();
	ESlateVisibility GetLegDmgRightVisibility();
	ESlateVisibility GetTorsoDmgVisibility();
	void OnCrouch();
	void OnCrouchEnd();
	void OnInitialized();
	void OnItemAddedToInventory_Event_0(class ABaseItem* Item);
	void OnPlayerReady(class APlayerCharacter* Player);
	void SetDamageState(bool bHeadHit, bool bBodyHit, bool bLeftArmHit, bool bRightArmHit, bool bLeftLegHit, bool bRightLegHit);
	void SetLimbDamaged(bool& bLimb, bool* bNewlyDamaged);
	void Stop_Flashing_Head();
	void Stop_Flashing_Left_Arm();
	void Stop_Flashing_Left_Leg();
	void Stop_Flashing_Right_Arm();
	void Stop_Flashing_Right_Leg();
	void Stop_Flashing_Torso();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateHealthBP(double Health);
	void UpdatePaperdollPartToHealedColor(bool bRightArm, bool LeftArm, bool Torso, bool Head, bool Right_Leg, bool Left_Leg);
	void UpdatePartsVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_DamagePaperdoll_C">();
	}
	static class UW_DamagePaperdoll_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_DamagePaperdoll_C>();
	}
};
static_assert(alignof(UW_DamagePaperdoll_C) == 0x000008, "Wrong alignment on UW_DamagePaperdoll_C");
static_assert(sizeof(UW_DamagePaperdoll_C) == 0x000500, "Wrong size on UW_DamagePaperdoll_C");
static_assert(offsetof(UW_DamagePaperdoll_C, UberGraphFrame) == 0x000410, "Member 'UW_DamagePaperdoll_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bFlashingHead) == 0x000418, "Member 'UW_DamagePaperdoll_C::bFlashingHead' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bFlashingLeftLeg) == 0x000419, "Member 'UW_DamagePaperdoll_C::bFlashingLeftLeg' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bFlashingLeftArm) == 0x00041A, "Member 'UW_DamagePaperdoll_C::bFlashingLeftArm' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bFlashingRightLeg) == 0x00041B, "Member 'UW_DamagePaperdoll_C::bFlashingRightLeg' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bFlashingRightArm) == 0x00041C, "Member 'UW_DamagePaperdoll_C::bFlashingRightArm' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bFlashingBody) == 0x00041D, "Member 'UW_DamagePaperdoll_C::bFlashingBody' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bDamagedLeftLeg) == 0x00041E, "Member 'UW_DamagePaperdoll_C::bDamagedLeftLeg' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bDamagedRightLeg) == 0x00041F, "Member 'UW_DamagePaperdoll_C::bDamagedRightLeg' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bDamagedHead) == 0x000420, "Member 'UW_DamagePaperdoll_C::bDamagedHead' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bDamagedBody) == 0x000421, "Member 'UW_DamagePaperdoll_C::bDamagedBody' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bDamagedLeftArm) == 0x000422, "Member 'UW_DamagePaperdoll_C::bDamagedLeftArm' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bDamagedRightArm) == 0x000423, "Member 'UW_DamagePaperdoll_C::bDamagedRightArm' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bShowFlashyBits) == 0x000424, "Member 'UW_DamagePaperdoll_C::bShowFlashyBits' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, FlashingTime) == 0x000428, "Member 'UW_DamagePaperdoll_C::FlashingTime' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, FlashOnLength) == 0x000430, "Member 'UW_DamagePaperdoll_C::FlashOnLength' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, FlashOffLength) == 0x000438, "Member 'UW_DamagePaperdoll_C::FlashOffLength' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, FlashOnDurationLeft) == 0x000440, "Member 'UW_DamagePaperdoll_C::FlashOnDurationLeft' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, FlashOffDurationLeft) == 0x000448, "Member 'UW_DamagePaperdoll_C::FlashOffDurationLeft' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, HealedPaperdollColor) == 0x000450, "Member 'UW_DamagePaperdoll_C::HealedPaperdollColor' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, DamagedPaperdollColor) == 0x000460, "Member 'UW_DamagePaperdoll_C::DamagedPaperdollColor' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, FinalDamagedPaperdollColor) == 0x000470, "Member 'UW_DamagePaperdoll_C::FinalDamagedPaperdollColor' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bHealedLeftLeg) == 0x000480, "Member 'UW_DamagePaperdoll_C::bHealedLeftLeg' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bHealedRightLeg) == 0x000481, "Member 'UW_DamagePaperdoll_C::bHealedRightLeg' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bHealedRightArm) == 0x000482, "Member 'UW_DamagePaperdoll_C::bHealedRightArm' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bHealedLeftArm) == 0x000483, "Member 'UW_DamagePaperdoll_C::bHealedLeftArm' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, bHealedHead) == 0x000484, "Member 'UW_DamagePaperdoll_C::bHealedHead' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, HeadImages) == 0x000488, "Member 'UW_DamagePaperdoll_C::HeadImages' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, BodyImages) == 0x000498, "Member 'UW_DamagePaperdoll_C::BodyImages' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, LeftArmImages) == 0x0004A8, "Member 'UW_DamagePaperdoll_C::LeftArmImages' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, RightArmImages) == 0x0004B8, "Member 'UW_DamagePaperdoll_C::RightArmImages' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, LeftLegImages) == 0x0004C8, "Member 'UW_DamagePaperdoll_C::LeftLegImages' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, RightLegImages) == 0x0004D8, "Member 'UW_DamagePaperdoll_C::RightLegImages' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, OutlineImages) == 0x0004E8, "Member 'UW_DamagePaperdoll_C::OutlineImages' has a wrong offset!");
static_assert(offsetof(UW_DamagePaperdoll_C, LastHealthVal) == 0x0004F8, "Member 'UW_DamagePaperdoll_C::LastHealthVal' has a wrong offset!");

}

