#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_PlanningMap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CommonInput_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.AddPreviewLinePoint
// 0x0150 (0x0150 - 0x0000)
struct W_PreMission_PlanningMap_C_AddPreviewLinePoint final
{
public:
	struct FVector2D                              Coordinates;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      LinePoints;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	bool                                          FirstPoint;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                NodeWidget;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0030(0x0020)(NoDestructor)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData;                      // 0x0050(0x0040)(NoDestructor)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotPlayerController*            CallFunc_GetReadyOrNotPlayerController_ReturnValue; // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotPlayerState*                 K2Node_DynamicCast_AsReady_or_Not_Player_State;    // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors_1;                       // 0x00B0(0x0020)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData_1;                    // 0x00D8(0x0040)(NoDestructor)
	class AReadyOrNotPlayerController*            CallFunc_GetReadyOrNotPlayerController_ReturnValue_1; // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_OfficerMarker_C*                     CallFunc_Create_ReturnValue;                       // 0x0128(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      CallFunc_Create_ReturnValue_1;                     // 0x0130(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue_1;           // 0x0138(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_PlanningMap_Line_C*       CallFunc_Create_ReturnValue_2;                     // 0x0140(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_AddPreviewLinePoint) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_AddPreviewLinePoint");
static_assert(sizeof(W_PreMission_PlanningMap_C_AddPreviewLinePoint) == 0x000150, "Wrong size on W_PreMission_PlanningMap_C_AddPreviewLinePoint");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, Coordinates) == 0x000000, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, LinePoints) == 0x000010, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::LinePoints' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, FirstPoint) == 0x000020, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::FirstPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, NodeWidget) == 0x000028, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::NodeWidget' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, K2Node_MakeStruct_Anchors) == 0x000030, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, K2Node_MakeStruct_AnchorData) == 0x000050, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::K2Node_MakeStruct_AnchorData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_SelectFloat_ReturnValue) == 0x000090, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_GetReadyOrNotPlayerController_ReturnValue) == 0x000098, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_GetReadyOrNotPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, K2Node_DynamicCast_AsReady_or_Not_Player_State) == 0x0000A0, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::K2Node_DynamicCast_AsReady_or_Not_Player_State' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_Array_Add_ReturnValue) == 0x0000AC, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, K2Node_MakeStruct_Anchors_1) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::K2Node_MakeStruct_Anchors_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_AddChildToCanvas_ReturnValue) == 0x0000D0, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, K2Node_MakeStruct_AnchorData_1) == 0x0000D8, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::K2Node_MakeStruct_AnchorData_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_GetReadyOrNotPlayerController_ReturnValue_1) == 0x000118, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_GetReadyOrNotPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_Array_Add_ReturnValue_1) == 0x000120, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_Create_ReturnValue) == 0x000128, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_Create_ReturnValue_1) == 0x000130, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_AddChildToCanvas_ReturnValue_1) == 0x000138, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_AddChildToCanvas_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_Create_ReturnValue_2) == 0x000140, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_Array_Add_ReturnValue_2) == 0x000148, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_PlanningMap_C_BackPage final
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_BackPage) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_C_BackPage");
static_assert(sizeof(W_PreMission_PlanningMap_C_BackPage) == 0x000001, "Wrong size on W_PreMission_PlanningMap_C_BackPage");
static_assert(offsetof(W_PreMission_PlanningMap_C_BackPage, Handled) == 0x000000, "Member 'W_PreMission_PlanningMap_C_BackPage::Handled' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature final
{
public:
	class UW_PremissionTablet_Button_C*           TriggeringButton;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature");
static_assert(sizeof(W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature");
static_assert(offsetof(W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature, TriggeringButton) == 0x000000, "Member 'W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature::TriggeringButton' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.BndEvt__W_PreMission_PlanningMap_btn_Players_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Players_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature final
{
public:
	class UW_PremissionTablet_Button_C*           TriggeringButton;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Players_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Players_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature");
static_assert(sizeof(W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Players_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Players_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature");
static_assert(offsetof(W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Players_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature, TriggeringButton) == 0x000000, "Member 'W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Players_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature::TriggeringButton' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ChangeFloorByIndex
// 0x00E8 (0x00E8 - 0x0000)
struct W_PreMission_PlanningMap_C_ChangeFloorByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelFloorData                        FloorData;                                         // 0x0008(0x0080)(Edit, BlueprintVisible)
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0088(0x0010)(ReferenceParm)
	TArray<int32>                                 CallFunc_Map_Keys_Keys_1;                          // 0x0098(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item;                           // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_PlanningMap_Level_C*      CallFunc_Map_Find_Value;                           // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_GetLazyLoadedImage_ReturnValue;           // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Blueprint_GetSizeY_ReturnValue;           // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetUserSpecifiedScale_InUserSpecifiedScale_ImplicitCast; // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_ChangeFloorByIndex) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_ChangeFloorByIndex");
static_assert(sizeof(W_PreMission_PlanningMap_C_ChangeFloorByIndex) == 0x0000E8, "Wrong size on W_PreMission_PlanningMap_C_ChangeFloorByIndex");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, Index_0) == 0x000000, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, FloorData) == 0x000008, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::FloorData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Map_Keys_Keys) == 0x000088, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Map_Keys_Keys_1) == 0x000098, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Map_Keys_Keys_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Array_Get_Item) == 0x0000AC, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Map_Find_Value) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Map_Find_ReturnValue) == 0x0000B8, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_IsValid_ReturnValue) == 0x0000B9, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_GetLazyLoadedImage_ReturnValue) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_GetLazyLoadedImage_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Blueprint_GetSizeY_ReturnValue) == 0x0000C8, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Blueprint_GetSizeY_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0000D0, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_SetUserSpecifiedScale_InUserSpecifiedScale_ImplicitCast) == 0x0000E0, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_SetUserSpecifiedScale_InUserSpecifiedScale_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ChangeFloorByNumber
// 0x0098 (0x0098 - 0x0000)
struct W_PreMission_PlanningMap_C_ChangeFloorByNumber final
{
public:
	int32                                         FloorNumber;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelFloorData                        FloorData;                                         // 0x0008(0x0080)(Edit, BlueprintVisible)
	class UW_PreMission_PlanningMap_Level_C*      CallFunc_Map_Find_Value;                           // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_ChangeFloorByNumber) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_ChangeFloorByNumber");
static_assert(sizeof(W_PreMission_PlanningMap_C_ChangeFloorByNumber) == 0x000098, "Wrong size on W_PreMission_PlanningMap_C_ChangeFloorByNumber");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByNumber, FloorNumber) == 0x000000, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByNumber::FloorNumber' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByNumber, FloorData) == 0x000008, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByNumber::FloorData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByNumber, CallFunc_Map_Find_Value) == 0x000088, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByNumber::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByNumber, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByNumber::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_ChangePage final
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_ChangePage) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_ChangePage");
static_assert(sizeof(W_PreMission_PlanningMap_C_ChangePage) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_ChangePage");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangePage, PageName) == 0x000000, "Member 'W_PreMission_PlanningMap_C_ChangePage::PageName' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Clamp Map Coorinates to Screen View
// 0x0070 (0x0070 - 0x0000)
struct W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View final
{
public:
	double                                        in_x;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        in_y;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        X;                                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Y;                                                 // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWidgetSize_Absolute_ReturnValue;       // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View");
static_assert(sizeof(W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View) == 0x000070, "Wrong size on W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View");
static_assert(offsetof(W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View, in_x) == 0x000000, "Member 'W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View::in_x' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View, in_y) == 0x000008, "Member 'W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View::in_y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View, X) == 0x000010, "Member 'W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View::X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View, Y) == 0x000018, "Member 'W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View::Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View, CallFunc_GetWidgetSize_Absolute_ReturnValue) == 0x000020, "Member 'W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View::CallFunc_GetWidgetSize_Absolute_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000030, "Member 'W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View, CallFunc_BreakVector2D_X) == 0x000040, "Member 'W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View, CallFunc_BreakVector2D_Y) == 0x000048, "Member 'W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000050, "Member 'W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000058, "Member 'W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View, CallFunc_FClamp_ReturnValue) == 0x000060, "Member 'W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View, CallFunc_FClamp_ReturnValue_1) == 0x000068, "Member 'W_PreMission_PlanningMap_C_Clamp_Map_Coorinates_to_Screen_View::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.CloseRadial
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_PlanningMap_C_CloseRadial final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_CloseRadial) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_C_CloseRadial");
static_assert(sizeof(W_PreMission_PlanningMap_C_CloseRadial) == 0x000001, "Wrong size on W_PreMission_PlanningMap_C_CloseRadial");
static_assert(offsetof(W_PreMission_PlanningMap_C_CloseRadial, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_PreMission_PlanningMap_C_CloseRadial::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.CreateEntryPoints
// 0x08C8 (0x08C8 - 0x0000)
struct W_PreMission_PlanningMap_C_CreateEntryPoints final
{
public:
	struct FLevelDataLookupTable                  LevelDataLookupTable;                              // 0x0000(0x0880)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TDelegate<void(class UW_PreMission_Tablet_EntryPoint_C* Clicked)> OnEntryPointSelected;          // 0x0880(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class FName                                   PointTag;                                          // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   PointName;                                         // 0x0898(0x0018)(Edit, BlueprintVisible)
	TArray<struct FEntryPoint>                    EntryPoints;                                       // 0x08B0(0x0010)(Edit, BlueprintVisible)
	class UW_PreMission_Tablet_EntryPoint_C*      NewEntryPoint;                                     // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_CreateEntryPoints) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_CreateEntryPoints");
static_assert(sizeof(W_PreMission_PlanningMap_C_CreateEntryPoints) == 0x0008C8, "Wrong size on W_PreMission_PlanningMap_C_CreateEntryPoints");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, LevelDataLookupTable) == 0x000000, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::LevelDataLookupTable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, OnEntryPointSelected) == 0x000880, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::OnEntryPointSelected' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, PointTag) == 0x000890, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::PointTag' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, PointName) == 0x000898, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::PointName' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, EntryPoints) == 0x0008B0, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::EntryPoints' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, NewEntryPoint) == 0x0008C0, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::NewEntryPoint' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.CreateMapLevelCanvas
// 0x00C8 (0x00C8 - 0x0000)
struct W_PreMission_PlanningMap_C_CreateMapLevelCanvas final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelFloor                            LevelData;                                         // 0x0008(0x0068)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UW_PreMission_PlanningMap_Level_C*      LevelCanvas;                                       // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker, int32 FloorLevel, double Rotation)> K2Node_CreateDelegate_OutputDelegate; // 0x0078(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_PlanningMap_Level_C*      CallFunc_Create_ReturnValue;                       // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 LineID, class UCanvasPanel* LineCanvas)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0090(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 MarkerID, class UW_PreMission_Tablet_MapMarker_C* Marker)> K2Node_CreateDelegate_OutputDelegate_2; // 0x00A0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidgetSwitcherSlot*                    K2Node_DynamicCast_AsWidget_Switcher_Slot;         // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_CreateMapLevelCanvas");
static_assert(sizeof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas) == 0x0000C8, "Wrong size on W_PreMission_PlanningMap_C_CreateMapLevelCanvas");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, Index_0) == 0x000000, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::Index_0' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, LevelData) == 0x000008, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::LevelData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, LevelCanvas) == 0x000070, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::LevelCanvas' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, K2Node_CreateDelegate_OutputDelegate) == 0x000078, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, CallFunc_Create_ReturnValue) == 0x000088, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, K2Node_CreateDelegate_OutputDelegate_1) == 0x000090, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000A0, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, CallFunc_AddChild_ReturnValue) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, K2Node_DynamicCast_AsWidget_Switcher_Slot) == 0x0000B8, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::K2Node_DynamicCast_AsWidget_Switcher_Slot' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.DrawLine
// 0x0298 (0x0298 - 0x0000)
struct W_PreMission_PlanningMap_C_DrawLine final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlanningLine                          LineData;                                          // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AReadyOrNotPlayerState*                 NewLocalVar;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotPlayerState*                 LineOwner;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas;                                            // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_PlanningMap_Line_C*       Line;                                              // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          LastNode;                                          // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        EndOffset;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartOffset;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PreviousPoint;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Coordinates;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                NodeWidget;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstNode;                                         // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_PlanningMap_Line_C*       CallFunc_Create_ReturnValue;                       // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotPlayerState*                 CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue; // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_BP_GetUniqueIdString_ReturnValue;         // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerBanned_ReturnValue;               // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_OfficerMarker_C*                     CallFunc_Create_ReturnValue_1;                     // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      CallFunc_Create_ReturnValue_2;                     // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Array_Get_Item;                           // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UW_OfficerMarker_C* TriggeringMarker)> K2Node_CreateDelegate_OutputDelegate; // 0x00F4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetPlayerTeamColor_LinearColor;           // 0x0104(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetPlayerTeamColor_SlateColor;            // 0x0114(0x0014)()
	TDelegate<void(class UW_OfficerMarker_C* TriggeringMarker)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0128(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0138(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0140(0x0020)(NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnchorData                            K2Node_MakeStruct_AnchorData;                      // 0x0168(0x0040)(NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLineAngle_Angle;                       // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLineLength_Length;                     // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors_1;                       // 0x01C0(0x0020)(NoDestructor)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData_1;                    // 0x01E0(0x0040)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue_1;           // 0x0220(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           CallFunc_SpawnObject_ReturnValue;                  // 0x0228(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors_2;                       // 0x0230(0x0020)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue_2;           // 0x0250(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData_2;                    // 0x0258(0x0040)(NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_DrawLine) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_DrawLine");
static_assert(sizeof(W_PreMission_PlanningMap_C_DrawLine) == 0x000298, "Wrong size on W_PreMission_PlanningMap_C_DrawLine");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_DrawLine::ID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, LineData) == 0x000008, "Member 'W_PreMission_PlanningMap_C_DrawLine::LineData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, NewLocalVar) == 0x000030, "Member 'W_PreMission_PlanningMap_C_DrawLine::NewLocalVar' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, LineOwner) == 0x000038, "Member 'W_PreMission_PlanningMap_C_DrawLine::LineOwner' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, Canvas) == 0x000040, "Member 'W_PreMission_PlanningMap_C_DrawLine::Canvas' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, Line) == 0x000048, "Member 'W_PreMission_PlanningMap_C_DrawLine::Line' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, LastNode) == 0x000050, "Member 'W_PreMission_PlanningMap_C_DrawLine::LastNode' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, EndOffset) == 0x000058, "Member 'W_PreMission_PlanningMap_C_DrawLine::EndOffset' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, StartOffset) == 0x000060, "Member 'W_PreMission_PlanningMap_C_DrawLine::StartOffset' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, PreviousPoint) == 0x000068, "Member 'W_PreMission_PlanningMap_C_DrawLine::PreviousPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, Coordinates) == 0x000078, "Member 'W_PreMission_PlanningMap_C_DrawLine::Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, NodeWidget) == 0x000088, "Member 'W_PreMission_PlanningMap_C_DrawLine::NodeWidget' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, FirstNode) == 0x000090, "Member 'W_PreMission_PlanningMap_C_DrawLine::FirstNode' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Create_ReturnValue) == 0x000098, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Array_Length_ReturnValue) == 0x0000A0, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Array_LastIndex_ReturnValue) == 0x0000A4, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_BP_GetUniqueIdString_ReturnValue) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_BP_GetUniqueIdString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_IsPlayerBanned_ReturnValue) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_IsPlayerBanned_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Create_ReturnValue_1) == 0x0000C8, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Create_ReturnValue_2) == 0x0000D0, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, Temp_int_Array_Index_Variable) == 0x0000D8, "Member 'W_PreMission_PlanningMap_C_DrawLine::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Array_Get_Item) == 0x0000E0, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000F0, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000F1, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_CreateDelegate_OutputDelegate) == 0x0000F4, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_GetPlayerTeamColor_LinearColor) == 0x000104, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_GetPlayerTeamColor_LinearColor' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_GetPlayerTeamColor_SlateColor) == 0x000114, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_GetPlayerTeamColor_SlateColor' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_CreateDelegate_OutputDelegate_1) == 0x000128, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_AddChildToCanvas_ReturnValue) == 0x000138, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_MakeStruct_Anchors) == 0x000140, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, Temp_int_Loop_Counter_Variable) == 0x000160, "Member 'W_PreMission_PlanningMap_C_DrawLine::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_MakeStruct_AnchorData) == 0x000168, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_MakeStruct_AnchorData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Less_IntInt_ReturnValue) == 0x0001A8, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Add_IntInt_ReturnValue) == 0x0001AC, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_GetLineAngle_Angle) == 0x0001B0, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_GetLineAngle_Angle' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_GetLineLength_Length) == 0x0001B8, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_GetLineLength_Length' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_MakeStruct_Anchors_1) == 0x0001C0, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_MakeStruct_Anchors_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_MakeStruct_AnchorData_1) == 0x0001E0, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_MakeStruct_AnchorData_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_AddChildToCanvas_ReturnValue_1) == 0x000220, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_AddChildToCanvas_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_SpawnObject_ReturnValue) == 0x000228, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_MakeStruct_Anchors_2) == 0x000230, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_MakeStruct_Anchors_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_AddChildToCanvas_ReturnValue_2) == 0x000250, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_AddChildToCanvas_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_MakeStruct_AnchorData_2) == 0x000258, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_MakeStruct_AnchorData_2' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.DrawMarker
// 0x0040 (0x0040 - 0x0000)
struct W_PreMission_PlanningMap_C_DrawMarker final
{
public:
	int32                                         MarkerID;                                          // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlanningMarker                        MarkerData;                                        // 0x0008(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UW_PreMission_Tablet_MapMarker_C*       Marker;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_DrawMarker) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_DrawMarker");
static_assert(sizeof(W_PreMission_PlanningMap_C_DrawMarker) == 0x000040, "Wrong size on W_PreMission_PlanningMap_C_DrawMarker");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawMarker, MarkerID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_DrawMarker::MarkerID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawMarker, MarkerData) == 0x000008, "Member 'W_PreMission_PlanningMap_C_DrawMarker::MarkerData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawMarker, Marker) == 0x000038, "Member 'W_PreMission_PlanningMap_C_DrawMarker::Marker' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.EndMarkerRotation
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_C_EndMarkerRotation final
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       TriggeringMarker;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_EndMarkerRotation) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_EndMarkerRotation");
static_assert(sizeof(W_PreMission_PlanningMap_C_EndMarkerRotation) == 0x000010, "Wrong size on W_PreMission_PlanningMap_C_EndMarkerRotation");
static_assert(offsetof(W_PreMission_PlanningMap_C_EndMarkerRotation, TriggeringMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_C_EndMarkerRotation::TriggeringMarker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_EndMarkerRotation, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'W_PreMission_PlanningMap_C_EndMarkerRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_EndMarkerRotation, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000009, "Member 'W_PreMission_PlanningMap_C_EndMarkerRotation::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.EraseLine
// 0x0018 (0x0018 - 0x0000)
struct W_PreMission_PlanningMap_C_EraseLine final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_EraseLine) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_EraseLine");
static_assert(sizeof(W_PreMission_PlanningMap_C_EraseLine) == 0x000018, "Wrong size on W_PreMission_PlanningMap_C_EraseLine");
static_assert(offsetof(W_PreMission_PlanningMap_C_EraseLine, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_EraseLine::ID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_EraseLine, CallFunc_Map_Remove_ReturnValue) == 0x000004, "Member 'W_PreMission_PlanningMap_C_EraseLine::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_EraseLine, CallFunc_Map_Find_Value) == 0x000008, "Member 'W_PreMission_PlanningMap_C_EraseLine::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_EraseLine, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_C_EraseLine::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ExecuteUbergraph_W_PreMission_PlanningMap
// 0x1440 (0x1440 - 0x0000)
struct W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMultiplayer_ReturnValue;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PremissionTablet_Button_C*           K2Node_ComponentBoundEvent_TriggeringButton_1;     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Toggle_IsOpen;                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_MarkerID;                       // 0x0014(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UW_PreMission_Tablet_MapMarker_C* K2Node_CustomEvent_Marker;                         // 0x0018(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_Tablet_EntryPoint_C*      K2Node_CustomEvent_Clicked;                        // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_PageName;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0030(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsGamepad;                            // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_ID_3;                                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlanningMarker                        K2Node_Event_Marker;                               // 0x0078(0x0030)(ConstParm, NoDestructor)
	double                                        K2Node_Event_Delay_1;                              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_MissionURL;                           // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  K2Node_Event_LevelData_1;                          // 0x00C0(0x0880)()
	double                                        K2Node_Event_Delay;                                // 0x0940(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x0948(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_949[0x7];                                      // 0x0949(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0950(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FEntryPoint                            K2Node_Event_NewEntryPoint;                        // 0x0958(0x00A8)()
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0A00(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A01[0x3];                                      // 0x0A01(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_LineID;                         // 0x0A04(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UCanvasPanel*                     K2Node_CustomEvent_LineCanvas;                     // 0x0A08(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_PreMission_Tablet_EntryPoint_C* Clicked)> K2Node_CreateDelegate_OutputDelegate; // 0x0A10(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0A20(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0A28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0A29(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0A2A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2B[0x1];                                      // 0x0A2B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_InGeometry;                           // 0x0A2C(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A64[0x4];                                      // 0x0A64(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_InMouseEvent;                         // 0x0A68(0x0078)(ConstParm)
	double                                        K2Node_Event_CurrentZoom;                          // 0x0AE0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_ID_2;                                 // 0x0AE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_ID_1;                                 // 0x0AEC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlanningLine                          K2Node_Event_Line;                                 // 0x0AF0(0x0028)(ConstParm)
	int32                                         K2Node_Event_ID;                                   // 0x0B18(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1C[0x4];                                      // 0x0B1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_URL;                                  // 0x0B20(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  K2Node_Event_LevelData;                            // 0x0B30(0x0880)(ConstParm)
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x13B0(0x0008)(NoDestructor)
	class UW_PreMission_PlanningMap_Level_C*      CallFunc_Map_Find_Value;                           // 0x13B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x13C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C1[0x7];                                     // 0x13C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_PlanningMap_Level_C*      CallFunc_Map_Find_Value_1;                         // 0x13C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x13D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13D1[0x3];                                     // 0x13D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate_1;          // 0x13D4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13E4[0x4];                                     // 0x13E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_MapMarker_C*       CallFunc_Map_Find_Value_2;                         // 0x13E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x13F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x13F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              K2Node_CustomEvent_bNewInputType;                  // 0x13F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x13F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMissionPlanLineColors                 CallFunc_GetPlanLineColors_Colors;                 // 0x13F4(0x0030)(NoDestructor)
	uint8                                         Pad_1424[0x4];                                     // 0x1424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PremissionTablet_Button_C*           K2Node_ComponentBoundEvent_TriggeringButton;       // 0x1428(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Toggle_IsOpen_1;                          // 0x1430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Toggle_IsOpen_2;                          // 0x1431(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMultiplayer_ReturnValue_1;              // 0x1432(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1433[0x1];                                     // 0x1433(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetUserSpecifiedScale_InUserSpecifiedScale_ImplicitCast; // 0x1434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Gamepad_Zoom_Map_DeltaTime_ImplicitCast;  // 0x1438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap");
static_assert(sizeof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap) == 0x001440, "Wrong size on W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, EntryPoint) == 0x000000, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_IsMultiplayer_ReturnValue) == 0x000004, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_IsMultiplayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_ComponentBoundEvent_TriggeringButton_1) == 0x000008, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_ComponentBoundEvent_TriggeringButton_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Toggle_IsOpen) == 0x000010, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Toggle_IsOpen' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_IsDesignTime) == 0x000011, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CustomEvent_MarkerID) == 0x000014, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CustomEvent_MarkerID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CustomEvent_Marker) == 0x000018, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CustomEvent_Marker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CustomEvent_Clicked) == 0x000020, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CustomEvent_Clicked' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_PageName) == 0x000028, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_MyGeometry) == 0x000030, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_InDeltaTime) == 0x000068, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_IsGamepad) == 0x00006C, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_ID_3) == 0x000070, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_ID_3' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_Marker) == 0x000078, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_Marker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_Delay_1) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_MissionURL) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_MissionURL' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_LevelData_1) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_LevelData_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_Delay) == 0x000940, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_Collapse) == 0x000948, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_GetOwningPlayer_ReturnValue) == 0x000950, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_NewEntryPoint) == 0x000958, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_NewEntryPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_HasAuthority_ReturnValue) == 0x000A00, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CustomEvent_LineID) == 0x000A04, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CustomEvent_LineID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CustomEvent_LineCanvas) == 0x000A08, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CustomEvent_LineCanvas' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CreateDelegate_OutputDelegate) == 0x000A10, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000A20, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_GetCurrentInputType_ReturnValue) == 0x000A28, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_IsValid_ReturnValue) == 0x000A29, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000A2A, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_InGeometry) == 0x000A2C, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_InGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_InMouseEvent) == 0x000A68, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_InMouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_CurrentZoom) == 0x000AE0, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_CurrentZoom' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_ID_2) == 0x000AE8, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_ID_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_ID_1) == 0x000AEC, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_ID_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_Line) == 0x000AF0, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_Line' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_ID) == 0x000B18, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_ID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_URL) == 0x000B20, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_URL' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_LevelData) == 0x000B30, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_LevelData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_InFocusEvent) == 0x0013B0, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Map_Find_Value) == 0x0013B8, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Map_Find_ReturnValue) == 0x0013C0, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Map_Find_Value_1) == 0x0013C8, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Map_Find_ReturnValue_1) == 0x0013D0, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CreateDelegate_OutputDelegate_1) == 0x0013D4, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Map_Find_Value_2) == 0x0013E8, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Map_Find_ReturnValue_2) == 0x0013F0, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_IsValid_ReturnValue_1) == 0x0013F1, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CustomEvent_bNewInputType) == 0x0013F2, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CustomEvent_bNewInputType' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0013F3, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_GetPlanLineColors_Colors) == 0x0013F4, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_GetPlanLineColors_Colors' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_ComponentBoundEvent_TriggeringButton) == 0x001428, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_ComponentBoundEvent_TriggeringButton' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Toggle_IsOpen_1) == 0x001430, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Toggle_IsOpen_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Toggle_IsOpen_2) == 0x001431, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Toggle_IsOpen_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_IsMultiplayer_ReturnValue_1) == 0x001432, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_IsMultiplayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_SetUserSpecifiedScale_InUserSpecifiedScale_ImplicitCast) == 0x001434, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_SetUserSpecifiedScale_InUserSpecifiedScale_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Gamepad_Zoom_Map_DeltaTime_ImplicitCast) == 0x001438, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Gamepad_Zoom_Map_DeltaTime_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Gamepad Move Map
// 0x00C0 (0x00C0 - 0x0000)
struct W_PreMission_PlanningMap_C_Gamepad_Move_Map final
{
public:
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadMidPoint_Coordinates;           // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Clamp_Map_Coorinates_to_Screen_View_x;    // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Clamp_Map_Coorinates_to_Screen_View_y;    // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_Gamepad_Move_Map) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_Gamepad_Move_Map");
static_assert(sizeof(W_PreMission_PlanningMap_C_Gamepad_Move_Map) == 0x0000C0, "Wrong size on W_PreMission_PlanningMap_C_Gamepad_Move_Map");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_VSize_ReturnValue) == 0x000000, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_BreakVector_X) == 0x000018, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_BreakVector_Y) == 0x000020, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_BreakVector_Z) == 0x000028, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_GetGamepadMidPoint_Coordinates) == 0x000030, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_GetGamepadMidPoint_Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000040, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000048, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000058, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000060, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_GetPosition_ReturnValue) == 0x000068, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000078, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_BreakVector2D_X) == 0x000080, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_BreakVector2D_Y) == 0x000088, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000090, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_Clamp_Map_Coorinates_to_Screen_View_x) == 0x0000A0, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_Clamp_Map_Coorinates_to_Screen_View_x' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_Clamp_Map_Coorinates_to_Screen_View_y) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_Clamp_Map_Coorinates_to_Screen_View_y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Move_Map, CallFunc_MakeVector2D_ReturnValue) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_Gamepad_Move_Map::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Gamepad Zoom Map
// 0x0018 (0x0018 - 0x0000)
struct W_PreMission_PlanningMap_C_Gamepad_Zoom_Map final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_Gamepad_Zoom_Map) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_Gamepad_Zoom_Map");
static_assert(sizeof(W_PreMission_PlanningMap_C_Gamepad_Zoom_Map) == 0x000018, "Wrong size on W_PreMission_PlanningMap_C_Gamepad_Zoom_Map");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Zoom_Map, DeltaTime) == 0x000000, "Member 'W_PreMission_PlanningMap_C_Gamepad_Zoom_Map::DeltaTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Zoom_Map, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'W_PreMission_PlanningMap_C_Gamepad_Zoom_Map::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Zoom_Map, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_C_Gamepad_Zoom_Map::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Gamepad_Zoom_Map, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000011, "Member 'W_PreMission_PlanningMap_C_Gamepad_Zoom_Map::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetCurrentLevelMap
// 0x0018 (0x0018 - 0x0000)
struct W_PreMission_PlanningMap_C_GetCurrentLevelMap final
{
public:
	class UW_PreMission_PlanningMap_Level_C*      CurrentLevelCanvas;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_PlanningMap_Level_C*      CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_GetCurrentLevelMap) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_GetCurrentLevelMap");
static_assert(sizeof(W_PreMission_PlanningMap_C_GetCurrentLevelMap) == 0x000018, "Wrong size on W_PreMission_PlanningMap_C_GetCurrentLevelMap");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetCurrentLevelMap, CurrentLevelCanvas) == 0x000000, "Member 'W_PreMission_PlanningMap_C_GetCurrentLevelMap::CurrentLevelCanvas' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetCurrentLevelMap, CallFunc_Map_Find_Value) == 0x000008, "Member 'W_PreMission_PlanningMap_C_GetCurrentLevelMap::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetCurrentLevelMap, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_C_GetCurrentLevelMap::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetGamepadMidPoint
// 0x0068 (0x0068 - 0x0000)
struct W_PreMission_PlanningMap_C_GetGamepadMidPoint final
{
public:
	struct FVector2D                              Coordinates;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWidgetSize_Absolute_ReturnValue;       // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DFloat_ReturnValue;       // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue;      // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_GetGamepadMidPoint) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_GetGamepadMidPoint");
static_assert(sizeof(W_PreMission_PlanningMap_C_GetGamepadMidPoint) == 0x000068, "Wrong size on W_PreMission_PlanningMap_C_GetGamepadMidPoint");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetGamepadMidPoint, Coordinates) == 0x000000, "Member 'W_PreMission_PlanningMap_C_GetGamepadMidPoint::Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetGamepadMidPoint, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_C_GetGamepadMidPoint::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetGamepadMidPoint, CallFunc_GetWidgetSize_Absolute_ReturnValue) == 0x000018, "Member 'W_PreMission_PlanningMap_C_GetGamepadMidPoint::CallFunc_GetWidgetSize_Absolute_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetGamepadMidPoint, CallFunc_GetPosition_ReturnValue) == 0x000028, "Member 'W_PreMission_PlanningMap_C_GetGamepadMidPoint::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetGamepadMidPoint, CallFunc_Subtract_Vector2DFloat_ReturnValue) == 0x000038, "Member 'W_PreMission_PlanningMap_C_GetGamepadMidPoint::CallFunc_Subtract_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetGamepadMidPoint, CallFunc_Divide_Vector2DVector2D_ReturnValue) == 0x000048, "Member 'W_PreMission_PlanningMap_C_GetGamepadMidPoint::CallFunc_Divide_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetGamepadMidPoint, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000058, "Member 'W_PreMission_PlanningMap_C_GetGamepadMidPoint::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetLineAngle
// 0x00A8 (0x00A8 - 0x0000)
struct W_PreMission_PlanningMap_C_GetLineAngle final
{
public:
	struct FVector2D                              PointA;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PointB;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_Angle_ImplicitCast;          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_GetLineAngle) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_GetLineAngle");
static_assert(sizeof(W_PreMission_PlanningMap_C_GetLineAngle) == 0x0000A8, "Wrong size on W_PreMission_PlanningMap_C_GetLineAngle");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, PointA) == 0x000000, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::PointA' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, PointB) == 0x000010, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::PointB' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, Angle) == 0x000020, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::Angle' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_BreakVector2D_X) == 0x000028, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_BreakVector2D_Y) == 0x000030, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_BreakVector2D_X_1) == 0x000038, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_BreakVector2D_Y_1) == 0x000040, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_MakeVector_ReturnValue) == 0x000048, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_MakeVector_ReturnValue_1) == 0x000060, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_FindLookAtRotation_ReturnValue) == 0x000078, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_BreakRotator_Roll) == 0x000090, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_BreakRotator_Pitch) == 0x000094, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_BreakRotator_Yaw) == 0x000098, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, K2Node_FunctionResult_Angle_ImplicitCast) == 0x0000A0, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::K2Node_FunctionResult_Angle_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetLineLength
// 0x0068 (0x0068 - 0x0000)
struct W_PreMission_PlanningMap_C_GetLineLength final
{
public:
	struct FVector2D                              PointA;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PointB;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Length;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWidgetSize_Absolute_ReturnValue;       // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue_1;  // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Distance2D_ReturnValue;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_GetLineLength) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_GetLineLength");
static_assert(sizeof(W_PreMission_PlanningMap_C_GetLineLength) == 0x000068, "Wrong size on W_PreMission_PlanningMap_C_GetLineLength");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, PointA) == 0x000000, "Member 'W_PreMission_PlanningMap_C_GetLineLength::PointA' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, PointB) == 0x000010, "Member 'W_PreMission_PlanningMap_C_GetLineLength::PointB' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, Length) == 0x000020, "Member 'W_PreMission_PlanningMap_C_GetLineLength::Length' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, CallFunc_GetWidgetSize_Absolute_ReturnValue) == 0x000028, "Member 'W_PreMission_PlanningMap_C_GetLineLength::CallFunc_GetWidgetSize_Absolute_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x000038, "Member 'W_PreMission_PlanningMap_C_GetLineLength::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, CallFunc_Multiply_Vector2DVector2D_ReturnValue_1) == 0x000048, "Member 'W_PreMission_PlanningMap_C_GetLineLength::CallFunc_Multiply_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, CallFunc_Distance2D_ReturnValue) == 0x000058, "Member 'W_PreMission_PlanningMap_C_GetLineLength::CallFunc_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000060, "Member 'W_PreMission_PlanningMap_C_GetLineLength::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetVectorOverThreshold
// 0x0050 (0x0050 - 0x0000)
struct W_PreMission_PlanningMap_C_GetVectorOverThreshold final
{
public:
	struct FVector2D                              Delta;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Threshold;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_GetVectorOverThreshold) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_GetVectorOverThreshold");
static_assert(sizeof(W_PreMission_PlanningMap_C_GetVectorOverThreshold) == 0x000050, "Wrong size on W_PreMission_PlanningMap_C_GetVectorOverThreshold");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, Delta) == 0x000000, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::Delta' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, Threshold) == 0x000010, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::Threshold' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, ReturnValue) == 0x000018, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, CallFunc_BreakVector2D_X) == 0x000020, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, CallFunc_Abs_ReturnValue) == 0x000030, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, CallFunc_Abs_ReturnValue_1) == 0x000038, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, CallFunc_FMax_ReturnValue) == 0x000040, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000048, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GoBackInRadial
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_PlanningMap_C_GoBackInRadial final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_GoBackInRadial) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_C_GoBackInRadial");
static_assert(sizeof(W_PreMission_PlanningMap_C_GoBackInRadial) == 0x000001, "Wrong size on W_PreMission_PlanningMap_C_GoBackInRadial");
static_assert(offsetof(W_PreMission_PlanningMap_C_GoBackInRadial, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_PreMission_PlanningMap_C_GoBackInRadial::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.HandleEntryPointsBorderClicked
// 0x0220 (0x0220 - 0x0000)
struct W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0168(0x00B8)()
};
static_assert(alignof(W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked");
static_assert(sizeof(W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked) == 0x000220, "Wrong size on W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked, MouseEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked, ReturnValue) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked, CallFunc_Handled_ReturnValue) == 0x000168, "Member 'W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Hide
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_C_Hide final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_Hide) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_Hide");
static_assert(sizeof(W_PreMission_PlanningMap_C_Hide) == 0x000010, "Wrong size on W_PreMission_PlanningMap_C_Hide");
static_assert(offsetof(W_PreMission_PlanningMap_C_Hide, Delay) == 0x000000, "Member 'W_PreMission_PlanningMap_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Hide, Collapse) == 0x000008, "Member 'W_PreMission_PlanningMap_C_Hide::Collapse' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.IsGamepadCrosshairHovering
// 0x0004 (0x0004 - 0x0000)
struct W_PreMission_PlanningMap_C_IsGamepadCrosshairHovering final
{
public:
	bool                                          Hovering;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_IsGamepadCrosshairHovering) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_C_IsGamepadCrosshairHovering");
static_assert(sizeof(W_PreMission_PlanningMap_C_IsGamepadCrosshairHovering) == 0x000004, "Wrong size on W_PreMission_PlanningMap_C_IsGamepadCrosshairHovering");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsGamepadCrosshairHovering, Hovering) == 0x000000, "Member 'W_PreMission_PlanningMap_C_IsGamepadCrosshairHovering::Hovering' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsGamepadCrosshairHovering, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000001, "Member 'W_PreMission_PlanningMap_C_IsGamepadCrosshairHovering::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsGamepadCrosshairHovering, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000002, "Member 'W_PreMission_PlanningMap_C_IsGamepadCrosshairHovering::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsGamepadCrosshairHovering, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'W_PreMission_PlanningMap_C_IsGamepadCrosshairHovering::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.IsValidEntryPoint
// 0x0030 (0x0030 - 0x0000)
struct W_PreMission_PlanningMap_C_IsValidEntryPoint final
{
public:
	TArray<ECOOPMode>                             ExcludedGameModes;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetSelectedMode_OutMode;                  // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSelectedMode_ReturnValue;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECOOPMode                                     CallFunc_GetCoopModeFromModeName_ReturnValue;      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_IsValidEntryPoint) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_IsValidEntryPoint");
static_assert(sizeof(W_PreMission_PlanningMap_C_IsValidEntryPoint) == 0x000030, "Wrong size on W_PreMission_PlanningMap_C_IsValidEntryPoint");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsValidEntryPoint, ExcludedGameModes) == 0x000000, "Member 'W_PreMission_PlanningMap_C_IsValidEntryPoint::ExcludedGameModes' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsValidEntryPoint, IsValid) == 0x000010, "Member 'W_PreMission_PlanningMap_C_IsValidEntryPoint::IsValid' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsValidEntryPoint, CallFunc_GetSelectedMode_OutMode) == 0x000018, "Member 'W_PreMission_PlanningMap_C_IsValidEntryPoint::CallFunc_GetSelectedMode_OutMode' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsValidEntryPoint, CallFunc_GetSelectedMode_ReturnValue) == 0x000028, "Member 'W_PreMission_PlanningMap_C_IsValidEntryPoint::CallFunc_GetSelectedMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsValidEntryPoint, CallFunc_GetCoopModeFromModeName_ReturnValue) == 0x000029, "Member 'W_PreMission_PlanningMap_C_IsValidEntryPoint::CallFunc_GetCoopModeFromModeName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsValidEntryPoint, CallFunc_Array_Contains_ReturnValue) == 0x00002A, "Member 'W_PreMission_PlanningMap_C_IsValidEntryPoint::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsValidEntryPoint, CallFunc_Not_PreBool_ReturnValue) == 0x00002B, "Member 'W_PreMission_PlanningMap_C_IsValidEntryPoint::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.LineDrawn
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_C_LineDrawn final
{
public:
	int32                                         LineID;                                            // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UCanvasPanel*                     LineCanvas;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_LineDrawn) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_LineDrawn");
static_assert(sizeof(W_PreMission_PlanningMap_C_LineDrawn) == 0x000010, "Wrong size on W_PreMission_PlanningMap_C_LineDrawn");
static_assert(offsetof(W_PreMission_PlanningMap_C_LineDrawn, LineID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_LineDrawn::LineID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_LineDrawn, LineCanvas) == 0x000008, "Member 'W_PreMission_PlanningMap_C_LineDrawn::LineCanvas' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.LineStartNodeRightClicked
// 0x0020 (0x0020 - 0x0000)
struct W_PreMission_PlanningMap_C_LineStartNodeRightClicked final
{
public:
	class UW_OfficerMarker_C*                     OfficerMarker;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_LineStartNodeRightClicked) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_LineStartNodeRightClicked");
static_assert(sizeof(W_PreMission_PlanningMap_C_LineStartNodeRightClicked) == 0x000020, "Wrong size on W_PreMission_PlanningMap_C_LineStartNodeRightClicked");
static_assert(offsetof(W_PreMission_PlanningMap_C_LineStartNodeRightClicked, OfficerMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_C_LineStartNodeRightClicked::OfficerMarker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_LineStartNodeRightClicked, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'W_PreMission_PlanningMap_C_LineStartNodeRightClicked::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_LineStartNodeRightClicked, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_C_LineStartNodeRightClicked::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_LineStartNodeRightClicked, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000018, "Member 'W_PreMission_PlanningMap_C_LineStartNodeRightClicked::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.LineStartNodeSelected
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_LineStartNodeSelected final
{
public:
	class UW_OfficerMarker_C*                     OfficerMarker;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_LineStartNodeSelected) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_LineStartNodeSelected");
static_assert(sizeof(W_PreMission_PlanningMap_C_LineStartNodeSelected) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_LineStartNodeSelected");
static_assert(offsetof(W_PreMission_PlanningMap_C_LineStartNodeSelected, OfficerMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_C_LineStartNodeSelected::OfficerMarker' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.MapMarkerDrawn
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_C_MapMarkerDrawn final
{
public:
	int32                                         MarkerID;                                          // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UW_PreMission_Tablet_MapMarker_C* Marker;                                            // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_MapMarkerDrawn) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_MapMarkerDrawn");
static_assert(sizeof(W_PreMission_PlanningMap_C_MapMarkerDrawn) == 0x000010, "Wrong size on W_PreMission_PlanningMap_C_MapMarkerDrawn");
static_assert(offsetof(W_PreMission_PlanningMap_C_MapMarkerDrawn, MarkerID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_MapMarkerDrawn::MarkerID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MapMarkerDrawn, Marker) == 0x000008, "Member 'W_PreMission_PlanningMap_C_MapMarkerDrawn::Marker' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.MarkerRotated
// 0x0050 (0x0050 - 0x0000)
struct W_PreMission_PlanningMap_C_MarkerRotated final
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       TriggeringMarker;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Floor;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Rotation;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlanningMarker                        K2Node_MakeStruct_PlanningMarker;                  // 0x0018(0x0030)(NoDestructor)
	float                                         K2Node_MakeStruct_Rotation_ImplicitCast;           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_MarkerRotated) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_MarkerRotated");
static_assert(sizeof(W_PreMission_PlanningMap_C_MarkerRotated) == 0x000050, "Wrong size on W_PreMission_PlanningMap_C_MarkerRotated");
static_assert(offsetof(W_PreMission_PlanningMap_C_MarkerRotated, TriggeringMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_C_MarkerRotated::TriggeringMarker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MarkerRotated, Floor) == 0x000008, "Member 'W_PreMission_PlanningMap_C_MarkerRotated::Floor' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MarkerRotated, Rotation) == 0x000010, "Member 'W_PreMission_PlanningMap_C_MarkerRotated::Rotation' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MarkerRotated, K2Node_MakeStruct_PlanningMarker) == 0x000018, "Member 'W_PreMission_PlanningMap_C_MarkerRotated::K2Node_MakeStruct_PlanningMarker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MarkerRotated, K2Node_MakeStruct_Rotation_ImplicitCast) == 0x000048, "Member 'W_PreMission_PlanningMap_C_MarkerRotated::K2Node_MakeStruct_Rotation_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.MissionChanged
// 0x0890 (0x0890 - 0x0000)
struct W_PreMission_PlanningMap_C_MissionChanged final
{
public:
	class FString                                 MissionURL;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  LevelData;                                         // 0x0010(0x0880)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_PreMission_PlanningMap_C_MissionChanged) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_MissionChanged");
static_assert(sizeof(W_PreMission_PlanningMap_C_MissionChanged) == 0x000890, "Wrong size on W_PreMission_PlanningMap_C_MissionChanged");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionChanged, MissionURL) == 0x000000, "Member 'W_PreMission_PlanningMap_C_MissionChanged::MissionURL' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionChanged, LevelData) == 0x000010, "Member 'W_PreMission_PlanningMap_C_MissionChanged::LevelData' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.MissionSetup
// 0x0928 (0x0928 - 0x0000)
struct W_PreMission_PlanningMap_C_MissionSetup final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  LevelData;                                         // 0x0010(0x0880)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0890(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_891[0x3];                                      // 0x0891(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0894(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0898(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x089C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x089D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89E[0x2];                                      // 0x089E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x08A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x08A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLevelFloor                            CallFunc_Array_Get_Item;                           // 0x08A8(0x0068)()
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0910(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_911[0x3];                                      // 0x0911(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0914(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0918(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_StrStr_ReturnValue;              // 0x0920(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_921[0x3];                                      // 0x0921(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetUserSpecifiedScale_InUserSpecifiedScale_ImplicitCast; // 0x0924(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_MissionSetup) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_MissionSetup");
static_assert(sizeof(W_PreMission_PlanningMap_C_MissionSetup) == 0x000928, "Wrong size on W_PreMission_PlanningMap_C_MissionSetup");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, URL) == 0x000000, "Member 'W_PreMission_PlanningMap_C_MissionSetup::URL' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, LevelData) == 0x000010, "Member 'W_PreMission_PlanningMap_C_MissionSetup::LevelData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000890, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_Array_Length_ReturnValue) == 0x000894, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_Array_Length_ReturnValue_1) == 0x000898, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_Greater_IntInt_ReturnValue) == 0x00089C, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_IsEmpty_ReturnValue) == 0x00089D, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, Temp_int_Array_Index_Variable) == 0x0008A0, "Member 'W_PreMission_PlanningMap_C_MissionSetup::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, Temp_int_Loop_Counter_Variable) == 0x0008A4, "Member 'W_PreMission_PlanningMap_C_MissionSetup::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_Array_Get_Item) == 0x0008A8, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_Less_IntInt_ReturnValue) == 0x000910, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_Add_IntInt_ReturnValue) == 0x000914, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000918, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_NotEqual_StrStr_ReturnValue) == 0x000920, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_NotEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_SetUserSpecifiedScale_InUserSpecifiedScale_ImplicitCast) == 0x000924, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_SetUserSpecifiedScale_InUserSpecifiedScale_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnAnalogValueChanged
// 0x0370 (0x0370 - 0x0000)
struct W_PreMission_PlanningMap_C_OnAnalogValueChanged final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FAnalogInputEvent                      InAnalogInputEvent;                                // 0x0038(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0080(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0138(0x00B8)()
	float                                         CallFunc_GetAnalogValue_ReturnValue;               // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnalogValue_ReturnValue_1;             // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKeyEvent                              CallFunc_GetKeyEventFromAnalogInputEvent_ReturnValue; // 0x01F8(0x0040)()
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x0238(0x0018)(HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0288(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x02A8(0x00B8)()
	double                                        CallFunc_MakeVector_Y_ImplicitCast;                // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_X_ImplicitCast;                // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnAnalogValueChanged) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnAnalogValueChanged");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnAnalogValueChanged) == 0x000370, "Wrong size on W_PreMission_PlanningMap_C_OnAnalogValueChanged");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, InAnalogInputEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::InAnalogInputEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, ReturnValue) == 0x000080, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_Unhandled_ReturnValue) == 0x000138, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_GetAnalogValue_ReturnValue) == 0x0001F0, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_GetAnalogValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_GetAnalogValue_ReturnValue_1) == 0x0001F4, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_GetAnalogValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_GetKeyEventFromAnalogInputEvent_ReturnValue) == 0x0001F8, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_GetKeyEventFromAnalogInputEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_GetKey_ReturnValue) == 0x000238, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_BreakVector_X) == 0x000250, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_BreakVector_Y) == 0x000258, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_BreakVector_Z) == 0x000260, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000268, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_MakeVector_ReturnValue) == 0x000270, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_MakeVector_ReturnValue_1) == 0x000288, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x0002A0, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_Handled_ReturnValue) == 0x0002A8, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_MakeVector_Y_ImplicitCast) == 0x000360, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_MakeVector_Y_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnAnalogValueChanged, CallFunc_MakeVector_X_ImplicitCast) == 0x000368, "Member 'W_PreMission_PlanningMap_C_OnAnalogValueChanged::CallFunc_MakeVector_X_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnEntryPointChanged
// 0x00A8 (0x00A8 - 0x0000)
struct W_PreMission_PlanningMap_C_OnEntryPointChanged final
{
public:
	struct FEntryPoint                            NewEntryPoint;                                     // 0x0000(0x00A8)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnEntryPointChanged) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnEntryPointChanged");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnEntryPointChanged) == 0x0000A8, "Wrong size on W_PreMission_PlanningMap_C_OnEntryPointChanged");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnEntryPointChanged, NewEntryPoint) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnEntryPointChanged::NewEntryPoint' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnEntryPointSelected
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_OnEntryPointSelected final
{
public:
	class UW_PreMission_Tablet_EntryPoint_C*      Clicked;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnEntryPointSelected) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnEntryPointSelected");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnEntryPointSelected) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_OnEntryPointSelected");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnEntryPointSelected, Clicked) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnEntryPointSelected::Clicked' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnFocusLost
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_OnFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnFocusLost) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_OnFocusLost");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnFocusLost) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_OnFocusLost");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnFocusLost, InFocusEvent) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnFocusLost::InFocusEvent' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnInputChange
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_PlanningMap_C_OnInputChange final
{
public:
	ECommonInputType                              bNewInputType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnInputChange) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_C_OnInputChange");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnInputChange) == 0x000001, "Wrong size on W_PreMission_PlanningMap_C_OnInputChange");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnInputChange, bNewInputType) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnInputChange::bNewInputType' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnKeyDown
// 0x02C0 (0x02C0 - 0x0000)
struct W_PreMission_PlanningMap_C_OnKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0130(0x00B8)()
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x01E8(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_202[0x6];                                      // 0x0202(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0208(0x00B8)()
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnKeyDown) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnKeyDown");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnKeyDown) == 0x0002C0, "Wrong size on W_PreMission_PlanningMap_C_OnKeyDown");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyDown, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyDown, InKeyEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_OnKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyDown, ReturnValue) == 0x000078, "Member 'W_PreMission_PlanningMap_C_OnKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyDown, CallFunc_Unhandled_ReturnValue) == 0x000130, "Member 'W_PreMission_PlanningMap_C_OnKeyDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyDown, CallFunc_GetKey_ReturnValue) == 0x0001E8, "Member 'W_PreMission_PlanningMap_C_OnKeyDown::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000200, "Member 'W_PreMission_PlanningMap_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000201, "Member 'W_PreMission_PlanningMap_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyDown, CallFunc_Handled_ReturnValue) == 0x000208, "Member 'W_PreMission_PlanningMap_C_OnKeyDown::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnKeyUp
// 0x0600 (0x0600 - 0x0000)
struct W_PreMission_PlanningMap_C_OnKeyUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x0130(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_2;          // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_3;          // 0x014D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_4;          // 0x014E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x014F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_5;          // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_6;          // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_7;          // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_8;          // 0x0153(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_9;          // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_10;         // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_156[0x2];                                      // 0x0156(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetActiveWidget_ReturnValue;              // 0x0158(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_PlanningMap_Level_C*      K2Node_DynamicCast_AsW_Pre_Mission_Planning_Map_Level; // 0x0160(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_PlanningMap_Level_C*      K2Node_DynamicCast_AsW_Pre_Mission_Planning_Map_Level_1; // 0x0170(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17A[0x6];                                      // 0x017A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0180(0x00B8)()
	struct FVector2D                              CallFunc_GetWidgetSize_Absolute_ReturnValue;       // 0x0238(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x0248(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0258(0x00B8)()
	struct FEventReply                            CallFunc_SetLinePart_ReturnValue;                  // 0x0310(0x00B8)()
	struct FVector2D                              CallFunc_GetGamepadMidPoint_Coordinates;           // 0x03C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x03D8(0x00B8)()
	struct FEventReply                            CallFunc_Unhandled_ReturnValue_1;                  // 0x0490(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue_2;                    // 0x0548(0x00B8)()
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnKeyUp) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnKeyUp");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnKeyUp) == 0x000600, "Wrong size on W_PreMission_PlanningMap_C_OnKeyUp");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, InKeyEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::InKeyEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, ReturnValue) == 0x000078, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_GetKey_ReturnValue) == 0x000130, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000148, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000149, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_BooleanAND_ReturnValue) == 0x00014A, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x00014B, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_2) == 0x00014C, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_3) == 0x00014D, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_4) == 0x00014E, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_BooleanOR_ReturnValue) == 0x00014F, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_5) == 0x000150, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_6) == 0x000151, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_7) == 0x000152, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_8) == 0x000153, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_9) == 0x000154, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_10) == 0x000155, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_GetActiveWidget_ReturnValue) == 0x000158, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_GetActiveWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, K2Node_DynamicCast_AsW_Pre_Mission_Planning_Map_Level) == 0x000160, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::K2Node_DynamicCast_AsW_Pre_Mission_Planning_Map_Level' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, K2Node_DynamicCast_bSuccess) == 0x000168, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, K2Node_DynamicCast_AsW_Pre_Mission_Planning_Map_Level_1) == 0x000170, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::K2Node_DynamicCast_AsW_Pre_Mission_Planning_Map_Level_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, K2Node_DynamicCast_bSuccess_1) == 0x000178, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000179, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_Unhandled_ReturnValue) == 0x000180, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_GetWidgetSize_Absolute_ReturnValue) == 0x000238, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_GetWidgetSize_Absolute_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x000248, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_Handled_ReturnValue) == 0x000258, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_SetLinePart_ReturnValue) == 0x000310, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_SetLinePart_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_GetGamepadMidPoint_Coordinates) == 0x0003C8, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_GetGamepadMidPoint_Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_Handled_ReturnValue_1) == 0x0003D8, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_Handled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_Unhandled_ReturnValue_1) == 0x000490, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_Unhandled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_Handled_ReturnValue_2) == 0x000548, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_Handled_ReturnValue_2' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnLeftClickUp
// 0x00B0 (0x00B0 - 0x0000)
struct W_PreMission_PlanningMap_C_OnLeftClickUp final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnLeftClickUp) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnLeftClickUp");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnLeftClickUp) == 0x0000B0, "Wrong size on W_PreMission_PlanningMap_C_OnLeftClickUp");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnLeftClickUp, InGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnLeftClickUp::InGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnLeftClickUp, InMouseEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_OnLeftClickUp::InMouseEvent' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnLineAdded
// 0x0030 (0x0030 - 0x0000)
struct W_PreMission_PlanningMap_C_OnLineAdded final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlanningLine                          Line;                                              // 0x0008(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnLineAdded) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnLineAdded");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnLineAdded) == 0x000030, "Wrong size on W_PreMission_PlanningMap_C_OnLineAdded");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnLineAdded, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnLineAdded::ID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnLineAdded, Line) == 0x000008, "Member 'W_PreMission_PlanningMap_C_OnLineAdded::Line' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnLineRemoved
// 0x0004 (0x0004 - 0x0000)
struct W_PreMission_PlanningMap_C_OnLineRemoved final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnLineRemoved) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_OnLineRemoved");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnLineRemoved) == 0x000004, "Wrong size on W_PreMission_PlanningMap_C_OnLineRemoved");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnLineRemoved, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnLineRemoved::ID' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMarkerAdded
// 0x0038 (0x0038 - 0x0000)
struct W_PreMission_PlanningMap_C_OnMarkerAdded final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlanningMarker                        Marker;                                            // 0x0008(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMarkerAdded) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnMarkerAdded");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMarkerAdded) == 0x000038, "Wrong size on W_PreMission_PlanningMap_C_OnMarkerAdded");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMarkerAdded, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMarkerAdded::ID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMarkerAdded, Marker) == 0x000008, "Member 'W_PreMission_PlanningMap_C_OnMarkerAdded::Marker' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMarkerRemoved
// 0x0004 (0x0004 - 0x0000)
struct W_PreMission_PlanningMap_C_OnMarkerRemoved final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMarkerRemoved) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_OnMarkerRemoved");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMarkerRemoved) == 0x000004, "Wrong size on W_PreMission_PlanningMap_C_OnMarkerRemoved");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMarkerRemoved, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMarkerRemoved::ID' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMissionChanged
// 0x0890 (0x0890 - 0x0000)
struct W_PreMission_PlanningMap_C_OnMissionChanged final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  LevelData;                                         // 0x0010(0x0880)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMissionChanged) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnMissionChanged");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMissionChanged) == 0x000890, "Wrong size on W_PreMission_PlanningMap_C_OnMissionChanged");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMissionChanged, URL) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMissionChanged::URL' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMissionChanged, LevelData) == 0x000010, "Member 'W_PreMission_PlanningMap_C_OnMissionChanged::LevelData' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMouseButtonDown
// 0x0268 (0x0268 - 0x0000)
struct W_PreMission_PlanningMap_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0168(0x0018)(HasGetValueTypeHash)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0198(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x01A0(0x00B8)()
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0258(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnMouseButtonDown");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMouseButtonDown) == 0x000268, "Wrong size on W_PreMission_PlanningMap_C_OnMouseButtonDown");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, ReturnValue) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000168, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x000180, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000190, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000198, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, CallFunc_Unhandled_ReturnValue) == 0x0001A0, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, CallFunc_GetPosition_ReturnValue) == 0x000258, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::CallFunc_GetPosition_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMouseButtonUp
// 0x0640 (0x0640 - 0x0000)
struct W_PreMission_PlanningMap_C_OnMouseButtonUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0168(0x00B8)()
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x0220(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0230(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A[0x2];                                      // 0x024A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x024C(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetNormalizedClick_ReturnValue;           // 0x0288(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x0298(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue_2;                    // 0x0350(0x00B8)()
	struct FEventReply                            CallFunc_ReleaseMouseCapture_ReturnValue;          // 0x0408(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue_3;                    // 0x04C0(0x00B8)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0578(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C[0x4];                                      // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0580(0x00B8)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0638(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMouseButtonUp) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnMouseButtonUp");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMouseButtonUp) == 0x000640, "Wrong size on W_PreMission_PlanningMap_C_OnMouseButtonUp");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, MouseEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, ReturnValue) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue) == 0x000168, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x000220, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000230, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000248, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000249, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_GetCachedGeometry_ReturnValue) == 0x00024C, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_GetNormalizedClick_ReturnValue) == 0x000288, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_GetNormalizedClick_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue_1) == 0x000298, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue_2) == 0x000350, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_ReleaseMouseCapture_ReturnValue) == 0x000408, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_ReleaseMouseCapture_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue_3) == 0x0004C0, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_Array_Length_ReturnValue) == 0x000578, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_Unhandled_ReturnValue) == 0x000580, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_Greater_IntInt_ReturnValue) == 0x000638, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMouseMove
// 0x03B8 (0x03B8 - 0x0000)
struct W_PreMission_PlanningMap_C_OnMouseMove final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0180(0x00B8)()
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0238(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetNormalizedClick_ReturnValue;           // 0x0270(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1; // 0x0280(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0298(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x02A8(0x00B8)()
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0360(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Clamp_Map_Coorinates_to_Screen_View_x;    // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Clamp_Map_Coorinates_to_Screen_View_y;    // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Distance2D_ReturnValue;                   // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0398(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x03B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMouseMove) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnMouseMove");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMouseMove) == 0x0003B8, "Wrong size on W_PreMission_PlanningMap_C_OnMouseMove");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, MouseEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, ReturnValue) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x000168, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_IsValid_ReturnValue) == 0x000178, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Unhandled_ReturnValue) == 0x000180, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_GetCachedGeometry_ReturnValue) == 0x000238, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_GetNormalizedClick_ReturnValue) == 0x000270, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_GetNormalizedClick_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1) == 0x000280, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_IsValid_ReturnValue_1) == 0x000290, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000298, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Handled_ReturnValue) == 0x0002A8, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000360, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_BreakVector2D_X) == 0x000370, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_BreakVector2D_Y) == 0x000378, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Clamp_Map_Coorinates_to_Screen_View_x) == 0x000380, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Clamp_Map_Coorinates_to_Screen_View_x' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Clamp_Map_Coorinates_to_Screen_View_y) == 0x000388, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Clamp_Map_Coorinates_to_Screen_View_y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Distance2D_ReturnValue) == 0x000390, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_MakeVector2D_ReturnValue) == 0x000398, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0003A8, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x0003B0, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMouseWheel
// 0x02F8 (0x02F8 - 0x0000)
struct W_PreMission_PlanningMap_C_OnMouseWheel final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0168(0x00B8)()
	float                                         CallFunc_PointerEvent_GetWheelDelta_ReturnValue;   // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0228(0x00B8)()
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x02E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E2[0x6];                                      // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMouseWheel) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnMouseWheel");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMouseWheel) == 0x0002F8, "Wrong size on W_PreMission_PlanningMap_C_OnMouseWheel");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, MouseEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, ReturnValue) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, CallFunc_Unhandled_ReturnValue) == 0x000168, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, CallFunc_PointerEvent_GetWheelDelta_ReturnValue) == 0x000220, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::CallFunc_PointerEvent_GetWheelDelta_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, CallFunc_Handled_ReturnValue) == 0x000228, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0002E0, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0002E1, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0002E8, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x0002F0, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OpenRadial
// 0x01B0 (0x01B0 - 0x0000)
struct W_PreMission_PlanningMap_C_OpenRadial final
{
public:
	struct FVector2D                              CursorPosition;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Radial_MapMarking_C*                 CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0020(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue_1;          // 0x0068(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_AbsoluteToLocal_ReturnValue;              // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue_1;               // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue;      // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_AbsoluteToLocal_ReturnValue_1;            // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue_1;    // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMousePosition_LocationX;               // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMousePosition_LocationY;               // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMousePosition_ReturnValue;             // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName Category, class FName MarkerName)> K2Node_CreateDelegate_OutputDelegate; // 0x0118(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0128(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0138(0x0020)(NoDestructor)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData;                      // 0x0158(0x0040)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0198(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector2D_X_ImplicitCast;              // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector2D_Y_ImplicitCast;              // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OpenRadial) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OpenRadial");
static_assert(sizeof(W_PreMission_PlanningMap_C_OpenRadial) == 0x0001B0, "Wrong size on W_PreMission_PlanningMap_C_OpenRadial");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CursorPosition) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CursorPosition' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_Create_ReturnValue) == 0x000018, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetCachedGeometry_ReturnValue) == 0x000020, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetLocalSize_ReturnValue) == 0x000058, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetCachedGeometry_ReturnValue_1) == 0x000068, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetCachedGeometry_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_AbsoluteToLocal_ReturnValue) == 0x0000A0, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_AbsoluteToLocal_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetLocalSize_ReturnValue_1) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetLocalSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_Divide_Vector2DVector2D_ReturnValue) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_Divide_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_AbsoluteToLocal_ReturnValue_1) == 0x0000D0, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_AbsoluteToLocal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_Divide_Vector2DVector2D_ReturnValue_1) == 0x0000E0, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_Divide_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetPlayerController_ReturnValue) == 0x0000F0, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetMousePosition_LocationX) == 0x0000F8, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetMousePosition_LocationX' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetMousePosition_LocationY) == 0x0000FC, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetMousePosition_LocationY' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetMousePosition_ReturnValue) == 0x000100, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetMousePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_MakeVector2D_ReturnValue) == 0x000108, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, K2Node_CreateDelegate_OutputDelegate) == 0x000118, "Member 'W_PreMission_PlanningMap_C_OpenRadial::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, K2Node_CreateDelegate_OutputDelegate_1) == 0x000128, "Member 'W_PreMission_PlanningMap_C_OpenRadial::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, K2Node_MakeStruct_Anchors) == 0x000138, "Member 'W_PreMission_PlanningMap_C_OpenRadial::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, K2Node_MakeStruct_AnchorData) == 0x000158, "Member 'W_PreMission_PlanningMap_C_OpenRadial::K2Node_MakeStruct_AnchorData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_AddChildToCanvas_ReturnValue) == 0x000198, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_MakeVector2D_X_ImplicitCast) == 0x0001A0, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_MakeVector2D_X_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_MakeVector2D_Y_ImplicitCast) == 0x0001A8, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_MakeVector2D_Y_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_PlanningMap_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_PreConstruct) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_C_PreConstruct");
static_assert(sizeof(W_PreMission_PlanningMap_C_PreConstruct) == 0x000001, "Wrong size on W_PreMission_PlanningMap_C_PreConstruct");
static_assert(offsetof(W_PreMission_PlanningMap_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_PreMission_PlanningMap_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.RadialCollapsed
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_C_RadialCollapsed final
{
public:
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_RadialCollapsed) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_RadialCollapsed");
static_assert(sizeof(W_PreMission_PlanningMap_C_RadialCollapsed) == 0x000010, "Wrong size on W_PreMission_PlanningMap_C_RadialCollapsed");
static_assert(offsetof(W_PreMission_PlanningMap_C_RadialCollapsed, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000000, "Member 'W_PreMission_PlanningMap_C_RadialCollapsed::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RadialCollapsed, CallFunc_GetCurrentInputType_ReturnValue) == 0x000008, "Member 'W_PreMission_PlanningMap_C_RadialCollapsed::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RadialCollapsed, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000009, "Member 'W_PreMission_PlanningMap_C_RadialCollapsed::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RadialCollapsed, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'W_PreMission_PlanningMap_C_RadialCollapsed::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.RadialMarkerSelected
// 0x0040 (0x0040 - 0x0000)
struct W_PreMission_PlanningMap_C_RadialMarkerSelected final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MarkerName;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlanningMarker                        K2Node_MakeStruct_PlanningMarker;                  // 0x0010(0x0030)(NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_RadialMarkerSelected) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_RadialMarkerSelected");
static_assert(sizeof(W_PreMission_PlanningMap_C_RadialMarkerSelected) == 0x000040, "Wrong size on W_PreMission_PlanningMap_C_RadialMarkerSelected");
static_assert(offsetof(W_PreMission_PlanningMap_C_RadialMarkerSelected, CategoryName) == 0x000000, "Member 'W_PreMission_PlanningMap_C_RadialMarkerSelected::CategoryName' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RadialMarkerSelected, MarkerName) == 0x000008, "Member 'W_PreMission_PlanningMap_C_RadialMarkerSelected::MarkerName' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RadialMarkerSelected, K2Node_MakeStruct_PlanningMarker) == 0x000010, "Member 'W_PreMission_PlanningMap_C_RadialMarkerSelected::K2Node_MakeStruct_PlanningMarker' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.RemovePreviewLine
// 0x0020 (0x0020 - 0x0000)
struct W_PreMission_PlanningMap_C_RemovePreviewLine final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_RemovePreviewLine) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_RemovePreviewLine");
static_assert(sizeof(W_PreMission_PlanningMap_C_RemovePreviewLine) == 0x000020, "Wrong size on W_PreMission_PlanningMap_C_RemovePreviewLine");
static_assert(offsetof(W_PreMission_PlanningMap_C_RemovePreviewLine, Temp_int_Array_Index_Variable) == 0x000000, "Member 'W_PreMission_PlanningMap_C_RemovePreviewLine::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RemovePreviewLine, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'W_PreMission_PlanningMap_C_RemovePreviewLine::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RemovePreviewLine, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'W_PreMission_PlanningMap_C_RemovePreviewLine::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RemovePreviewLine, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'W_PreMission_PlanningMap_C_RemovePreviewLine::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RemovePreviewLine, CallFunc_Array_Get_Item) == 0x000010, "Member 'W_PreMission_PlanningMap_C_RemovePreviewLine::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RemovePreviewLine, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'W_PreMission_PlanningMap_C_RemovePreviewLine::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RemovePreviewLine, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'W_PreMission_PlanningMap_C_RemovePreviewLine::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Reveal
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_Reveal final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_Reveal) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_Reveal");
static_assert(sizeof(W_PreMission_PlanningMap_C_Reveal) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_Reveal");
static_assert(offsetof(W_PreMission_PlanningMap_C_Reveal, Delay) == 0x000000, "Member 'W_PreMission_PlanningMap_C_Reveal::Delay' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.RotateMarker
// 0x0218 (0x0218 - 0x0000)
struct W_PreMission_PlanningMap_C_RotateMarker final
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       RotatingMarker_0;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MousePos;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0088(0x0050)(HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00F0(0x0050)(HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0158(0x0050)(HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01C0(0x0010)(ReferenceParm)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01E0(0x0018)()
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0200(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_RotateMarker) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_RotateMarker");
static_assert(sizeof(W_PreMission_PlanningMap_C_RotateMarker) == 0x000218, "Wrong size on W_PreMission_PlanningMap_C_RotateMarker");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, RotatingMarker_0) == 0x000000, "Member 'W_PreMission_PlanningMap_C_RotateMarker::RotatingMarker_0' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, MousePos) == 0x000008, "Member 'W_PreMission_PlanningMap_C_RotateMarker::MousePos' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_BreakVector2D_X) == 0x000018, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_BreakVector2D_Y) == 0x000020, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_BreakVector2D_X_1) == 0x000028, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_BreakVector2D_Y_1) == 0x000030, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'W_PreMission_PlanningMap_C_RotateMarker::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, K2Node_MakeStruct_FormatArgumentData_1) == 0x000088, "Member 'W_PreMission_PlanningMap_C_RotateMarker::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_MakeVector_ReturnValue) == 0x0000D8, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000F0, "Member 'W_PreMission_PlanningMap_C_RotateMarker::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_MakeVector_ReturnValue_1) == 0x000140, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, K2Node_MakeStruct_FormatArgumentData_3) == 0x000158, "Member 'W_PreMission_PlanningMap_C_RotateMarker::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_FindLookAtRotation_ReturnValue) == 0x0001A8, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, K2Node_MakeArray_Array) == 0x0001C0, "Member 'W_PreMission_PlanningMap_C_RotateMarker::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_BreakRotator_Roll) == 0x0001D0, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_BreakRotator_Pitch) == 0x0001D4, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_BreakRotator_Yaw) == 0x0001D8, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_Format_ReturnValue) == 0x0001E0, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0001F8, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_Conv_TextToString_ReturnValue) == 0x000200, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000210, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ScaleLineWeightByZoom
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_ScaleLineWeightByZoom final
{
public:
	double                                        CurrentZoom_0;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_ScaleLineWeightByZoom) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_ScaleLineWeightByZoom");
static_assert(sizeof(W_PreMission_PlanningMap_C_ScaleLineWeightByZoom) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_ScaleLineWeightByZoom");
static_assert(offsetof(W_PreMission_PlanningMap_C_ScaleLineWeightByZoom, CurrentZoom_0) == 0x000000, "Member 'W_PreMission_PlanningMap_C_ScaleLineWeightByZoom::CurrentZoom_0' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Set Hovered Ids
// 0x0028 (0x0028 - 0x0000)
struct W_PreMission_PlanningMap_C_Set_Hovered_Ids final
{
public:
	int32                                         LineID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         IconId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasHovering;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGamepadCrosshairHovering_Hovering;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGamepadCrosshairHovering_Hovering_1;    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_Set_Hovered_Ids) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_Set_Hovered_Ids");
static_assert(sizeof(W_PreMission_PlanningMap_C_Set_Hovered_Ids) == 0x000028, "Wrong size on W_PreMission_PlanningMap_C_Set_Hovered_Ids");
static_assert(offsetof(W_PreMission_PlanningMap_C_Set_Hovered_Ids, LineID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_Set_Hovered_Ids::LineID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Set_Hovered_Ids, IconId) == 0x000004, "Member 'W_PreMission_PlanningMap_C_Set_Hovered_Ids::IconId' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Set_Hovered_Ids, WasHovering) == 0x000008, "Member 'W_PreMission_PlanningMap_C_Set_Hovered_Ids::WasHovering' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Set_Hovered_Ids, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_C_Set_Hovered_Ids::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Set_Hovered_Ids, CallFunc_PlayAnimation_ReturnValue_1) == 0x000018, "Member 'W_PreMission_PlanningMap_C_Set_Hovered_Ids::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Set_Hovered_Ids, CallFunc_IsGamepadCrosshairHovering_Hovering) == 0x000020, "Member 'W_PreMission_PlanningMap_C_Set_Hovered_Ids::CallFunc_IsGamepadCrosshairHovering_Hovering' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Set_Hovered_Ids, CallFunc_IsGamepadCrosshairHovering_Hovering_1) == 0x000021, "Member 'W_PreMission_PlanningMap_C_Set_Hovered_Ids::CallFunc_IsGamepadCrosshairHovering_Hovering_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Set_Hovered_Ids, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000022, "Member 'W_PreMission_PlanningMap_C_Set_Hovered_Ids::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_PlanningMap_C_SetInputMode final
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_SetInputMode) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_C_SetInputMode");
static_assert(sizeof(W_PreMission_PlanningMap_C_SetInputMode) == 0x000001, "Wrong size on W_PreMission_PlanningMap_C_SetInputMode");
static_assert(offsetof(W_PreMission_PlanningMap_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_PreMission_PlanningMap_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.SetLinePart
// 0x0230 (0x0230 - 0x0000)
struct W_PreMission_PlanningMap_C_SetLinePart final
{
public:
	struct FEventReply                            ReturnValue;                                       // 0x0000(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00B8(0x00B8)()
	struct FEventReply                            CallFunc_ReleaseMouseCapture_ReturnValue;          // 0x0170(0x00B8)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_SetLinePart) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_SetLinePart");
static_assert(sizeof(W_PreMission_PlanningMap_C_SetLinePart) == 0x000230, "Wrong size on W_PreMission_PlanningMap_C_SetLinePart");
static_assert(offsetof(W_PreMission_PlanningMap_C_SetLinePart, ReturnValue) == 0x000000, "Member 'W_PreMission_PlanningMap_C_SetLinePart::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_SetLinePart, CallFunc_Handled_ReturnValue) == 0x0000B8, "Member 'W_PreMission_PlanningMap_C_SetLinePart::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_SetLinePart, CallFunc_ReleaseMouseCapture_ReturnValue) == 0x000170, "Member 'W_PreMission_PlanningMap_C_SetLinePart::CallFunc_ReleaseMouseCapture_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_SetLinePart, CallFunc_Array_Length_ReturnValue) == 0x000228, "Member 'W_PreMission_PlanningMap_C_SetLinePart::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_SetLinePart, CallFunc_Greater_IntInt_ReturnValue) == 0x00022C, "Member 'W_PreMission_PlanningMap_C_SetLinePart::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.StartMarkerRotation
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_StartMarkerRotation final
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       TriggeringMarker;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_StartMarkerRotation) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_StartMarkerRotation");
static_assert(sizeof(W_PreMission_PlanningMap_C_StartMarkerRotation) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_StartMarkerRotation");
static_assert(offsetof(W_PreMission_PlanningMap_C_StartMarkerRotation, TriggeringMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_C_StartMarkerRotation::TriggeringMarker' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_PreMission_PlanningMap_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_Tick) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_Tick");
static_assert(sizeof(W_PreMission_PlanningMap_C_Tick) == 0x00003C, "Wrong size on W_PreMission_PlanningMap_C_Tick");
static_assert(offsetof(W_PreMission_PlanningMap_C_Tick, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Tick, InDeltaTime) == 0x000038, "Member 'W_PreMission_PlanningMap_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Toggle Radial
// 0x0018 (0x0018 - 0x0000)
struct W_PreMission_PlanningMap_C_Toggle_Radial final
{
public:
	struct FVector2D                              Coordinates;                                       // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_Toggle_Radial) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_Toggle_Radial");
static_assert(sizeof(W_PreMission_PlanningMap_C_Toggle_Radial) == 0x000018, "Wrong size on W_PreMission_PlanningMap_C_Toggle_Radial");
static_assert(offsetof(W_PreMission_PlanningMap_C_Toggle_Radial, Coordinates) == 0x000000, "Member 'W_PreMission_PlanningMap_C_Toggle_Radial::Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Toggle_Radial, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_C_Toggle_Radial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Toggle_Radial, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000011, "Member 'W_PreMission_PlanningMap_C_Toggle_Radial::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.UpdateEntryPointSelection
// 0x00A8 (0x00A8 - 0x0000)
struct W_PreMission_PlanningMap_C_UpdateEntryPointSelection final
{
public:
	struct FEntryPoint                            EntryPointData;                                    // 0x0000(0x00A8)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_UpdateEntryPointSelection");
static_assert(sizeof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection) == 0x0000A8, "Wrong size on W_PreMission_PlanningMap_C_UpdateEntryPointSelection");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, EntryPointData) == 0x000000, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::EntryPointData' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.UpdatePreviewLine
// 0x0068 (0x0068 - 0x0000)
struct W_PreMission_PlanningMap_C_UpdatePreviewLine final
{
public:
	struct FVector2D                              MousePos;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      PointsCopy;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	struct FVector2D                              LastPoint;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlanningLine                          K2Node_MakeStruct_PlanningLine;                    // 0x0030(0x0028)()
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_UpdatePreviewLine) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_UpdatePreviewLine");
static_assert(sizeof(W_PreMission_PlanningMap_C_UpdatePreviewLine) == 0x000068, "Wrong size on W_PreMission_PlanningMap_C_UpdatePreviewLine");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdatePreviewLine, MousePos) == 0x000000, "Member 'W_PreMission_PlanningMap_C_UpdatePreviewLine::MousePos' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdatePreviewLine, PointsCopy) == 0x000010, "Member 'W_PreMission_PlanningMap_C_UpdatePreviewLine::PointsCopy' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdatePreviewLine, LastPoint) == 0x000020, "Member 'W_PreMission_PlanningMap_C_UpdatePreviewLine::LastPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdatePreviewLine, K2Node_MakeStruct_PlanningLine) == 0x000030, "Member 'W_PreMission_PlanningMap_C_UpdatePreviewLine::K2Node_MakeStruct_PlanningLine' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdatePreviewLine, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'W_PreMission_PlanningMap_C_UpdatePreviewLine::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdatePreviewLine, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'W_PreMission_PlanningMap_C_UpdatePreviewLine::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdatePreviewLine, CallFunc_Greater_IntInt_ReturnValue) == 0x000060, "Member 'W_PreMission_PlanningMap_C_UpdatePreviewLine::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Zoom
// 0x0198 (0x0198 - 0x0000)
struct W_PreMission_PlanningMap_C_Zoom final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          ZoomOnCursor_0;                                    // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ZoomIn;                                            // 0x00B1(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ZoomIncrements;                                    // 0x00B8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentZoomIncrements;                             // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreviousZoom;                                      // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetMousePositionOnViewport_ReturnValue;   // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue;      // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DFloat_ReturnValue;       // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0148(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_1;     // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetUserSpecifiedScale_InUserSpecifiedScale_ImplicitCast; // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_Zoom) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_Zoom");
static_assert(sizeof(W_PreMission_PlanningMap_C_Zoom) == 0x000198, "Wrong size on W_PreMission_PlanningMap_C_Zoom");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, Geometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_Zoom::Geometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, PointerEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_Zoom::PointerEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, ZoomOnCursor_0) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_Zoom::ZoomOnCursor_0' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, ZoomIn) == 0x0000B1, "Member 'W_PreMission_PlanningMap_C_Zoom::ZoomIn' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, ZoomIncrements) == 0x0000B8, "Member 'W_PreMission_PlanningMap_C_Zoom::ZoomIncrements' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CurrentZoomIncrements) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_Zoom::CurrentZoomIncrements' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, PreviousZoom) == 0x0000C8, "Member 'W_PreMission_PlanningMap_C_Zoom::PreviousZoom' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_SelectInt_ReturnValue) == 0x0000D4, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0000D8, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000E0, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_GetViewportSize_ReturnValue) == 0x0000E8, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_GetMousePositionOnViewport_ReturnValue) == 0x0000F8, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_GetMousePositionOnViewport_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_Divide_Vector2DVector2D_ReturnValue) == 0x000108, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_Divide_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_Subtract_Vector2DFloat_ReturnValue) == 0x000118, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_Subtract_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x000128, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000138, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000148, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000150, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_GetPosition_ReturnValue) == 0x000158, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_FClamp_ReturnValue) == 0x000168, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_Multiply_Vector2DFloat_ReturnValue_1) == 0x000170, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_Multiply_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000180, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Zoom, CallFunc_SetUserSpecifiedScale_InUserSpecifiedScale_ImplicitCast) == 0x000190, "Member 'W_PreMission_PlanningMap_C_Zoom::CallFunc_SetUserSpecifiedScale_InUserSpecifiedScale_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ZoomOnCursor
// 0x0198 (0x0198 - 0x0000)
struct W_PreMission_PlanningMap_C_ZoomOnCursor final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm)
	double                                        PreviousZoom;                                      // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewZoom;                                           // 0x00B8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1; // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_AbsoluteToLocal_ReturnValue;              // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0140(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue_1;                // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_1;  // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_1;     // 0x0178(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_2;  // 0x0188(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_ZoomOnCursor) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_ZoomOnCursor");
static_assert(sizeof(W_PreMission_PlanningMap_C_ZoomOnCursor) == 0x000198, "Wrong size on W_PreMission_PlanningMap_C_ZoomOnCursor");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, Geometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::Geometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, PointerEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::PointerEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, PreviousZoom) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::PreviousZoom' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, NewZoom) == 0x0000B8, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::NewZoom' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x0000C8, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_GetPosition_ReturnValue) == 0x0000D8, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x0000E8, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x0000F0, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1) == 0x000100, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_AbsoluteToLocal_ReturnValue) == 0x000110, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_AbsoluteToLocal_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_GetLocalSize_ReturnValue) == 0x000120, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000130, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000140, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000148, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_GetPosition_ReturnValue_1) == 0x000158, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_GetPosition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_Subtract_Vector2DVector2D_ReturnValue_1) == 0x000168, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_Subtract_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_Multiply_Vector2DFloat_ReturnValue_1) == 0x000178, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_Multiply_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_Subtract_Vector2DVector2D_ReturnValue_2) == 0x000188, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_Subtract_Vector2DVector2D_ReturnValue_2' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_GetFocusTarget final
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_GetFocusTarget");
static_assert(sizeof(W_PreMission_PlanningMap_C_GetFocusTarget) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_GetFocusTarget");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_PreMission_PlanningMap_C_GetFocusTarget::Focus' has a wrong offset!");

}

