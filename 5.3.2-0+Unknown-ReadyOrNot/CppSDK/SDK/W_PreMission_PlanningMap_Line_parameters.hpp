#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_PlanningMap_Line

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK::Params
{

// Function W_PreMission_PlanningMap_Line.W_PreMission_PlanningMap_Line_C.ExecuteUbergraph_W_PreMission_PlanningMap_Line
// 0x0078 (0x0078 - 0x0000)
struct W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_CurrentZoom;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlanningLineTeam                             K2Node_CustomEvent_Team;                           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast; // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast; // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line");
static_assert(sizeof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line) == 0x000078, "Wrong size on W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line, EntryPoint) == 0x000000, "Member 'W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line, K2Node_Event_IsDesignTime) == 0x000006, "Member 'W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line, K2Node_Event_MyGeometry) == 0x000008, "Member 'W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line, K2Node_Event_InDeltaTime) == 0x000040, "Member 'W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line, K2Node_Event_CurrentZoom) == 0x000048, "Member 'W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line::K2Node_Event_CurrentZoom' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000050, "Member 'W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000058, "Member 'W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line, K2Node_CustomEvent_Team) == 0x000068, "Member 'W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line::K2Node_CustomEvent_Team' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line, CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast) == 0x00006C, "Member 'W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line::CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line, CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast) == 0x000070, "Member 'W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line::CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000074, "Member 'W_PreMission_PlanningMap_Line_C_ExecuteUbergraph_W_PreMission_PlanningMap_Line::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap_Line.W_PreMission_PlanningMap_Line_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_PlanningMap_Line_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Line_C_PreConstruct) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_Line_C_PreConstruct");
static_assert(sizeof(W_PreMission_PlanningMap_Line_C_PreConstruct) == 0x000001, "Wrong size on W_PreMission_PlanningMap_Line_C_PreConstruct");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_PreMission_PlanningMap_Line_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_PreMission_PlanningMap_Line.W_PreMission_PlanningMap_Line_C.ScaleLineWeightByZoom
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_Line_C_ScaleLineWeightByZoom final
{
public:
	double                                        CurrentZoom;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Line_C_ScaleLineWeightByZoom) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Line_C_ScaleLineWeightByZoom");
static_assert(sizeof(W_PreMission_PlanningMap_Line_C_ScaleLineWeightByZoom) == 0x000008, "Wrong size on W_PreMission_PlanningMap_Line_C_ScaleLineWeightByZoom");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ScaleLineWeightByZoom, CurrentZoom) == 0x000000, "Member 'W_PreMission_PlanningMap_Line_C_ScaleLineWeightByZoom::CurrentZoom' has a wrong offset!");

// Function W_PreMission_PlanningMap_Line.W_PreMission_PlanningMap_Line_C.ScaleThickness
// 0x0018 (0x0018 - 0x0000)
struct W_PreMission_PlanningMap_Line_C_ScaleThickness final
{
public:
	double                                        Multiplier;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Line_C_ScaleThickness) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Line_C_ScaleThickness");
static_assert(sizeof(W_PreMission_PlanningMap_Line_C_ScaleThickness) == 0x000018, "Wrong size on W_PreMission_PlanningMap_Line_C_ScaleThickness");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ScaleThickness, Multiplier) == 0x000000, "Member 'W_PreMission_PlanningMap_Line_C_ScaleThickness::Multiplier' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ScaleThickness, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'W_PreMission_PlanningMap_Line_C_ScaleThickness::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_ScaleThickness, CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast) == 0x000010, "Member 'W_PreMission_PlanningMap_Line_C_ScaleThickness::CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap_Line.W_PreMission_PlanningMap_Line_C.SetAngle
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_Line_C_SetAngle final
{
public:
	double                                        Angle_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Line_C_SetAngle) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Line_C_SetAngle");
static_assert(sizeof(W_PreMission_PlanningMap_Line_C_SetAngle) == 0x000010, "Wrong size on W_PreMission_PlanningMap_Line_C_SetAngle");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_SetAngle, Angle_0) == 0x000000, "Member 'W_PreMission_PlanningMap_Line_C_SetAngle::Angle_0' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_SetAngle, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000008, "Member 'W_PreMission_PlanningMap_Line_C_SetAngle::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap_Line.W_PreMission_PlanningMap_Line_C.SetColor
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_Line_C_SetColor final
{
public:
	struct FLinearColor                           Color_0;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Line_C_SetColor) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_Line_C_SetColor");
static_assert(sizeof(W_PreMission_PlanningMap_Line_C_SetColor) == 0x000010, "Wrong size on W_PreMission_PlanningMap_Line_C_SetColor");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_SetColor, Color_0) == 0x000000, "Member 'W_PreMission_PlanningMap_Line_C_SetColor::Color_0' has a wrong offset!");

// Function W_PreMission_PlanningMap_Line.W_PreMission_PlanningMap_Line_C.SetColorByPlayerState
// 0x0020 (0x0020 - 0x0000)
struct W_PreMission_PlanningMap_Line_C_SetColorByPlayerState final
{
public:
	class AReadyOrNotPlayerState*                 PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EPlanningLineTeam Team)>       K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Line_C_SetColorByPlayerState) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Line_C_SetColorByPlayerState");
static_assert(sizeof(W_PreMission_PlanningMap_Line_C_SetColorByPlayerState) == 0x000020, "Wrong size on W_PreMission_PlanningMap_Line_C_SetColorByPlayerState");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_SetColorByPlayerState, PlayerState) == 0x000000, "Member 'W_PreMission_PlanningMap_Line_C_SetColorByPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_SetColorByPlayerState, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'W_PreMission_PlanningMap_Line_C_SetColorByPlayerState::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_SetColorByPlayerState, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'W_PreMission_PlanningMap_Line_C_SetColorByPlayerState::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap_Line.W_PreMission_PlanningMap_Line_C.SetLength
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_Line_C_SetLength final
{
public:
	double                                        Length_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Line_C_SetLength) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Line_C_SetLength");
static_assert(sizeof(W_PreMission_PlanningMap_Line_C_SetLength) == 0x000010, "Wrong size on W_PreMission_PlanningMap_Line_C_SetLength");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_SetLength, Length_0) == 0x000000, "Member 'W_PreMission_PlanningMap_Line_C_SetLength::Length_0' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_SetLength, CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast) == 0x000008, "Member 'W_PreMission_PlanningMap_Line_C_SetLength::CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap_Line.W_PreMission_PlanningMap_Line_C.SetOffset
// 0x0030 (0x0030 - 0x0000)
struct W_PreMission_PlanningMap_Line_C_SetOffset final
{
public:
	double                                        StartOffset_0;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EndOffset_0;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class USizeBoxSlot*                           CallFunc_SlotAsSizeBoxSlot_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Right_ImplicitCast;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Left_ImplicitCast;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Line_C_SetOffset) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Line_C_SetOffset");
static_assert(sizeof(W_PreMission_PlanningMap_Line_C_SetOffset) == 0x000030, "Wrong size on W_PreMission_PlanningMap_Line_C_SetOffset");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_SetOffset, StartOffset_0) == 0x000000, "Member 'W_PreMission_PlanningMap_Line_C_SetOffset::StartOffset_0' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_SetOffset, EndOffset_0) == 0x000008, "Member 'W_PreMission_PlanningMap_Line_C_SetOffset::EndOffset_0' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_SetOffset, K2Node_MakeStruct_Margin) == 0x000010, "Member 'W_PreMission_PlanningMap_Line_C_SetOffset::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_SetOffset, CallFunc_SlotAsSizeBoxSlot_ReturnValue) == 0x000020, "Member 'W_PreMission_PlanningMap_Line_C_SetOffset::CallFunc_SlotAsSizeBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_SetOffset, K2Node_MakeStruct_Right_ImplicitCast) == 0x000028, "Member 'W_PreMission_PlanningMap_Line_C_SetOffset::K2Node_MakeStruct_Right_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_SetOffset, K2Node_MakeStruct_Left_ImplicitCast) == 0x00002C, "Member 'W_PreMission_PlanningMap_Line_C_SetOffset::K2Node_MakeStruct_Left_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap_Line.W_PreMission_PlanningMap_Line_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_PreMission_PlanningMap_Line_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Line_C_Tick) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_Line_C_Tick");
static_assert(sizeof(W_PreMission_PlanningMap_Line_C_Tick) == 0x00003C, "Wrong size on W_PreMission_PlanningMap_Line_C_Tick");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_Tick, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_Line_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_Tick, InDeltaTime) == 0x000038, "Member 'W_PreMission_PlanningMap_Line_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_PreMission_PlanningMap_Line.W_PreMission_PlanningMap_Line_C.UpdatePlanningTeam
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_PlanningMap_Line_C_UpdatePlanningTeam final
{
public:
	EPlanningLineTeam                             Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Line_C_UpdatePlanningTeam) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_Line_C_UpdatePlanningTeam");
static_assert(sizeof(W_PreMission_PlanningMap_Line_C_UpdatePlanningTeam) == 0x000001, "Wrong size on W_PreMission_PlanningMap_Line_C_UpdatePlanningTeam");
static_assert(offsetof(W_PreMission_PlanningMap_Line_C_UpdatePlanningTeam, Team) == 0x000000, "Member 'W_PreMission_PlanningMap_Line_C_UpdatePlanningTeam::Team' has a wrong offset!");

}

