#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Briefing_Timeline_TrackWave_Simple

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Briefing_Timeline_TrackWave_Simple.W_Briefing_Timeline_TrackWave_Simple_C
// 0x0128 (0x03E8 - 0x02C0)
class UW_Briefing_Timeline_TrackWave_Simple_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHorizontalBox*                         HB_Waveform;                                       // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bIsDesignTime;                                     // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPlaying;                                        // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsEvent;                                          // 0x02D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEventInProgress;                                  // 0x02D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsFinished;                                       // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentPlayTime;                                   // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Duration;                                          // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundWave*                             SoundWaveAsset;                                    // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ProgressMade;                                      // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AmpUpdateFrequency;                                // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<double, struct FTimelineEvent>           EventEntries;                                      // 0x0300(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(double EventID)> TimelineEventFired;                               // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double EventID)> TimelineEventEnded;                               // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        CurrentEventID;                                    // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<double, class UW_Briefing_Timeline_TrackWaveElement_C*> EventWaveSegments;                  // 0x0378(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        TickInterval;                                      // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WaveSegments;                                      // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UW_Briefing_Timeline_TrackWaveElement_vert_C*> Segments;                            // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void Clear();
	void DemoMode();
	void EventListener();
	void ExecuteUbergraph_W_Briefing_Timeline_TrackWave_Simple(int32 EntryPoint);
	void Initialize(class USoundWave* SoundWave, const TMap<double, struct FTimelineEvent>& EventEntries_0);
	void paused();
	void Playing(double CurrentPlayTime_0);
	void PreConstruct(bool IsDesignTime);
	void Restart();
	void Scrubbed();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Briefing_Timeline_TrackWave_Simple_C">();
	}
	static class UW_Briefing_Timeline_TrackWave_Simple_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Briefing_Timeline_TrackWave_Simple_C>();
	}
};
static_assert(alignof(UW_Briefing_Timeline_TrackWave_Simple_C) == 0x000008, "Wrong alignment on UW_Briefing_Timeline_TrackWave_Simple_C");
static_assert(sizeof(UW_Briefing_Timeline_TrackWave_Simple_C) == 0x0003E8, "Wrong size on UW_Briefing_Timeline_TrackWave_Simple_C");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, UberGraphFrame) == 0x0002C0, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, HB_Waveform) == 0x0002C8, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::HB_Waveform' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, bIsDesignTime) == 0x0002D0, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::bIsDesignTime' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, bIsPlaying) == 0x0002D1, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::bIsPlaying' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, bIsEvent) == 0x0002D2, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::bIsEvent' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, bEventInProgress) == 0x0002D3, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::bEventInProgress' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, bIsFinished) == 0x0002D4, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::bIsFinished' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, CurrentPlayTime) == 0x0002D8, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::CurrentPlayTime' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, Duration) == 0x0002E0, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::Duration' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, SoundWaveAsset) == 0x0002E8, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::SoundWaveAsset' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, ProgressMade) == 0x0002F0, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::ProgressMade' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, AmpUpdateFrequency) == 0x0002F8, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::AmpUpdateFrequency' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, EventEntries) == 0x000300, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::EventEntries' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, TimelineEventFired) == 0x000350, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::TimelineEventFired' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, TimelineEventEnded) == 0x000360, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::TimelineEventEnded' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, CurrentEventID) == 0x000370, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::CurrentEventID' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, EventWaveSegments) == 0x000378, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::EventWaveSegments' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, TickInterval) == 0x0003C8, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::TickInterval' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, WaveSegments) == 0x0003D0, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::WaveSegments' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Timeline_TrackWave_Simple_C, Segments) == 0x0003D8, "Member 'UW_Briefing_Timeline_TrackWave_Simple_C::Segments' has a wrong offset!");

}

