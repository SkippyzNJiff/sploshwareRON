#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Stats_Playtime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK::Params
{

// Function W_Stats_Playtime.W_Stats_Playtime_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_Stats_Playtime_C_BackPage final
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_BackPage) == 0x000001, "Wrong alignment on W_Stats_Playtime_C_BackPage");
static_assert(sizeof(W_Stats_Playtime_C_BackPage) == 0x000001, "Wrong size on W_Stats_Playtime_C_BackPage");
static_assert(offsetof(W_Stats_Playtime_C_BackPage, Handled) == 0x000000, "Member 'W_Stats_Playtime_C_BackPage::Handled' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_Stats_Playtime_C_ChangePage final
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_ChangePage) == 0x000004, "Wrong alignment on W_Stats_Playtime_C_ChangePage");
static_assert(sizeof(W_Stats_Playtime_C_ChangePage) == 0x000008, "Wrong size on W_Stats_Playtime_C_ChangePage");
static_assert(offsetof(W_Stats_Playtime_C_ChangePage, PageName) == 0x000000, "Member 'W_Stats_Playtime_C_ChangePage::PageName' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.CompareWithFriend
// 0x01C8 (0x01C8 - 0x0000)
struct W_Stats_Playtime_C_CompareWithFriend final
{
public:
	struct FFriend                                Friend;                                            // 0x0000(0x01C8)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_Stats_Playtime_C_CompareWithFriend) == 0x000008, "Wrong alignment on W_Stats_Playtime_C_CompareWithFriend");
static_assert(sizeof(W_Stats_Playtime_C_CompareWithFriend) == 0x0001C8, "Wrong size on W_Stats_Playtime_C_CompareWithFriend");
static_assert(offsetof(W_Stats_Playtime_C_CompareWithFriend, Friend) == 0x000000, "Member 'W_Stats_Playtime_C_CompareWithFriend::Friend' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.ExecuteUbergraph_W_Stats_Playtime
// 0x0230 (0x0230 - 0x0000)
struct W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Delay_1;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Delay;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsGamepad;                            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_PageName;                             // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_StatID;                               // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFriend                                K2Node_Event_Friend;                               // 0x0050(0x01C8)()
	class UStatSubsystem*                         CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStatSubsystem*                         CallFunc_GetStatSubsystem_ReturnValue;             // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInitialized_ReturnValue;                // 0x022A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime) == 0x000008, "Wrong alignment on W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime");
static_assert(sizeof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime) == 0x000230, "Wrong size on W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, EntryPoint) == 0x000000, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, K2Node_Event_Delay_1) == 0x000008, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, K2Node_Event_Delay) == 0x000010, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, K2Node_Event_Collapse) == 0x000018, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, K2Node_Event_IsGamepad) == 0x000019, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, K2Node_Event_PageName) == 0x00001C, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, K2Node_CreateDelegate_OutputDelegate) == 0x000024, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, K2Node_Event_StatID) == 0x000038, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::K2Node_Event_StatID' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, K2Node_Event_IsDesignTime) == 0x000048, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, K2Node_Event_Friend) == 0x000050, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::K2Node_Event_Friend' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000218, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, CallFunc_GetStatSubsystem_ReturnValue) == 0x000220, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::CallFunc_GetStatSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, CallFunc_IsValid_ReturnValue) == 0x000228, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, CallFunc_IsValid_ReturnValue_1) == 0x000229, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime, CallFunc_IsInitialized_ReturnValue) == 0x00022A, "Member 'W_Stats_Playtime_C_ExecuteUbergraph_W_Stats_Playtime::CallFunc_IsInitialized_ReturnValue' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.FormatPlaytime
// 0x0128 (0x0128 - 0x0000)
struct W_Stats_Playtime_C_FormatPlaytime final
{
public:
	double                                        Time__in_seconds_;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Result;                                            // 0x0008(0x0018)(Parm, OutParm)
	struct FTimespan                              CallFunc_FromSeconds_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Days;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Hours;                      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Minutes;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Seconds;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Milliseconds;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0050(0x0050)(HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_1;            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00A8(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00F8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0108(0x0018)()
	float                                         CallFunc_FromSeconds_Seconds_ImplicitCast;         // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_FormatPlaytime) == 0x000008, "Wrong alignment on W_Stats_Playtime_C_FormatPlaytime");
static_assert(sizeof(W_Stats_Playtime_C_FormatPlaytime) == 0x000128, "Wrong size on W_Stats_Playtime_C_FormatPlaytime");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, Time__in_seconds_) == 0x000000, "Member 'W_Stats_Playtime_C_FormatPlaytime::Time__in_seconds_' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, Result) == 0x000008, "Member 'W_Stats_Playtime_C_FormatPlaytime::Result' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, CallFunc_FromSeconds_ReturnValue) == 0x000020, "Member 'W_Stats_Playtime_C_FormatPlaytime::CallFunc_FromSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, CallFunc_BreakTimespan_Days) == 0x000028, "Member 'W_Stats_Playtime_C_FormatPlaytime::CallFunc_BreakTimespan_Days' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, CallFunc_BreakTimespan_Hours) == 0x00002C, "Member 'W_Stats_Playtime_C_FormatPlaytime::CallFunc_BreakTimespan_Hours' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, CallFunc_BreakTimespan_Minutes) == 0x000030, "Member 'W_Stats_Playtime_C_FormatPlaytime::CallFunc_BreakTimespan_Minutes' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, CallFunc_BreakTimespan_Seconds) == 0x000034, "Member 'W_Stats_Playtime_C_FormatPlaytime::CallFunc_BreakTimespan_Seconds' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, CallFunc_BreakTimespan_Milliseconds) == 0x000038, "Member 'W_Stats_Playtime_C_FormatPlaytime::CallFunc_BreakTimespan_Milliseconds' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, CallFunc_Multiply_IntInt_ReturnValue) == 0x00003C, "Member 'W_Stats_Playtime_C_FormatPlaytime::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000040, "Member 'W_Stats_Playtime_C_FormatPlaytime::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'W_Stats_Playtime_C_FormatPlaytime::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, K2Node_MakeStruct_FormatArgumentData) == 0x000050, "Member 'W_Stats_Playtime_C_FormatPlaytime::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, CallFunc_Conv_IntToInt64_ReturnValue_1) == 0x0000A0, "Member 'W_Stats_Playtime_C_FormatPlaytime::CallFunc_Conv_IntToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000A8, "Member 'W_Stats_Playtime_C_FormatPlaytime::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, K2Node_MakeArray_Array) == 0x0000F8, "Member 'W_Stats_Playtime_C_FormatPlaytime::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, CallFunc_Format_ReturnValue) == 0x000108, "Member 'W_Stats_Playtime_C_FormatPlaytime::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_FormatPlaytime, CallFunc_FromSeconds_Seconds_ImplicitCast) == 0x000120, "Member 'W_Stats_Playtime_C_FormatPlaytime::CallFunc_FromSeconds_Seconds_ImplicitCast' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.GetGraphNotchValue
// 0x0050 (0x0050 - 0x0000)
struct W_Stats_Playtime_C_GetGraphNotchValue final
{
public:
	double                                        NotchSize;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForCompare;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_GetGraphNotchValue) == 0x000008, "Wrong alignment on W_Stats_Playtime_C_GetGraphNotchValue");
static_assert(sizeof(W_Stats_Playtime_C_GetGraphNotchValue) == 0x000050, "Wrong size on W_Stats_Playtime_C_GetGraphNotchValue");
static_assert(offsetof(W_Stats_Playtime_C_GetGraphNotchValue, NotchSize) == 0x000000, "Member 'W_Stats_Playtime_C_GetGraphNotchValue::NotchSize' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetGraphNotchValue, ForCompare) == 0x000008, "Member 'W_Stats_Playtime_C_GetGraphNotchValue::ForCompare' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetGraphNotchValue, ReturnValue) == 0x000010, "Member 'W_Stats_Playtime_C_GetGraphNotchValue::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetGraphNotchValue, CallFunc_GetDesiredSize_ReturnValue) == 0x000018, "Member 'W_Stats_Playtime_C_GetGraphNotchValue::CallFunc_GetDesiredSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetGraphNotchValue, CallFunc_SelectFloat_ReturnValue) == 0x000028, "Member 'W_Stats_Playtime_C_GetGraphNotchValue::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetGraphNotchValue, CallFunc_BreakVector2D_X) == 0x000030, "Member 'W_Stats_Playtime_C_GetGraphNotchValue::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetGraphNotchValue, CallFunc_BreakVector2D_Y) == 0x000038, "Member 'W_Stats_Playtime_C_GetGraphNotchValue::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetGraphNotchValue, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000040, "Member 'W_Stats_Playtime_C_GetGraphNotchValue::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetGraphNotchValue, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000048, "Member 'W_Stats_Playtime_C_GetGraphNotchValue::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.GetSingleplayerPercent
// 0x0040 (0x0040 - 0x0000)
struct W_Stats_Playtime_C_GetSingleplayerPercent final
{
public:
	bool                                          IsCompare;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_GetSingleplayerPercent) == 0x000008, "Wrong alignment on W_Stats_Playtime_C_GetSingleplayerPercent");
static_assert(sizeof(W_Stats_Playtime_C_GetSingleplayerPercent) == 0x000040, "Wrong size on W_Stats_Playtime_C_GetSingleplayerPercent");
static_assert(offsetof(W_Stats_Playtime_C_GetSingleplayerPercent, IsCompare) == 0x000000, "Member 'W_Stats_Playtime_C_GetSingleplayerPercent::IsCompare' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetSingleplayerPercent, ReturnValue) == 0x000008, "Member 'W_Stats_Playtime_C_GetSingleplayerPercent::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetSingleplayerPercent, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'W_Stats_Playtime_C_GetSingleplayerPercent::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetSingleplayerPercent, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'W_Stats_Playtime_C_GetSingleplayerPercent::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetSingleplayerPercent, CallFunc_SelectFloat_ReturnValue_1) == 0x000020, "Member 'W_Stats_Playtime_C_GetSingleplayerPercent::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetSingleplayerPercent, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000028, "Member 'W_Stats_Playtime_C_GetSingleplayerPercent::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetSingleplayerPercent, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'W_Stats_Playtime_C_GetSingleplayerPercent::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetSingleplayerPercent, CallFunc_BooleanOR_ReturnValue) == 0x000031, "Member 'W_Stats_Playtime_C_GetSingleplayerPercent::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_GetSingleplayerPercent, CallFunc_SelectFloat_ReturnValue_2) == 0x000038, "Member 'W_Stats_Playtime_C_GetSingleplayerPercent::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.Hide
// 0x0010 (0x0010 - 0x0000)
struct W_Stats_Playtime_C_Hide final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_Hide) == 0x000008, "Wrong alignment on W_Stats_Playtime_C_Hide");
static_assert(sizeof(W_Stats_Playtime_C_Hide) == 0x000010, "Wrong size on W_Stats_Playtime_C_Hide");
static_assert(offsetof(W_Stats_Playtime_C_Hide, Delay) == 0x000000, "Member 'W_Stats_Playtime_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_Hide, Collapse) == 0x000008, "Member 'W_Stats_Playtime_C_Hide::Collapse' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.InitializeMaterials
// 0x0018 (0x0018 - 0x0000)
struct W_Stats_Playtime_C_InitializeMaterials final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_InitializeMaterials) == 0x000008, "Wrong alignment on W_Stats_Playtime_C_InitializeMaterials");
static_assert(sizeof(W_Stats_Playtime_C_InitializeMaterials) == 0x000018, "Wrong size on W_Stats_Playtime_C_InitializeMaterials");
static_assert(offsetof(W_Stats_Playtime_C_InitializeMaterials, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_Stats_Playtime_C_InitializeMaterials::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_InitializeMaterials, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'W_Stats_Playtime_C_InitializeMaterials::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_InitializeMaterials, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000010, "Member 'W_Stats_Playtime_C_InitializeMaterials::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.OnStatChanged
// 0x0010 (0x0010 - 0x0000)
struct W_Stats_Playtime_C_OnStatChanged final
{
public:
	class FString                                 StatID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_OnStatChanged) == 0x000008, "Wrong alignment on W_Stats_Playtime_C_OnStatChanged");
static_assert(sizeof(W_Stats_Playtime_C_OnStatChanged) == 0x000010, "Wrong size on W_Stats_Playtime_C_OnStatChanged");
static_assert(offsetof(W_Stats_Playtime_C_OnStatChanged, StatID) == 0x000000, "Member 'W_Stats_Playtime_C_OnStatChanged::StatID' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.PopulateDemoValues
// 0x0030 (0x0030 - 0x0000)
struct W_Stats_Playtime_C_PopulateDemoValues final
{
public:
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_PopulateDemoValues) == 0x000008, "Wrong alignment on W_Stats_Playtime_C_PopulateDemoValues");
static_assert(sizeof(W_Stats_Playtime_C_PopulateDemoValues) == 0x000030, "Wrong size on W_Stats_Playtime_C_PopulateDemoValues");
static_assert(offsetof(W_Stats_Playtime_C_PopulateDemoValues, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000000, "Member 'W_Stats_Playtime_C_PopulateDemoValues::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_PopulateDemoValues, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000008, "Member 'W_Stats_Playtime_C_PopulateDemoValues::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_PopulateDemoValues, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000010, "Member 'W_Stats_Playtime_C_PopulateDemoValues::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_PopulateDemoValues, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000018, "Member 'W_Stats_Playtime_C_PopulateDemoValues::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_PopulateDemoValues, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000020, "Member 'W_Stats_Playtime_C_PopulateDemoValues::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_PopulateDemoValues, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000028, "Member 'W_Stats_Playtime_C_PopulateDemoValues::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_Stats_Playtime_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_PreConstruct) == 0x000001, "Wrong alignment on W_Stats_Playtime_C_PreConstruct");
static_assert(sizeof(W_Stats_Playtime_C_PreConstruct) == 0x000001, "Wrong size on W_Stats_Playtime_C_PreConstruct");
static_assert(offsetof(W_Stats_Playtime_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_Stats_Playtime_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.Reveal
// 0x0008 (0x0008 - 0x0000)
struct W_Stats_Playtime_C_Reveal final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_Reveal) == 0x000008, "Wrong alignment on W_Stats_Playtime_C_Reveal");
static_assert(sizeof(W_Stats_Playtime_C_Reveal) == 0x000008, "Wrong size on W_Stats_Playtime_C_Reveal");
static_assert(offsetof(W_Stats_Playtime_C_Reveal, Delay) == 0x000000, "Member 'W_Stats_Playtime_C_Reveal::Delay' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_Stats_Playtime_C_SetInputMode final
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_SetInputMode) == 0x000001, "Wrong alignment on W_Stats_Playtime_C_SetInputMode");
static_assert(sizeof(W_Stats_Playtime_C_SetInputMode) == 0x000001, "Wrong size on W_Stats_Playtime_C_SetInputMode");
static_assert(offsetof(W_Stats_Playtime_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_Stats_Playtime_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.UpdateStats
// 0x0140 (0x0140 - 0x0000)
struct W_Stats_Playtime_C_UpdateStats final
{
public:
	class FString                                 CurrentStatID;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int64                                         Temp_int64_Variable;                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable;                              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable;                                // 0x0028(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERONStatType                                  Temp_wildcard_Variable;                            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_1;                            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetSingleplayerPercent_ReturnValue;       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetSingleplayerPercent_ReturnValue_1;     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess_1;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStatSubsystem*                         CallFunc_GetStatSubsystem_ReturnValue;             // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStatSubsystem*                         CallFunc_GetStatSubsystem_ReturnValue_1;           // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_GetFriendStatValue_ReturnValue;           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_Int64ToDouble_ReturnValue;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_GetStatValue_ReturnValue;                 // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_Int64ToDouble_ReturnValue_1;         // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStatDefinition                        CallFunc_GetDataTableRowFromName_OutRow;           // 0x00E0(0x0058)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_UpdateStats) == 0x000008, "Wrong alignment on W_Stats_Playtime_C_UpdateStats");
static_assert(sizeof(W_Stats_Playtime_C_UpdateStats) == 0x000140, "Wrong size on W_Stats_Playtime_C_UpdateStats");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CurrentStatID) == 0x000000, "Member 'W_Stats_Playtime_C_UpdateStats::CurrentStatID' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, Temp_int64_Variable) == 0x000010, "Member 'W_Stats_Playtime_C_UpdateStats::Temp_int64_Variable' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, Temp_string_Variable) == 0x000018, "Member 'W_Stats_Playtime_C_UpdateStats::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, Temp_text_Variable) == 0x000028, "Member 'W_Stats_Playtime_C_UpdateStats::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, Temp_bool_Variable) == 0x000040, "Member 'W_Stats_Playtime_C_UpdateStats::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, Temp_wildcard_Variable) == 0x000041, "Member 'W_Stats_Playtime_C_UpdateStats::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, K2Node_SwitchString_CmpSuccess) == 0x000042, "Member 'W_Stats_Playtime_C_UpdateStats::K2Node_SwitchString_CmpSuccess' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000043, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, Temp_string_Variable_1) == 0x000048, "Member 'W_Stats_Playtime_C_UpdateStats::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_MakeLiteralByte_ReturnValue) == 0x000058, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'W_Stats_Playtime_C_UpdateStats::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, Temp_int_Array_Index_Variable) == 0x000064, "Member 'W_Stats_Playtime_C_UpdateStats::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_GetSingleplayerPercent_ReturnValue) == 0x000068, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_GetSingleplayerPercent_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_GetSingleplayerPercent_ReturnValue_1) == 0x000070, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_GetSingleplayerPercent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x000078, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000080, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, K2Node_SwitchString_CmpSuccess_1) == 0x000088, "Member 'W_Stats_Playtime_C_UpdateStats::K2Node_SwitchString_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_GetStatSubsystem_ReturnValue) == 0x000090, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_GetStatSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_GetStatSubsystem_ReturnValue_1) == 0x000098, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_GetStatSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_GetFriendStatValue_ReturnValue) == 0x0000A0, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_GetFriendStatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_Conv_Int64ToDouble_ReturnValue) == 0x0000A8, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_Conv_Int64ToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0000B0, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_GetStatValue_ReturnValue) == 0x0000B8, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_GetStatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_Conv_Int64ToDouble_ReturnValue_1) == 0x0000C0, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_Conv_Int64ToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_Array_Length_ReturnValue) == 0x0000D8, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_Less_IntInt_ReturnValue) == 0x0000DC, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000E0, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000138, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStats, CallFunc_IsValid_ReturnValue) == 0x000139, "Member 'W_Stats_Playtime_C_UpdateStats::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.UpdateStyle
// 0x0100 (0x0100 - 0x0000)
struct W_Stats_Playtime_C_UpdateStyle final
{
public:
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue;               // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue_1;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue_2;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue_3;             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_FormatPlaytime_Result;                    // 0x0020(0x0018)()
	class FText                                   CallFunc_FormatPlaytime_Result_1;                  // 0x0038(0x0018)()
	class FText                                   CallFunc_FormatPlaytime_Result_2;                  // 0x0050(0x0018)()
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue;            // 0x0068(0x0018)()
	double                                        CallFunc_GetGraphNotchValue_ReturnValue;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_FormatPlaytime_Result_3;                  // 0x0088(0x0018)()
	class FText                                   CallFunc_FormatPlaytime_Result_4;                  // 0x00A0(0x0018)()
	class FText                                   CallFunc_FormatPlaytime_Result_5;                  // 0x00B8(0x0018)()
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue_1;          // 0x00D0(0x0018)()
	double                                        CallFunc_GetGraphNotchValue_ReturnValue_1;         // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_2; // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_3; // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_UpdateStyle) == 0x000008, "Wrong alignment on W_Stats_Playtime_C_UpdateStyle");
static_assert(sizeof(W_Stats_Playtime_C_UpdateStyle) == 0x000100, "Wrong size on W_Stats_Playtime_C_UpdateStyle");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_SlotAsGridSlot_ReturnValue) == 0x000000, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_SlotAsGridSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_SlotAsGridSlot_ReturnValue_1) == 0x000008, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_SlotAsGridSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_SlotAsGridSlot_ReturnValue_2) == 0x000010, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_SlotAsGridSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_SlotAsGridSlot_ReturnValue_3) == 0x000018, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_SlotAsGridSlot_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_FormatPlaytime_Result) == 0x000020, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_FormatPlaytime_Result' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_FormatPlaytime_Result_1) == 0x000038, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_FormatPlaytime_Result_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_FormatPlaytime_Result_2) == 0x000050, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_FormatPlaytime_Result_2' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_Conv_DoubleToText_ReturnValue) == 0x000068, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_Conv_DoubleToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_GetGraphNotchValue_ReturnValue) == 0x000080, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_GetGraphNotchValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_FormatPlaytime_Result_3) == 0x000088, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_FormatPlaytime_Result_3' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_FormatPlaytime_Result_4) == 0x0000A0, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_FormatPlaytime_Result_4' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_FormatPlaytime_Result_5) == 0x0000B8, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_FormatPlaytime_Result_5' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_Conv_DoubleToText_ReturnValue_1) == 0x0000D0, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_Conv_DoubleToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_GetGraphNotchValue_ReturnValue_1) == 0x0000E8, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_GetGraphNotchValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x0000F0, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x0000F4, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_SetScalarParameterValue_Value_ImplicitCast_2) == 0x0000F8, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_SetScalarParameterValue_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(W_Stats_Playtime_C_UpdateStyle, CallFunc_SetScalarParameterValue_Value_ImplicitCast_3) == 0x0000FC, "Member 'W_Stats_Playtime_C_UpdateStyle::CallFunc_SetScalarParameterValue_Value_ImplicitCast_3' has a wrong offset!");

// Function W_Stats_Playtime.W_Stats_Playtime_C.GetFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct W_Stats_Playtime_C_GetFocusTarget final
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Stats_Playtime_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_Stats_Playtime_C_GetFocusTarget");
static_assert(sizeof(W_Stats_Playtime_C_GetFocusTarget) == 0x000008, "Wrong size on W_Stats_Playtime_C_GetFocusTarget");
static_assert(offsetof(W_Stats_Playtime_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_Stats_Playtime_C_GetFocusTarget::Focus' has a wrong offset!");

}

