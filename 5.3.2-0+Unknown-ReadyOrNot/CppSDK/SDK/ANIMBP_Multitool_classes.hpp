#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_Multitool

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ANIMBP_Multitool_structs.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ANIMBP_Multitool.ANIMBP_Multitool_C
// 0x0200 (0x0550 - 0x0350)
class UANIMBP_Multitool_C final : public UAnimInstance
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ANIMBP_Multitool::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;             // 0x0358(0x0002)(HasGetValueTypeHash)
	uint8                                         Pad_35A[0x6];                                      // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0360(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0368(0x0008)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum;                     // 0x0370(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x03B8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0400(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0448(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0490(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x04D8(0x0048)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0520(0x0020)()
	EMultitoolFunctions                           CurrentToolKit;                                    // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SecondStage;                                       // 0x0541(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ANIMBP_Multitool(int32 EntryPoint);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ANIMBP_Multitool_C">();
	}
	static class UANIMBP_Multitool_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANIMBP_Multitool_C>();
	}
};
static_assert(alignof(UANIMBP_Multitool_C) == 0x000010, "Wrong alignment on UANIMBP_Multitool_C");
static_assert(sizeof(UANIMBP_Multitool_C) == 0x000550, "Wrong size on UANIMBP_Multitool_C");
static_assert(offsetof(UANIMBP_Multitool_C, UberGraphFrame) == 0x000350, "Member 'UANIMBP_Multitool_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UANIMBP_Multitool_C, __AnimBlueprintMutables) == 0x000358, "Member 'UANIMBP_Multitool_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UANIMBP_Multitool_C, AnimBlueprintExtension_PropertyAccess) == 0x000360, "Member 'UANIMBP_Multitool_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UANIMBP_Multitool_C, AnimBlueprintExtension_Base) == 0x000368, "Member 'UANIMBP_Multitool_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UANIMBP_Multitool_C, AnimGraphNode_BlendListByEnum) == 0x000370, "Member 'UANIMBP_Multitool_C::AnimGraphNode_BlendListByEnum' has a wrong offset!");
static_assert(offsetof(UANIMBP_Multitool_C, AnimGraphNode_SequencePlayer_3) == 0x0003B8, "Member 'UANIMBP_Multitool_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UANIMBP_Multitool_C, AnimGraphNode_SequencePlayer_2) == 0x000400, "Member 'UANIMBP_Multitool_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_Multitool_C, AnimGraphNode_SequencePlayer_1) == 0x000448, "Member 'UANIMBP_Multitool_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_Multitool_C, AnimGraphNode_Slot) == 0x000490, "Member 'UANIMBP_Multitool_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UANIMBP_Multitool_C, AnimGraphNode_SequencePlayer) == 0x0004D8, "Member 'UANIMBP_Multitool_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UANIMBP_Multitool_C, AnimGraphNode_Root) == 0x000520, "Member 'UANIMBP_Multitool_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UANIMBP_Multitool_C, CurrentToolKit) == 0x000540, "Member 'UANIMBP_Multitool_C::CurrentToolKit' has a wrong offset!");
static_assert(offsetof(UANIMBP_Multitool_C, SecondStage) == 0x000541, "Member 'UANIMBP_Multitool_C::SecondStage' has a wrong offset!");

}

