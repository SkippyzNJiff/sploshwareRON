#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RadialIcon_MapMarking

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EIconAnimationStyles_structs.hpp"


namespace SDK::Params
{

// Function W_RadialIcon_MapMarking.W_RadialIcon_MapMarking_C.ExecuteUbergraph_W_RadialIcon_MapMarking
// 0x00C8 (0x00C8 - 0x0000)
struct W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Selected;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Temp_object_Variable;                              // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EIconAnimationStyles                          Temp_byte_Variable;                                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Unselected;                           // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default;                             // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast;       // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast;       // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking) == 0x000008, "Wrong alignment on W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking");
static_assert(sizeof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking) == 0x0000C8, "Wrong size on W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, EntryPoint) == 0x000000, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, K2Node_Event_Selected) == 0x000004, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::K2Node_Event_Selected' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, K2Node_Event_MyGeometry) == 0x000008, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, K2Node_Event_InDeltaTime) == 0x000040, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000048, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000050, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, CallFunc_LinearColorLerp_ReturnValue) == 0x000058, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, CallFunc_FClamp_ReturnValue) == 0x000068, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000070, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, K2Node_Event_IsDesignTime) == 0x000078, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, CallFunc_FClamp_ReturnValue_1) == 0x000080, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, Temp_object_Variable) == 0x000088, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, Temp_byte_Variable) == 0x000090, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, K2Node_Event_Unselected) == 0x000091, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::K2Node_Event_Unselected' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, K2Node_Select_Default) == 0x000098, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, CallFunc_IsValid_ReturnValue) == 0x0000A0, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, CallFunc_Not_PreBool_ReturnValue) == 0x0000A1, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, CallFunc_PlayAnimation_ReturnValue) == 0x0000A8, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x0000B0, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, CallFunc_LinearColorLerp_Alpha_ImplicitCast) == 0x0000B8, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::CallFunc_LinearColorLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking, CallFunc_Divide_DoubleDouble_B_ImplicitCast) == 0x0000C0, "Member 'W_RadialIcon_MapMarking_C_ExecuteUbergraph_W_RadialIcon_MapMarking::CallFunc_Divide_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function W_RadialIcon_MapMarking.W_RadialIcon_MapMarking_C.Get_Icon_ColorAndOpacity_0
// 0x0010 (0x0010 - 0x0000)
struct W_RadialIcon_MapMarking_C_Get_Icon_ColorAndOpacity_0 final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RadialIcon_MapMarking_C_Get_Icon_ColorAndOpacity_0) == 0x000004, "Wrong alignment on W_RadialIcon_MapMarking_C_Get_Icon_ColorAndOpacity_0");
static_assert(sizeof(W_RadialIcon_MapMarking_C_Get_Icon_ColorAndOpacity_0) == 0x000010, "Wrong size on W_RadialIcon_MapMarking_C_Get_Icon_ColorAndOpacity_0");
static_assert(offsetof(W_RadialIcon_MapMarking_C_Get_Icon_ColorAndOpacity_0, ReturnValue) == 0x000000, "Member 'W_RadialIcon_MapMarking_C_Get_Icon_ColorAndOpacity_0::ReturnValue' has a wrong offset!");

// Function W_RadialIcon_MapMarking.W_RadialIcon_MapMarking_C.OnHighlight
// 0x0001 (0x0001 - 0x0000)
struct W_RadialIcon_MapMarking_C_OnHighlight final
{
public:
	bool                                          Selected_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RadialIcon_MapMarking_C_OnHighlight) == 0x000001, "Wrong alignment on W_RadialIcon_MapMarking_C_OnHighlight");
static_assert(sizeof(W_RadialIcon_MapMarking_C_OnHighlight) == 0x000001, "Wrong size on W_RadialIcon_MapMarking_C_OnHighlight");
static_assert(offsetof(W_RadialIcon_MapMarking_C_OnHighlight, Selected_0) == 0x000000, "Member 'W_RadialIcon_MapMarking_C_OnHighlight::Selected_0' has a wrong offset!");

// Function W_RadialIcon_MapMarking.W_RadialIcon_MapMarking_C.OnUnhighlight
// 0x0001 (0x0001 - 0x0000)
struct W_RadialIcon_MapMarking_C_OnUnhighlight final
{
public:
	bool                                          Unselected;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RadialIcon_MapMarking_C_OnUnhighlight) == 0x000001, "Wrong alignment on W_RadialIcon_MapMarking_C_OnUnhighlight");
static_assert(sizeof(W_RadialIcon_MapMarking_C_OnUnhighlight) == 0x000001, "Wrong size on W_RadialIcon_MapMarking_C_OnUnhighlight");
static_assert(offsetof(W_RadialIcon_MapMarking_C_OnUnhighlight, Unselected) == 0x000000, "Member 'W_RadialIcon_MapMarking_C_OnUnhighlight::Unselected' has a wrong offset!");

// Function W_RadialIcon_MapMarking.W_RadialIcon_MapMarking_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_RadialIcon_MapMarking_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RadialIcon_MapMarking_C_PreConstruct) == 0x000001, "Wrong alignment on W_RadialIcon_MapMarking_C_PreConstruct");
static_assert(sizeof(W_RadialIcon_MapMarking_C_PreConstruct) == 0x000001, "Wrong size on W_RadialIcon_MapMarking_C_PreConstruct");
static_assert(offsetof(W_RadialIcon_MapMarking_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_RadialIcon_MapMarking_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_RadialIcon_MapMarking.W_RadialIcon_MapMarking_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_RadialIcon_MapMarking_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RadialIcon_MapMarking_C_Tick) == 0x000004, "Wrong alignment on W_RadialIcon_MapMarking_C_Tick");
static_assert(sizeof(W_RadialIcon_MapMarking_C_Tick) == 0x00003C, "Wrong size on W_RadialIcon_MapMarking_C_Tick");
static_assert(offsetof(W_RadialIcon_MapMarking_C_Tick, MyGeometry) == 0x000000, "Member 'W_RadialIcon_MapMarking_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_RadialIcon_MapMarking_C_Tick, InDeltaTime) == 0x000038, "Member 'W_RadialIcon_MapMarking_C_Tick::InDeltaTime' has a wrong offset!");

}

