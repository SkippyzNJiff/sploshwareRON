#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PageWrapper

#include "Basic.hpp"

#include "ReadyOrNot_structs.hpp"
#include "CommonInput_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_PageWrapper.W_PageWrapper_C.AddFooterEntry
// 0x0090 (0x0090 - 0x0000)
struct W_PageWrapper_C_AddFooterEntry final
{
public:
	int32                                         InsertAtIndex;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EntryID;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
	struct FScreenFooterEntry                     ScreenFooterEntry;                                 // 0x0018(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_PageWrapper_C_AddFooterEntry) == 0x000008, "Wrong alignment on W_PageWrapper_C_AddFooterEntry");
static_assert(sizeof(W_PageWrapper_C_AddFooterEntry) == 0x000090, "Wrong size on W_PageWrapper_C_AddFooterEntry");
static_assert(offsetof(W_PageWrapper_C_AddFooterEntry, InsertAtIndex) == 0x000000, "Member 'W_PageWrapper_C_AddFooterEntry::InsertAtIndex' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_AddFooterEntry, EntryID) == 0x000008, "Member 'W_PageWrapper_C_AddFooterEntry::EntryID' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_AddFooterEntry, ScreenFooterEntry) == 0x000018, "Member 'W_PageWrapper_C_AddFooterEntry::ScreenFooterEntry' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.AddHeaderNavOption
// 0x0028 (0x0028 - 0x0000)
struct W_PageWrapper_C_AddHeaderNavOption final
{
public:
	class FName                                   OptionNameID;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   OptionLabelText;                                   // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          DefaultSelection;                                  // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_AddHeaderNavOption) == 0x000008, "Wrong alignment on W_PageWrapper_C_AddHeaderNavOption");
static_assert(sizeof(W_PageWrapper_C_AddHeaderNavOption) == 0x000028, "Wrong size on W_PageWrapper_C_AddHeaderNavOption");
static_assert(offsetof(W_PageWrapper_C_AddHeaderNavOption, OptionNameID) == 0x000000, "Member 'W_PageWrapper_C_AddHeaderNavOption::OptionNameID' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_AddHeaderNavOption, OptionLabelText) == 0x000008, "Member 'W_PageWrapper_C_AddHeaderNavOption::OptionLabelText' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_AddHeaderNavOption, DefaultSelection) == 0x000020, "Member 'W_PageWrapper_C_AddHeaderNavOption::DefaultSelection' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_PageWrapper_C_BackPage final
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_BackPage) == 0x000001, "Wrong alignment on W_PageWrapper_C_BackPage");
static_assert(sizeof(W_PageWrapper_C_BackPage) == 0x000001, "Wrong size on W_PageWrapper_C_BackPage");
static_assert(offsetof(W_PageWrapper_C_BackPage, Handled) == 0x000000, "Member 'W_PageWrapper_C_BackPage::Handled' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.BndEvt__W_PageHeader_W_PageHeader_Carousel_K2Node_ComponentBoundEvent_0_OnOptionSelected__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PageWrapper_C_BndEvt__W_PageHeader_W_PageHeader_Carousel_K2Node_ComponentBoundEvent_0_OnOptionSelected__DelegateSignature final
{
public:
	class FName                                   OptionID;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_BndEvt__W_PageHeader_W_PageHeader_Carousel_K2Node_ComponentBoundEvent_0_OnOptionSelected__DelegateSignature) == 0x000004, "Wrong alignment on W_PageWrapper_C_BndEvt__W_PageHeader_W_PageHeader_Carousel_K2Node_ComponentBoundEvent_0_OnOptionSelected__DelegateSignature");
static_assert(sizeof(W_PageWrapper_C_BndEvt__W_PageHeader_W_PageHeader_Carousel_K2Node_ComponentBoundEvent_0_OnOptionSelected__DelegateSignature) == 0x000008, "Wrong size on W_PageWrapper_C_BndEvt__W_PageHeader_W_PageHeader_Carousel_K2Node_ComponentBoundEvent_0_OnOptionSelected__DelegateSignature");
static_assert(offsetof(W_PageWrapper_C_BndEvt__W_PageHeader_W_PageHeader_Carousel_K2Node_ComponentBoundEvent_0_OnOptionSelected__DelegateSignature, OptionID) == 0x000000, "Member 'W_PageWrapper_C_BndEvt__W_PageHeader_W_PageHeader_Carousel_K2Node_ComponentBoundEvent_0_OnOptionSelected__DelegateSignature::OptionID' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.BndEvt__W_PageHeader_W_ScreenFooter_K2Node_ComponentBoundEvent_3_OnFooterEntryClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PageWrapper_C_BndEvt__W_PageHeader_W_ScreenFooter_K2Node_ComponentBoundEvent_3_OnFooterEntryClicked__DelegateSignature final
{
public:
	class UW_ScreenFooterEntry_C*                 FooterEntry;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_BndEvt__W_PageHeader_W_ScreenFooter_K2Node_ComponentBoundEvent_3_OnFooterEntryClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_PageWrapper_C_BndEvt__W_PageHeader_W_ScreenFooter_K2Node_ComponentBoundEvent_3_OnFooterEntryClicked__DelegateSignature");
static_assert(sizeof(W_PageWrapper_C_BndEvt__W_PageHeader_W_ScreenFooter_K2Node_ComponentBoundEvent_3_OnFooterEntryClicked__DelegateSignature) == 0x000008, "Wrong size on W_PageWrapper_C_BndEvt__W_PageHeader_W_ScreenFooter_K2Node_ComponentBoundEvent_3_OnFooterEntryClicked__DelegateSignature");
static_assert(offsetof(W_PageWrapper_C_BndEvt__W_PageHeader_W_ScreenFooter_K2Node_ComponentBoundEvent_3_OnFooterEntryClicked__DelegateSignature, FooterEntry) == 0x000000, "Member 'W_PageWrapper_C_BndEvt__W_PageHeader_W_ScreenFooter_K2Node_ComponentBoundEvent_3_OnFooterEntryClicked__DelegateSignature::FooterEntry' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_1_OnNextHandled__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PageWrapper_C_BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_1_OnNextHandled__DelegateSignature final
{
public:
	class FName                                   OptionID;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_1_OnNextHandled__DelegateSignature) == 0x000004, "Wrong alignment on W_PageWrapper_C_BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_1_OnNextHandled__DelegateSignature");
static_assert(sizeof(W_PageWrapper_C_BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_1_OnNextHandled__DelegateSignature) == 0x000008, "Wrong size on W_PageWrapper_C_BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_1_OnNextHandled__DelegateSignature");
static_assert(offsetof(W_PageWrapper_C_BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_1_OnNextHandled__DelegateSignature, OptionID) == 0x000000, "Member 'W_PageWrapper_C_BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_1_OnNextHandled__DelegateSignature::OptionID' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_4_OnPreviousHandled__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PageWrapper_C_BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_4_OnPreviousHandled__DelegateSignature final
{
public:
	class FName                                   OptionID;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_4_OnPreviousHandled__DelegateSignature) == 0x000004, "Wrong alignment on W_PageWrapper_C_BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_4_OnPreviousHandled__DelegateSignature");
static_assert(sizeof(W_PageWrapper_C_BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_4_OnPreviousHandled__DelegateSignature) == 0x000008, "Wrong size on W_PageWrapper_C_BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_4_OnPreviousHandled__DelegateSignature");
static_assert(offsetof(W_PageWrapper_C_BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_4_OnPreviousHandled__DelegateSignature, OptionID) == 0x000000, "Member 'W_PageWrapper_C_BndEvt__W_PageWrapper_PageHeaderNav_K2Node_ComponentBoundEvent_4_OnPreviousHandled__DelegateSignature::OptionID' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_PageWrapper_C_ChangePage final
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_ChangePage) == 0x000004, "Wrong alignment on W_PageWrapper_C_ChangePage");
static_assert(sizeof(W_PageWrapper_C_ChangePage) == 0x000008, "Wrong size on W_PageWrapper_C_ChangePage");
static_assert(offsetof(W_PageWrapper_C_ChangePage, PageName) == 0x000000, "Member 'W_PageWrapper_C_ChangePage::PageName' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.DisableHeaderNavOption
// 0x0008 (0x0008 - 0x0000)
struct W_PageWrapper_C_DisableHeaderNavOption final
{
public:
	class FName                                   OptionNameID;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_DisableHeaderNavOption) == 0x000004, "Wrong alignment on W_PageWrapper_C_DisableHeaderNavOption");
static_assert(sizeof(W_PageWrapper_C_DisableHeaderNavOption) == 0x000008, "Wrong size on W_PageWrapper_C_DisableHeaderNavOption");
static_assert(offsetof(W_PageWrapper_C_DisableHeaderNavOption, OptionNameID) == 0x000000, "Member 'W_PageWrapper_C_DisableHeaderNavOption::OptionNameID' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.EnableHeaderNavOption
// 0x0008 (0x0008 - 0x0000)
struct W_PageWrapper_C_EnableHeaderNavOption final
{
public:
	class FName                                   OptionNameID;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_EnableHeaderNavOption) == 0x000004, "Wrong alignment on W_PageWrapper_C_EnableHeaderNavOption");
static_assert(sizeof(W_PageWrapper_C_EnableHeaderNavOption) == 0x000008, "Wrong size on W_PageWrapper_C_EnableHeaderNavOption");
static_assert(offsetof(W_PageWrapper_C_EnableHeaderNavOption, OptionNameID) == 0x000000, "Member 'W_PageWrapper_C_EnableHeaderNavOption::OptionNameID' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.ExecuteUbergraph_W_PageWrapper
// 0x00F8 (0x00F8 - 0x0000)
struct W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate;            // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0014(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_OptionID_2;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Delay_1;                              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Delay;                                // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              K2Node_CustomEvent_bNewInputType;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_PageName;                             // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsGamepad;                            // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_ScreenFooterEntry_C*                 K2Node_ComponentBoundEvent_FooterEntry;            // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetButtonID_ButtonID;                     // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetLineWidthByConstraint_ReturnValue;     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UW_ScreenFooterEntry_C*                 K2Node_CustomEvent_NewParam;                       // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetButtonID_ButtonID_1;                   // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_OptionID_1;             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_OptionID;               // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper) == 0x000008, "Wrong alignment on W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper");
static_assert(sizeof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper) == 0x0000F8, "Wrong size on W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, EntryPoint) == 0x000000, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_Event_MyGeometry) == 0x000014, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_Event_InDeltaTime) == 0x00004C, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_ComponentBoundEvent_OptionID_2) == 0x000050, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_ComponentBoundEvent_OptionID_2' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_Event_Delay_1) == 0x000058, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_Event_Delay) == 0x000060, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_Event_Collapse) == 0x000068, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_Event_IsDesignTime) == 0x000069, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000070, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, CallFunc_GetCurrentInputType_ReturnValue) == 0x000078, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_CustomEvent_bNewInputType) == 0x000079, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_CustomEvent_bNewInputType' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_Event_PageName) == 0x00007C, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000084, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_Event_IsGamepad) == 0x000085, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_ComponentBoundEvent_FooterEntry) == 0x000088, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_ComponentBoundEvent_FooterEntry' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, CallFunc_GetViewportSize_ReturnValue) == 0x000090, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, CallFunc_GetButtonID_ButtonID) == 0x0000A0, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::CallFunc_GetButtonID_ButtonID' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x0000B0, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, CallFunc_IsValid_ReturnValue) == 0x0000B1, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, CallFunc_GetLineWidthByConstraint_ReturnValue) == 0x0000B8, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::CallFunc_GetLineWidthByConstraint_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, CallFunc_PlayAnimationForward_ReturnValue) == 0x0000C0, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_CustomEvent_NewParam) == 0x0000C8, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_CustomEvent_NewParam' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, CallFunc_GetButtonID_ButtonID_1) == 0x0000D0, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::CallFunc_GetButtonID_ButtonID_1' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_ComponentBoundEvent_OptionID_1) == 0x0000E0, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_ComponentBoundEvent_OptionID_1' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, K2Node_ComponentBoundEvent_OptionID) == 0x0000E8, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::K2Node_ComponentBoundEvent_OptionID' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x0000F0, "Member 'W_PageWrapper_C_ExecuteUbergraph_W_PageWrapper::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.GetCurrentNavSelection
// 0x0008 (0x0008 - 0x0000)
struct W_PageWrapper_C_GetCurrentNavSelection final
{
public:
	class FName                                   SelectedNavOption_0;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_GetCurrentNavSelection) == 0x000004, "Wrong alignment on W_PageWrapper_C_GetCurrentNavSelection");
static_assert(sizeof(W_PageWrapper_C_GetCurrentNavSelection) == 0x000008, "Wrong size on W_PageWrapper_C_GetCurrentNavSelection");
static_assert(offsetof(W_PageWrapper_C_GetCurrentNavSelection, SelectedNavOption_0) == 0x000000, "Member 'W_PageWrapper_C_GetCurrentNavSelection::SelectedNavOption_0' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.GetLineWidthByConstraint
// 0x0098 (0x0098 - 0x0000)
struct W_PageWrapper_C_GetLineWidthByConstraint final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RelativeScreenLength;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OpenSpace;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAspectConstrained_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_GetLineWidthByConstraint) == 0x000008, "Wrong alignment on W_PageWrapper_C_GetLineWidthByConstraint");
static_assert(sizeof(W_PageWrapper_C_GetLineWidthByConstraint) == 0x000098, "Wrong size on W_PageWrapper_C_GetLineWidthByConstraint");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, ReturnValue) == 0x000000, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, RelativeScreenLength) == 0x000008, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::RelativeScreenLength' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, OpenSpace) == 0x000010, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::OpenSpace' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_IsAspectConstrained_ReturnValue) == 0x000018, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_IsAspectConstrained_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_BreakVector2D_X) == 0x000020, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_BreakVector2D_X_1) == 0x000030, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_BreakVector2D_Y_1) == 0x000038, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000040, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_BreakVector2D_X_2) == 0x000048, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_BreakVector2D_Y_2) == 0x000050, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000058, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000060, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000070, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000078, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_SelectFloat_ReturnValue) == 0x000080, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000088, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetLineWidthByConstraint, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000090, "Member 'W_PageWrapper_C_GetLineWidthByConstraint::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.Hide
// 0x0010 (0x0010 - 0x0000)
struct W_PageWrapper_C_Hide final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_Hide) == 0x000008, "Wrong alignment on W_PageWrapper_C_Hide");
static_assert(sizeof(W_PageWrapper_C_Hide) == 0x000010, "Wrong size on W_PageWrapper_C_Hide");
static_assert(offsetof(W_PageWrapper_C_Hide, Delay) == 0x000000, "Member 'W_PageWrapper_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_Hide, Collapse) == 0x000008, "Member 'W_PageWrapper_C_Hide::Collapse' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.HideFooterEntryByID
// 0x0010 (0x0010 - 0x0000)
struct W_PageWrapper_C_HideFooterEntryByID final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_HideFooterEntryByID) == 0x000008, "Wrong alignment on W_PageWrapper_C_HideFooterEntryByID");
static_assert(sizeof(W_PageWrapper_C_HideFooterEntryByID) == 0x000010, "Wrong size on W_PageWrapper_C_HideFooterEntryByID");
static_assert(offsetof(W_PageWrapper_C_HideFooterEntryByID, ID) == 0x000000, "Member 'W_PageWrapper_C_HideFooterEntryByID::ID' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.HideFooterEntryByIndex
// 0x0004 (0x0004 - 0x0000)
struct W_PageWrapper_C_HideFooterEntryByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_HideFooterEntryByIndex) == 0x000004, "Wrong alignment on W_PageWrapper_C_HideFooterEntryByIndex");
static_assert(sizeof(W_PageWrapper_C_HideFooterEntryByIndex) == 0x000004, "Wrong size on W_PageWrapper_C_HideFooterEntryByIndex");
static_assert(offsetof(W_PageWrapper_C_HideFooterEntryByIndex, Index_0) == 0x000000, "Member 'W_PageWrapper_C_HideFooterEntryByIndex::Index_0' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.InitializeMaterials
// 0x0018 (0x0018 - 0x0000)
struct W_PageWrapper_C_InitializeMaterials final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_InitializeMaterials) == 0x000008, "Wrong alignment on W_PageWrapper_C_InitializeMaterials");
static_assert(sizeof(W_PageWrapper_C_InitializeMaterials) == 0x000018, "Wrong size on W_PageWrapper_C_InitializeMaterials");
static_assert(offsetof(W_PageWrapper_C_InitializeMaterials, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_PageWrapper_C_InitializeMaterials::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_InitializeMaterials, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'W_PageWrapper_C_InitializeMaterials::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_InitializeMaterials, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'W_PageWrapper_C_InitializeMaterials::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_InitializeMaterials, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000010, "Member 'W_PageWrapper_C_InitializeMaterials::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.InitializeNavigation
// 0x0058 (0x0058 - 0x0000)
struct W_PageWrapper_C_InitializeNavigation final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPS5_IsPlaystation;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_IsNotEmpty_ReturnValue;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FText>                K2Node_Select_Default;                             // 0x0008(0x0050)()
};
static_assert(alignof(W_PageWrapper_C_InitializeNavigation) == 0x000008, "Wrong alignment on W_PageWrapper_C_InitializeNavigation");
static_assert(sizeof(W_PageWrapper_C_InitializeNavigation) == 0x000058, "Wrong size on W_PageWrapper_C_InitializeNavigation");
static_assert(offsetof(W_PageWrapper_C_InitializeNavigation, Temp_bool_Variable) == 0x000000, "Member 'W_PageWrapper_C_InitializeNavigation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_InitializeNavigation, CallFunc_IsPS5_IsPlaystation) == 0x000001, "Member 'W_PageWrapper_C_InitializeNavigation::CallFunc_IsPS5_IsPlaystation' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_InitializeNavigation, CallFunc_Map_IsNotEmpty_ReturnValue) == 0x000002, "Member 'W_PageWrapper_C_InitializeNavigation::CallFunc_Map_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_InitializeNavigation, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'W_PageWrapper_C_InitializeNavigation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_InitializeNavigation, K2Node_Select_Default) == 0x000008, "Member 'W_PageWrapper_C_InitializeNavigation::K2Node_Select_Default' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.InputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct W_PageWrapper_C_InputMethodChanged final
{
public:
	ECommonInputType                              bNewInputType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_InputMethodChanged) == 0x000001, "Wrong alignment on W_PageWrapper_C_InputMethodChanged");
static_assert(sizeof(W_PageWrapper_C_InputMethodChanged) == 0x000001, "Wrong size on W_PageWrapper_C_InputMethodChanged");
static_assert(offsetof(W_PageWrapper_C_InputMethodChanged, bNewInputType) == 0x000000, "Member 'W_PageWrapper_C_InputMethodChanged::bNewInputType' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.IsAspectConstrained
// 0x0028 (0x0028 - 0x0000)
struct W_PageWrapper_C_IsAspectConstrained final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_IsAspectConstrained) == 0x000008, "Wrong alignment on W_PageWrapper_C_IsAspectConstrained");
static_assert(sizeof(W_PageWrapper_C_IsAspectConstrained) == 0x000028, "Wrong size on W_PageWrapper_C_IsAspectConstrained");
static_assert(offsetof(W_PageWrapper_C_IsAspectConstrained, ReturnValue) == 0x000000, "Member 'W_PageWrapper_C_IsAspectConstrained::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_IsAspectConstrained, CallFunc_BreakVector2D_X) == 0x000008, "Member 'W_PageWrapper_C_IsAspectConstrained::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_IsAspectConstrained, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'W_PageWrapper_C_IsAspectConstrained::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_IsAspectConstrained, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000018, "Member 'W_PageWrapper_C_IsAspectConstrained::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_IsAspectConstrained, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000020, "Member 'W_PageWrapper_C_IsAspectConstrained::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_IsAspectConstrained, CallFunc_BooleanAND_ReturnValue) == 0x000021, "Member 'W_PageWrapper_C_IsAspectConstrained::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.IsPS5
// 0x0003 (0x0003 - 0x0000)
struct W_PageWrapper_C_IsPS5 final
{
public:
	bool                                          IsPlaystation;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGamePlatform                                 CallFunc_GetPlatform_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_IsPS5) == 0x000001, "Wrong alignment on W_PageWrapper_C_IsPS5");
static_assert(sizeof(W_PageWrapper_C_IsPS5) == 0x000003, "Wrong size on W_PageWrapper_C_IsPS5");
static_assert(offsetof(W_PageWrapper_C_IsPS5, IsPlaystation) == 0x000000, "Member 'W_PageWrapper_C_IsPS5::IsPlaystation' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_IsPS5, CallFunc_GetPlatform_ReturnValue) == 0x000001, "Member 'W_PageWrapper_C_IsPS5::CallFunc_GetPlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_IsPS5, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'W_PageWrapper_C_IsPS5::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.OnFooterEntryPressed
// 0x0008 (0x0008 - 0x0000)
struct W_PageWrapper_C_OnFooterEntryPressed final
{
public:
	class UW_ScreenFooterEntry_C*                 NewParam;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_OnFooterEntryPressed) == 0x000008, "Wrong alignment on W_PageWrapper_C_OnFooterEntryPressed");
static_assert(sizeof(W_PageWrapper_C_OnFooterEntryPressed) == 0x000008, "Wrong size on W_PageWrapper_C_OnFooterEntryPressed");
static_assert(offsetof(W_PageWrapper_C_OnFooterEntryPressed, NewParam) == 0x000000, "Member 'W_PageWrapper_C_OnFooterEntryPressed::NewParam' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_PageWrapper_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_PreConstruct) == 0x000001, "Wrong alignment on W_PageWrapper_C_PreConstruct");
static_assert(sizeof(W_PageWrapper_C_PreConstruct) == 0x000001, "Wrong size on W_PageWrapper_C_PreConstruct");
static_assert(offsetof(W_PageWrapper_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_PageWrapper_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.RemoveHeaderNavOption
// 0x0020 (0x0020 - 0x0000)
struct W_PageWrapper_C_RemoveHeaderNavOption final
{
public:
	class FName                                   OptionNameID;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_Map_Keys_Keys;                            // 0x0008(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_RemoveHeaderNavOption) == 0x000008, "Wrong alignment on W_PageWrapper_C_RemoveHeaderNavOption");
static_assert(sizeof(W_PageWrapper_C_RemoveHeaderNavOption) == 0x000020, "Wrong size on W_PageWrapper_C_RemoveHeaderNavOption");
static_assert(offsetof(W_PageWrapper_C_RemoveHeaderNavOption, OptionNameID) == 0x000000, "Member 'W_PageWrapper_C_RemoveHeaderNavOption::OptionNameID' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_RemoveHeaderNavOption, CallFunc_Map_Keys_Keys) == 0x000008, "Member 'W_PageWrapper_C_RemoveHeaderNavOption::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_RemoveHeaderNavOption, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000018, "Member 'W_PageWrapper_C_RemoveHeaderNavOption::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_RemoveHeaderNavOption, CallFunc_Map_Remove_ReturnValue) == 0x000019, "Member 'W_PageWrapper_C_RemoveHeaderNavOption::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.Reveal
// 0x0008 (0x0008 - 0x0000)
struct W_PageWrapper_C_Reveal final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_Reveal) == 0x000008, "Wrong alignment on W_PageWrapper_C_Reveal");
static_assert(sizeof(W_PageWrapper_C_Reveal) == 0x000008, "Wrong size on W_PageWrapper_C_Reveal");
static_assert(offsetof(W_PageWrapper_C_Reveal, Delay) == 0x000000, "Member 'W_PageWrapper_C_Reveal::Delay' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.SetAspectConstraints
// 0x0004 (0x0004 - 0x0000)
struct W_PageWrapper_C_SetAspectConstraints final
{
public:
	float                                         CallFunc_SetFixedAspectRatio_NewAspectRatio_ImplicitCast; // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_SetAspectConstraints) == 0x000004, "Wrong alignment on W_PageWrapper_C_SetAspectConstraints");
static_assert(sizeof(W_PageWrapper_C_SetAspectConstraints) == 0x000004, "Wrong size on W_PageWrapper_C_SetAspectConstraints");
static_assert(offsetof(W_PageWrapper_C_SetAspectConstraints, CallFunc_SetFixedAspectRatio_NewAspectRatio_ImplicitCast) == 0x000000, "Member 'W_PageWrapper_C_SetAspectConstraints::CallFunc_SetFixedAspectRatio_NewAspectRatio_ImplicitCast' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.SetFooterEntries
// 0x0068 (0x0068 - 0x0000)
struct W_PageWrapper_C_SetFooterEntries final
{
public:
	TMap<class FString, struct FScreenFooterEntry> FooterEntries_0;                                  // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	TArray<class FString>                         CallFunc_Map_Keys_Keys;                            // 0x0050(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_SetFooterEntries) == 0x000008, "Wrong alignment on W_PageWrapper_C_SetFooterEntries");
static_assert(sizeof(W_PageWrapper_C_SetFooterEntries) == 0x000068, "Wrong size on W_PageWrapper_C_SetFooterEntries");
static_assert(offsetof(W_PageWrapper_C_SetFooterEntries, FooterEntries_0) == 0x000000, "Member 'W_PageWrapper_C_SetFooterEntries::FooterEntries_0' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_SetFooterEntries, CallFunc_Map_Keys_Keys) == 0x000050, "Member 'W_PageWrapper_C_SetFooterEntries::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_SetFooterEntries, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000060, "Member 'W_PageWrapper_C_SetFooterEntries::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.SetFooterFocusByID
// 0x0020 (0x0020 - 0x0000)
struct W_PageWrapper_C_SetFooterFocusByID final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_SetFocusByID_FocusedEntryButton;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_SetFooterFocusByID) == 0x000008, "Wrong alignment on W_PageWrapper_C_SetFooterFocusByID");
static_assert(sizeof(W_PageWrapper_C_SetFooterFocusByID) == 0x000020, "Wrong size on W_PageWrapper_C_SetFooterFocusByID");
static_assert(offsetof(W_PageWrapper_C_SetFooterFocusByID, ID) == 0x000000, "Member 'W_PageWrapper_C_SetFooterFocusByID::ID' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_SetFooterFocusByID, CallFunc_SetFocusByID_FocusedEntryButton) == 0x000010, "Member 'W_PageWrapper_C_SetFooterFocusByID::CallFunc_SetFocusByID_FocusedEntryButton' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_SetFooterFocusByID, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'W_PageWrapper_C_SetFooterFocusByID::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.SetHeaderNavOptions
// 0x0080 (0x0080 - 0x0000)
struct W_PageWrapper_C_SetHeaderNavOptions final
{
public:
	TMap<class FName, class FText>                OptionMap;                                         // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	TArray<class FName>                           CallFunc_Map_Keys_Keys;                            // 0x0050(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_Identical_ReturnValue;              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_Map_Keys_Keys_1;                          // 0x0068(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_SetHeaderNavOptions) == 0x000008, "Wrong alignment on W_PageWrapper_C_SetHeaderNavOptions");
static_assert(sizeof(W_PageWrapper_C_SetHeaderNavOptions) == 0x000080, "Wrong size on W_PageWrapper_C_SetHeaderNavOptions");
static_assert(offsetof(W_PageWrapper_C_SetHeaderNavOptions, OptionMap) == 0x000000, "Member 'W_PageWrapper_C_SetHeaderNavOptions::OptionMap' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_SetHeaderNavOptions, CallFunc_Map_Keys_Keys) == 0x000050, "Member 'W_PageWrapper_C_SetHeaderNavOptions::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_SetHeaderNavOptions, CallFunc_Array_Identical_ReturnValue) == 0x000060, "Member 'W_PageWrapper_C_SetHeaderNavOptions::CallFunc_Array_Identical_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_SetHeaderNavOptions, CallFunc_Not_PreBool_ReturnValue) == 0x000061, "Member 'W_PageWrapper_C_SetHeaderNavOptions::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_SetHeaderNavOptions, CallFunc_Map_Keys_Keys_1) == 0x000068, "Member 'W_PageWrapper_C_SetHeaderNavOptions::CallFunc_Map_Keys_Keys_1' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_SetHeaderNavOptions, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000078, "Member 'W_PageWrapper_C_SetHeaderNavOptions::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.SetHeaderNavSelection
// 0x0008 (0x0008 - 0x0000)
struct W_PageWrapper_C_SetHeaderNavSelection final
{
public:
	class FName                                   OptionNameID;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_SetHeaderNavSelection) == 0x000004, "Wrong alignment on W_PageWrapper_C_SetHeaderNavSelection");
static_assert(sizeof(W_PageWrapper_C_SetHeaderNavSelection) == 0x000008, "Wrong size on W_PageWrapper_C_SetHeaderNavSelection");
static_assert(offsetof(W_PageWrapper_C_SetHeaderNavSelection, OptionNameID) == 0x000000, "Member 'W_PageWrapper_C_SetHeaderNavSelection::OptionNameID' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_PageWrapper_C_SetInputMode final
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_SetInputMode) == 0x000001, "Wrong alignment on W_PageWrapper_C_SetInputMode");
static_assert(sizeof(W_PageWrapper_C_SetInputMode) == 0x000001, "Wrong size on W_PageWrapper_C_SetInputMode");
static_assert(offsetof(W_PageWrapper_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_PageWrapper_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.ShowFooter
// 0x0018 (0x0018 - 0x0000)
struct W_PageWrapper_C_ShowFooter final
{
public:
	bool                                          IsPlaystation;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderOpacity_InOpacity_ImplicitCast;  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_ShowFooter) == 0x000008, "Wrong alignment on W_PageWrapper_C_ShowFooter");
static_assert(sizeof(W_PageWrapper_C_ShowFooter) == 0x000018, "Wrong size on W_PageWrapper_C_ShowFooter");
static_assert(offsetof(W_PageWrapper_C_ShowFooter, IsPlaystation) == 0x000000, "Member 'W_PageWrapper_C_ShowFooter::IsPlaystation' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ShowFooter, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'W_PageWrapper_C_ShowFooter::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ShowFooter, CallFunc_SetRenderOpacity_InOpacity_ImplicitCast) == 0x000010, "Member 'W_PageWrapper_C_ShowFooter::CallFunc_SetRenderOpacity_InOpacity_ImplicitCast' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_PageWrapper_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_Tick) == 0x000004, "Wrong alignment on W_PageWrapper_C_Tick");
static_assert(sizeof(W_PageWrapper_C_Tick) == 0x00003C, "Wrong size on W_PageWrapper_C_Tick");
static_assert(offsetof(W_PageWrapper_C_Tick, MyGeometry) == 0x000000, "Member 'W_PageWrapper_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_Tick, InDeltaTime) == 0x000038, "Member 'W_PageWrapper_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.ToggleNavVisibility
// 0x0009 (0x0009 - 0x0000)
struct W_PageWrapper_C_ToggleNavVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_ToggleNavVisibility) == 0x000001, "Wrong alignment on W_PageWrapper_C_ToggleNavVisibility");
static_assert(sizeof(W_PageWrapper_C_ToggleNavVisibility) == 0x000009, "Wrong size on W_PageWrapper_C_ToggleNavVisibility");
static_assert(offsetof(W_PageWrapper_C_ToggleNavVisibility, Visible) == 0x000000, "Member 'W_PageWrapper_C_ToggleNavVisibility::Visible' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ToggleNavVisibility, Temp_bool_Variable) == 0x000001, "Member 'W_PageWrapper_C_ToggleNavVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ToggleNavVisibility, Temp_byte_Variable) == 0x000002, "Member 'W_PageWrapper_C_ToggleNavVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ToggleNavVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'W_PageWrapper_C_ToggleNavVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ToggleNavVisibility, Temp_bool_Variable_1) == 0x000004, "Member 'W_PageWrapper_C_ToggleNavVisibility::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ToggleNavVisibility, Temp_byte_Variable_2) == 0x000005, "Member 'W_PageWrapper_C_ToggleNavVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ToggleNavVisibility, Temp_byte_Variable_3) == 0x000006, "Member 'W_PageWrapper_C_ToggleNavVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ToggleNavVisibility, K2Node_Select_Default) == 0x000007, "Member 'W_PageWrapper_C_ToggleNavVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_ToggleNavVisibility, K2Node_Select_Default_1) == 0x000008, "Member 'W_PageWrapper_C_ToggleNavVisibility::K2Node_Select_Default_1' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.UnhideFooterEntryByID
// 0x0010 (0x0010 - 0x0000)
struct W_PageWrapper_C_UnhideFooterEntryByID final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_UnhideFooterEntryByID) == 0x000008, "Wrong alignment on W_PageWrapper_C_UnhideFooterEntryByID");
static_assert(sizeof(W_PageWrapper_C_UnhideFooterEntryByID) == 0x000010, "Wrong size on W_PageWrapper_C_UnhideFooterEntryByID");
static_assert(offsetof(W_PageWrapper_C_UnhideFooterEntryByID, ID) == 0x000000, "Member 'W_PageWrapper_C_UnhideFooterEntryByID::ID' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.UnhideFooterEntryByIndex
// 0x0004 (0x0004 - 0x0000)
struct W_PageWrapper_C_UnhideFooterEntryByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_UnhideFooterEntryByIndex) == 0x000004, "Wrong alignment on W_PageWrapper_C_UnhideFooterEntryByIndex");
static_assert(sizeof(W_PageWrapper_C_UnhideFooterEntryByIndex) == 0x000004, "Wrong size on W_PageWrapper_C_UnhideFooterEntryByIndex");
static_assert(offsetof(W_PageWrapper_C_UnhideFooterEntryByIndex, Index_0) == 0x000000, "Member 'W_PageWrapper_C_UnhideFooterEntryByIndex::Index_0' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.UpdateBackgroundBlur
// 0x0004 (0x0004 - 0x0000)
struct W_PageWrapper_C_UpdateBackgroundBlur final
{
public:
	float                                         CallFunc_SetBlurStrength_InStrength_ImplicitCast;  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_UpdateBackgroundBlur) == 0x000004, "Wrong alignment on W_PageWrapper_C_UpdateBackgroundBlur");
static_assert(sizeof(W_PageWrapper_C_UpdateBackgroundBlur) == 0x000004, "Wrong size on W_PageWrapper_C_UpdateBackgroundBlur");
static_assert(offsetof(W_PageWrapper_C_UpdateBackgroundBlur, CallFunc_SetBlurStrength_InStrength_ImplicitCast) == 0x000000, "Member 'W_PageWrapper_C_UpdateBackgroundBlur::CallFunc_SetBlurStrength_InStrength_ImplicitCast' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.UpdateCurrentNavOptions
// 0x0010 (0x0010 - 0x0000)
struct W_PageWrapper_C_UpdateCurrentNavOptions final
{
public:
	TArray<class FName>                           CallFunc_Map_Keys_Keys;                            // 0x0000(0x0010)(ReferenceParm)
};
static_assert(alignof(W_PageWrapper_C_UpdateCurrentNavOptions) == 0x000008, "Wrong alignment on W_PageWrapper_C_UpdateCurrentNavOptions");
static_assert(sizeof(W_PageWrapper_C_UpdateCurrentNavOptions) == 0x000010, "Wrong size on W_PageWrapper_C_UpdateCurrentNavOptions");
static_assert(offsetof(W_PageWrapper_C_UpdateCurrentNavOptions, CallFunc_Map_Keys_Keys) == 0x000000, "Member 'W_PageWrapper_C_UpdateCurrentNavOptions::CallFunc_Map_Keys_Keys' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.UpdateHeader
// 0x0048 (0x0048 - 0x0000)
struct W_PageWrapper_C_UpdateHeader final
{
public:
	class FText                                   NewHeader;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   NewTagline;                                        // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsNotEmpty_NotEmpty;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsNotEmpty_NotEmpty_1;                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_UpdateHeader) == 0x000008, "Wrong alignment on W_PageWrapper_C_UpdateHeader");
static_assert(sizeof(W_PageWrapper_C_UpdateHeader) == 0x000048, "Wrong size on W_PageWrapper_C_UpdateHeader");
static_assert(offsetof(W_PageWrapper_C_UpdateHeader, NewHeader) == 0x000000, "Member 'W_PageWrapper_C_UpdateHeader::NewHeader' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_UpdateHeader, NewTagline) == 0x000018, "Member 'W_PageWrapper_C_UpdateHeader::NewTagline' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_UpdateHeader, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000030, "Member 'W_PageWrapper_C_UpdateHeader::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_UpdateHeader, CallFunc_PlayAnimationForward_ReturnValue) == 0x000038, "Member 'W_PageWrapper_C_UpdateHeader::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_UpdateHeader, CallFunc_TextIsNotEmpty_NotEmpty) == 0x000040, "Member 'W_PageWrapper_C_UpdateHeader::CallFunc_TextIsNotEmpty_NotEmpty' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_UpdateHeader, CallFunc_TextIsNotEmpty_NotEmpty_1) == 0x000041, "Member 'W_PageWrapper_C_UpdateHeader::CallFunc_TextIsNotEmpty_NotEmpty_1' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.UpdateVignette
// 0x000C (0x000C - 0x0000)
struct W_PageWrapper_C_UpdateVignette final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_UpdateVignette) == 0x000004, "Wrong alignment on W_PageWrapper_C_UpdateVignette");
static_assert(sizeof(W_PageWrapper_C_UpdateVignette) == 0x00000C, "Wrong size on W_PageWrapper_C_UpdateVignette");
static_assert(offsetof(W_PageWrapper_C_UpdateVignette, Temp_bool_Variable) == 0x000000, "Member 'W_PageWrapper_C_UpdateVignette::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_UpdateVignette, Temp_byte_Variable) == 0x000001, "Member 'W_PageWrapper_C_UpdateVignette::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_UpdateVignette, Temp_byte_Variable_1) == 0x000002, "Member 'W_PageWrapper_C_UpdateVignette::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_UpdateVignette, CallFunc_IsVisible_ReturnValue) == 0x000003, "Member 'W_PageWrapper_C_UpdateVignette::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_UpdateVignette, K2Node_Select_Default) == 0x000004, "Member 'W_PageWrapper_C_UpdateVignette::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_UpdateVignette, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000008, "Member 'W_PageWrapper_C_UpdateVignette::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function W_PageWrapper.W_PageWrapper_C.GetFocusTarget
// 0x0010 (0x0010 - 0x0000)
struct W_PageWrapper_C_GetFocusTarget final
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PageWrapper_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_PageWrapper_C_GetFocusTarget");
static_assert(sizeof(W_PageWrapper_C_GetFocusTarget) == 0x000010, "Wrong size on W_PageWrapper_C_GetFocusTarget");
static_assert(offsetof(W_PageWrapper_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_PageWrapper_C_GetFocusTarget::Focus' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetFocusTarget, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'W_PageWrapper_C_GetFocusTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PageWrapper_C_GetFocusTarget, CallFunc_IsVisible_ReturnValue) == 0x000009, "Member 'W_PageWrapper_C_GetFocusTarget::CallFunc_IsVisible_ReturnValue' has a wrong offset!");

}

