#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_HotkeyBar_Entry

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "st_HotkeySettings_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CommonInput_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_HotkeyBar_Entry.W_HotkeyBar_Entry_C
// 0x0370 (0x0630 - 0x02C0)
class UW_HotkeyBar_Entry_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       animPressed;                                       // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCommonActionWidget*                    ActionWidget;                                      // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                HotkeyBorder;                                      // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        InputTypeSwitcher;                                 // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Action;                                        // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Key;                                           // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            W_Button;                                          // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0300(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FText                                   ActionText;                                        // 0x0318(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct Fst_HotkeySettings                     Hotkey;                                            // 0x0330(0x0058)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	class FString                                 ID;                                                // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsButton;                                          // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BorderStyleButton;                                 // 0x03A0(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateBrush                            BorderStyleButton_Pressed;                         // 0x0470(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateBrush                            BorderStyle;                                       // 0x0540(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class UW_HotkeyBar_Entry_C* TriggeringHotkeyEntry)> OnHotkeyButtonClicked; // 0x0610(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsPressed;                                         // 0x0620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__W_HotkeyBar_Entry_W_Button_K2Node_ComponentBoundEvent_0_Hovered__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_HotkeyBar_Entry_W_Button_K2Node_ComponentBoundEvent_1_Unhovered__DelegateSignature();
	void BndEvt__W_HotkeyBar_Entry_W_Button_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_HotkeyBar_Entry_W_Button_K2Node_ComponentBoundEvent_3_Pressed__DelegateSignature();
	void BndEvt__W_HotkeyBar_Entry_W_Button_K2Node_ComponentBoundEvent_4_Released__DelegateSignature();
	void Construct();
	void ExecuteUbergraph_W_HotkeyBar_Entry(int32 EntryPoint);
	void OnInputMethodChanged(ECommonInputType bNewInputType);
	void PreConstruct(bool IsDesignTime);
	void SetBinding(const struct Fst_HotkeySettings& Hotkey_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_HotkeyBar_Entry_C">();
	}
	static class UW_HotkeyBar_Entry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_HotkeyBar_Entry_C>();
	}
};
static_assert(alignof(UW_HotkeyBar_Entry_C) == 0x000010, "Wrong alignment on UW_HotkeyBar_Entry_C");
static_assert(sizeof(UW_HotkeyBar_Entry_C) == 0x000630, "Wrong size on UW_HotkeyBar_Entry_C");
static_assert(offsetof(UW_HotkeyBar_Entry_C, UberGraphFrame) == 0x0002C0, "Member 'UW_HotkeyBar_Entry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, animPressed) == 0x0002C8, "Member 'UW_HotkeyBar_Entry_C::animPressed' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, ActionWidget) == 0x0002D0, "Member 'UW_HotkeyBar_Entry_C::ActionWidget' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, HotkeyBorder) == 0x0002D8, "Member 'UW_HotkeyBar_Entry_C::HotkeyBorder' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, InputTypeSwitcher) == 0x0002E0, "Member 'UW_HotkeyBar_Entry_C::InputTypeSwitcher' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, txt_Action) == 0x0002E8, "Member 'UW_HotkeyBar_Entry_C::txt_Action' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, txt_Key) == 0x0002F0, "Member 'UW_HotkeyBar_Entry_C::txt_Key' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, W_Button) == 0x0002F8, "Member 'UW_HotkeyBar_Entry_C::W_Button' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, Key) == 0x000300, "Member 'UW_HotkeyBar_Entry_C::Key' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, ActionText) == 0x000318, "Member 'UW_HotkeyBar_Entry_C::ActionText' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, Hotkey) == 0x000330, "Member 'UW_HotkeyBar_Entry_C::Hotkey' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, ID) == 0x000388, "Member 'UW_HotkeyBar_Entry_C::ID' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, IsButton) == 0x000398, "Member 'UW_HotkeyBar_Entry_C::IsButton' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, BorderStyleButton) == 0x0003A0, "Member 'UW_HotkeyBar_Entry_C::BorderStyleButton' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, BorderStyleButton_Pressed) == 0x000470, "Member 'UW_HotkeyBar_Entry_C::BorderStyleButton_Pressed' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, BorderStyle) == 0x000540, "Member 'UW_HotkeyBar_Entry_C::BorderStyle' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, OnHotkeyButtonClicked) == 0x000610, "Member 'UW_HotkeyBar_Entry_C::OnHotkeyButtonClicked' has a wrong offset!");
static_assert(offsetof(UW_HotkeyBar_Entry_C, IsPressed) == 0x000620, "Member 'UW_HotkeyBar_Entry_C::IsPressed' has a wrong offset!");

}

