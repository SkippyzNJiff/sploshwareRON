#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PoseSearch

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum PoseSearch.EPoseSearchMode
// NumValues: 0x0007
enum class EPoseSearchMode : uint32
{
	BruteForce                               = 0,
	PCAKDTree                                = 1,
	PCAKDTree_Validate                       = 2,
	PCAKDTree_Compare                        = 3,
	Num                                      = 4,
	Invalid                                  = 4,
	EPoseSearchMode_MAX                      = 5,
};

// Enum PoseSearch.EPoseSearchMirrorOption
// NumValues: 0x0006
enum class EPoseSearchMirrorOption : uint32
{
	UnmirroredOnly                           = 0,
	MirroredOnly                             = 1,
	UnmirroredAndMirrored                    = 2,
	Num                                      = 3,
	Invalid                                  = 3,
	EPoseSearchMirrorOption_MAX              = 4,
};

// Enum PoseSearch.EComponentStrippingVector
// NumValues: 0x0004
enum class EComponentStrippingVector : uint8
{
	None                                     = 0,
	StripXY                                  = 1,
	StripZ                                   = 2,
	EComponentStrippingVector_MAX            = 3,
};

// Enum PoseSearch.EInputQueryPose
// NumValues: 0x0004
enum class EInputQueryPose : uint8
{
	UseCharacterPose                         = 0,
	UseContinuingPose                        = 1,
	UseInterpolatedContinuingPose            = 2,
	EInputQueryPose_MAX                      = 3,
};

// Enum PoseSearch.EPermutationTimeType
// NumValues: 0x0004
enum class EPermutationTimeType : uint8
{
	UseSampleTime                            = 0,
	UsePermutationTime                       = 1,
	UseSampleToPermutationTime               = 2,
	EPermutationTimeType_MAX                 = 3,
};

// Enum PoseSearch.EHeadingAxis
// NumValues: 0x0006
enum class EHeadingAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	Num                                      = 3,
	Invalid                                  = 3,
	EHeadingAxis_MAX                         = 4,
};

// Enum PoseSearch.EPoseSearchBoneFlags
// NumValues: 0x0005
enum class EPoseSearchBoneFlags : uint8
{
	Velocity                                 = 1,
	Position                                 = 2,
	Rotation                                 = 4,
	Phase                                    = 8,
	EPoseSearchBoneFlags_MAX                 = 9,
};

// Enum PoseSearch.EPoseSearchTrajectoryFlags
// NumValues: 0x0009
enum class EPoseSearchTrajectoryFlags : uint8
{
	Velocity                                 = 1,
	Position                                 = 2,
	VelocityDirection                        = 4,
	FacingDirection                          = 8,
	VelocityXY                               = 16,
	PositionXY                               = 32,
	VelocityDirectionXY                      = 64,
	FacingDirectionXY                        = 128,
	EPoseSearchTrajectoryFlags_MAX           = 129,
};

// Enum PoseSearch.EPoseSearchDataPreprocessor
// NumValues: 0x0006
enum class EPoseSearchDataPreprocessor : uint32
{
	None                                     = 0,
	Normalize                                = 1,
	NormalizeOnlyByDeviation                 = 2,
	Num                                      = 3,
	Invalid                                  = 3,
	EPoseSearchDataPreprocessor_MAX          = 4,
};

// ScriptStruct PoseSearch.MotionMatchingAnimNodeReference
// 0x0000 (0x0010 - 0x0010)
struct FMotionMatchingAnimNodeReference final : public FAnimNodeReference
{
};
static_assert(alignof(FMotionMatchingAnimNodeReference) == 0x000008, "Wrong alignment on FMotionMatchingAnimNodeReference");
static_assert(sizeof(FMotionMatchingAnimNodeReference) == 0x000010, "Wrong size on FMotionMatchingAnimNodeReference");

// ScriptStruct PoseSearch.PoseSearchCost
// 0x0004 (0x0004 - 0x0000)
struct FPoseSearchCost final
{
public:
	float                                         TotalCost;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPoseSearchCost) == 0x000004, "Wrong alignment on FPoseSearchCost");
static_assert(sizeof(FPoseSearchCost) == 0x000004, "Wrong size on FPoseSearchCost");
static_assert(offsetof(FPoseSearchCost, TotalCost) == 0x000000, "Member 'FPoseSearchCost::TotalCost' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchExcludeFromDatabaseParameters
// 0x0008 (0x0008 - 0x0000)
struct FPoseSearchExcludeFromDatabaseParameters final
{
public:
	float                                         SequenceStartInterval;                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SequenceEndInterval;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchExcludeFromDatabaseParameters) == 0x000004, "Wrong alignment on FPoseSearchExcludeFromDatabaseParameters");
static_assert(sizeof(FPoseSearchExcludeFromDatabaseParameters) == 0x000008, "Wrong size on FPoseSearchExcludeFromDatabaseParameters");
static_assert(offsetof(FPoseSearchExcludeFromDatabaseParameters, SequenceStartInterval) == 0x000000, "Member 'FPoseSearchExcludeFromDatabaseParameters::SequenceStartInterval' has a wrong offset!");
static_assert(offsetof(FPoseSearchExcludeFromDatabaseParameters, SequenceEndInterval) == 0x000004, "Member 'FPoseSearchExcludeFromDatabaseParameters::SequenceEndInterval' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchDatabaseAnimationAssetBase
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPoseSearchDatabaseAnimationAssetBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseSearchDatabaseAnimationAssetBase) == 0x000008, "Wrong alignment on FPoseSearchDatabaseAnimationAssetBase");
static_assert(sizeof(FPoseSearchDatabaseAnimationAssetBase) == 0x000008, "Wrong size on FPoseSearchDatabaseAnimationAssetBase");

// ScriptStruct PoseSearch.PoseSearchDatabaseSequence
// 0x0018 (0x0020 - 0x0008)
struct FPoseSearchDatabaseSequence final : public FPoseSearchDatabaseAnimationAssetBase
{
public:
	class UAnimSequence*                          Sequence;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         SamplingRange;                                     // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPoseSearchMirrorOption                       MirrorOption;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchDatabaseSequence) == 0x000008, "Wrong alignment on FPoseSearchDatabaseSequence");
static_assert(sizeof(FPoseSearchDatabaseSequence) == 0x000020, "Wrong size on FPoseSearchDatabaseSequence");
static_assert(offsetof(FPoseSearchDatabaseSequence, Sequence) == 0x000008, "Member 'FPoseSearchDatabaseSequence::Sequence' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseSequence, bEnabled) == 0x000010, "Member 'FPoseSearchDatabaseSequence::bEnabled' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseSequence, SamplingRange) == 0x000014, "Member 'FPoseSearchDatabaseSequence::SamplingRange' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseSequence, MirrorOption) == 0x00001C, "Member 'FPoseSearchDatabaseSequence::MirrorOption' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchDatabaseBlendSpace
// 0x0028 (0x0030 - 0x0008)
struct FPoseSearchDatabaseBlendSpace final : public FPoseSearchDatabaseAnimationAssetBase
{
public:
	class UBlendSpace*                            BlendSpace;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPoseSearchMirrorOption                       MirrorOption;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSingleSample;                                  // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGridForSampling;                               // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfHorizontalSamples;                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfVerticalSamples;                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendParamX;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendParamY;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseSearchDatabaseBlendSpace) == 0x000008, "Wrong alignment on FPoseSearchDatabaseBlendSpace");
static_assert(sizeof(FPoseSearchDatabaseBlendSpace) == 0x000030, "Wrong size on FPoseSearchDatabaseBlendSpace");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, BlendSpace) == 0x000008, "Member 'FPoseSearchDatabaseBlendSpace::BlendSpace' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, MirrorOption) == 0x000010, "Member 'FPoseSearchDatabaseBlendSpace::MirrorOption' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, bUseSingleSample) == 0x000014, "Member 'FPoseSearchDatabaseBlendSpace::bUseSingleSample' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, bUseGridForSampling) == 0x000015, "Member 'FPoseSearchDatabaseBlendSpace::bUseGridForSampling' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, NumberOfHorizontalSamples) == 0x000018, "Member 'FPoseSearchDatabaseBlendSpace::NumberOfHorizontalSamples' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, NumberOfVerticalSamples) == 0x00001C, "Member 'FPoseSearchDatabaseBlendSpace::NumberOfVerticalSamples' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, BlendParamX) == 0x000020, "Member 'FPoseSearchDatabaseBlendSpace::BlendParamX' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, BlendParamY) == 0x000024, "Member 'FPoseSearchDatabaseBlendSpace::BlendParamY' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, bEnabled) == 0x000028, "Member 'FPoseSearchDatabaseBlendSpace::bEnabled' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchDatabaseAnimComposite
// 0x0018 (0x0020 - 0x0008)
struct FPoseSearchDatabaseAnimComposite final : public FPoseSearchDatabaseAnimationAssetBase
{
public:
	class UAnimComposite*                         AnimComposite;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         SamplingRange;                                     // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPoseSearchMirrorOption                       MirrorOption;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchDatabaseAnimComposite) == 0x000008, "Wrong alignment on FPoseSearchDatabaseAnimComposite");
static_assert(sizeof(FPoseSearchDatabaseAnimComposite) == 0x000020, "Wrong size on FPoseSearchDatabaseAnimComposite");
static_assert(offsetof(FPoseSearchDatabaseAnimComposite, AnimComposite) == 0x000008, "Member 'FPoseSearchDatabaseAnimComposite::AnimComposite' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseAnimComposite, bEnabled) == 0x000010, "Member 'FPoseSearchDatabaseAnimComposite::bEnabled' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseAnimComposite, SamplingRange) == 0x000014, "Member 'FPoseSearchDatabaseAnimComposite::SamplingRange' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseAnimComposite, MirrorOption) == 0x00001C, "Member 'FPoseSearchDatabaseAnimComposite::MirrorOption' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchDatabaseAnimMontage
// 0x0018 (0x0020 - 0x0008)
struct FPoseSearchDatabaseAnimMontage final : public FPoseSearchDatabaseAnimationAssetBase
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         SamplingRange;                                     // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPoseSearchMirrorOption                       MirrorOption;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchDatabaseAnimMontage) == 0x000008, "Wrong alignment on FPoseSearchDatabaseAnimMontage");
static_assert(sizeof(FPoseSearchDatabaseAnimMontage) == 0x000020, "Wrong size on FPoseSearchDatabaseAnimMontage");
static_assert(offsetof(FPoseSearchDatabaseAnimMontage, AnimMontage) == 0x000008, "Member 'FPoseSearchDatabaseAnimMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseAnimMontage, bEnabled) == 0x000010, "Member 'FPoseSearchDatabaseAnimMontage::bEnabled' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseAnimMontage, SamplingRange) == 0x000014, "Member 'FPoseSearchDatabaseAnimMontage::SamplingRange' has a wrong offset!");
static_assert(offsetof(FPoseSearchDatabaseAnimMontage, MirrorOption) == 0x00001C, "Member 'FPoseSearchDatabaseAnimMontage::MirrorOption' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchBone
// 0x0028 (0x0028 - 0x0000)
struct FPoseSearchBone final
{
public:
	struct FBoneReference                         Reference;                                         // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Flags;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugColor;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchBone) == 0x000004, "Wrong alignment on FPoseSearchBone");
static_assert(sizeof(FPoseSearchBone) == 0x000028, "Wrong size on FPoseSearchBone");
static_assert(offsetof(FPoseSearchBone, Reference) == 0x000000, "Member 'FPoseSearchBone::Reference' has a wrong offset!");
static_assert(offsetof(FPoseSearchBone, Flags) == 0x000010, "Member 'FPoseSearchBone::Flags' has a wrong offset!");
static_assert(offsetof(FPoseSearchBone, Weight) == 0x000014, "Member 'FPoseSearchBone::Weight' has a wrong offset!");
static_assert(offsetof(FPoseSearchBone, DebugColor) == 0x000018, "Member 'FPoseSearchBone::DebugColor' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchTrajectorySample
// 0x001C (0x001C - 0x0000)
struct FPoseSearchTrajectorySample final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Flags;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugColor;                                        // 0x000C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchTrajectorySample) == 0x000004, "Wrong alignment on FPoseSearchTrajectorySample");
static_assert(sizeof(FPoseSearchTrajectorySample) == 0x00001C, "Wrong size on FPoseSearchTrajectorySample");
static_assert(offsetof(FPoseSearchTrajectorySample, Offset) == 0x000000, "Member 'FPoseSearchTrajectorySample::Offset' has a wrong offset!");
static_assert(offsetof(FPoseSearchTrajectorySample, Flags) == 0x000004, "Member 'FPoseSearchTrajectorySample::Flags' has a wrong offset!");
static_assert(offsetof(FPoseSearchTrajectorySample, Weight) == 0x000008, "Member 'FPoseSearchTrajectorySample::Weight' has a wrong offset!");
static_assert(offsetof(FPoseSearchTrajectorySample, DebugColor) == 0x00000C, "Member 'FPoseSearchTrajectorySample::DebugColor' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchQueryTrajectorySample
// 0x0040 (0x0040 - 0x0000)
struct FPoseSearchQueryTrajectorySample final
{
public:
	struct FQuat                                  Facing;                                            // 0x0000(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedSeconds;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseSearchQueryTrajectorySample) == 0x000010, "Wrong alignment on FPoseSearchQueryTrajectorySample");
static_assert(sizeof(FPoseSearchQueryTrajectorySample) == 0x000040, "Wrong size on FPoseSearchQueryTrajectorySample");
static_assert(offsetof(FPoseSearchQueryTrajectorySample, Facing) == 0x000000, "Member 'FPoseSearchQueryTrajectorySample::Facing' has a wrong offset!");
static_assert(offsetof(FPoseSearchQueryTrajectorySample, Position) == 0x000020, "Member 'FPoseSearchQueryTrajectorySample::Position' has a wrong offset!");
static_assert(offsetof(FPoseSearchQueryTrajectorySample, AccumulatedSeconds) == 0x000038, "Member 'FPoseSearchQueryTrajectorySample::AccumulatedSeconds' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchQueryTrajectory
// 0x0010 (0x0010 - 0x0000)
struct FPoseSearchQueryTrajectory final
{
public:
	TArray<struct FPoseSearchQueryTrajectorySample> Samples;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchQueryTrajectory) == 0x000008, "Wrong alignment on FPoseSearchQueryTrajectory");
static_assert(sizeof(FPoseSearchQueryTrajectory) == 0x000010, "Wrong size on FPoseSearchQueryTrajectory");
static_assert(offsetof(FPoseSearchQueryTrajectory, Samples) == 0x000000, "Member 'FPoseSearchQueryTrajectory::Samples' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchAnimPlayer
// 0x0220 (0x0220 - 0x0000)
struct alignas(0x08) FPoseSearchAnimPlayer final
{
public:
	uint8                                         Pad_0[0x220];                                      // 0x0000(0x0220)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseSearchAnimPlayer) == 0x000008, "Wrong alignment on FPoseSearchAnimPlayer");
static_assert(sizeof(FPoseSearchAnimPlayer) == 0x000220, "Wrong size on FPoseSearchAnimPlayer");

// ScriptStruct PoseSearch.AnimNode_BlendStack_Standalone
// 0x0020 (0x0058 - 0x0038)
struct FAnimNode_BlendStack_Standalone : public FAnimNode_AssetPlayerBase
{
public:
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendStack_Standalone) == 0x000008, "Wrong alignment on FAnimNode_BlendStack_Standalone");
static_assert(sizeof(FAnimNode_BlendStack_Standalone) == 0x000058, "Wrong size on FAnimNode_BlendStack_Standalone");

// ScriptStruct PoseSearch.AnimNode_BlendStack
// 0x0058 (0x00B0 - 0x0058)
struct FAnimNode_BlendStack final : public FAnimNode_BlendStack_Standalone
{
public:
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationTime;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WantedPlayRate;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootBoneBlendTime;                                 // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAnimationDeltaTime;                             // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxActiveBlends;                                   // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendProfile*                          BlendProfile;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOption;                                       // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BlendParameters;                                   // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMirrorDataTable*                       MirrorDataTable;                                   // 0x00A8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_BlendStack) == 0x000008, "Wrong alignment on FAnimNode_BlendStack");
static_assert(sizeof(FAnimNode_BlendStack) == 0x0000B0, "Wrong size on FAnimNode_BlendStack");
static_assert(offsetof(FAnimNode_BlendStack, AnimationAsset) == 0x000058, "Member 'FAnimNode_BlendStack::AnimationAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, AnimationTime) == 0x000060, "Member 'FAnimNode_BlendStack::AnimationTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, bLoop) == 0x000064, "Member 'FAnimNode_BlendStack::bLoop' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, bMirrored) == 0x000065, "Member 'FAnimNode_BlendStack::bMirrored' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, WantedPlayRate) == 0x000068, "Member 'FAnimNode_BlendStack::WantedPlayRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, BlendTime) == 0x00006C, "Member 'FAnimNode_BlendStack::BlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, RootBoneBlendTime) == 0x000070, "Member 'FAnimNode_BlendStack::RootBoneBlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, MaxAnimationDeltaTime) == 0x000074, "Member 'FAnimNode_BlendStack::MaxAnimationDeltaTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, MaxActiveBlends) == 0x000078, "Member 'FAnimNode_BlendStack::MaxActiveBlends' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, BlendProfile) == 0x000080, "Member 'FAnimNode_BlendStack::BlendProfile' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, BlendOption) == 0x000088, "Member 'FAnimNode_BlendStack::BlendOption' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, BlendParameters) == 0x000090, "Member 'FAnimNode_BlendStack::BlendParameters' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, MirrorDataTable) == 0x0000A8, "Member 'FAnimNode_BlendStack::MirrorDataTable' has a wrong offset!");

// ScriptStruct PoseSearch.AnimNode_MotionMatching
// 0x0170 (0x01A8 - 0x0038)
struct FAnimNode_MotionMatching final : public FAnimNode_AssetPlayerBase
{
public:
	struct FPoseLink                              Source;                                            // 0x0038(0x0010)(NoDestructor, NativeAccessSpecifierPrivate)
	class UPoseSearchDatabase*                    Database;                                          // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPoseSearchQueryTrajectory             Trajectory;                                        // 0x0050(0x0010)(Edit, NativeAccessSpecifierPrivate)
	float                                         TrajectorySpeedMultiplier;                         // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlendTime;                                         // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxActiveBlends;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendProfile*                          BlendProfile;                                      // 0x0070(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EAlphaBlendOption                             BlendOption;                                       // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PoseJumpThresholdTime;                             // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PoseReselectHistory;                               // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SearchThrottleTime;                                // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFloatInterval                         PlayRate;                                          // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bResetOnBecomingRelevant;                          // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShouldSearch;                                     // 0x0091(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         YawFromAnimationTrajectoryBlendTime;               // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         YawFromAnimationBlendRate;                         // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9C[0xF4];                                      // 0x009C(0x00F4)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPoseSearchDatabase*>            DatabasesToSearch;                                 // 0x0190(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A0[0x8];                                      // 0x01A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_MotionMatching) == 0x000008, "Wrong alignment on FAnimNode_MotionMatching");
static_assert(sizeof(FAnimNode_MotionMatching) == 0x0001A8, "Wrong size on FAnimNode_MotionMatching");
static_assert(offsetof(FAnimNode_MotionMatching, Source) == 0x000038, "Member 'FAnimNode_MotionMatching::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, Database) == 0x000048, "Member 'FAnimNode_MotionMatching::Database' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, Trajectory) == 0x000050, "Member 'FAnimNode_MotionMatching::Trajectory' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, TrajectorySpeedMultiplier) == 0x000060, "Member 'FAnimNode_MotionMatching::TrajectorySpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, BlendTime) == 0x000064, "Member 'FAnimNode_MotionMatching::BlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, MaxActiveBlends) == 0x000068, "Member 'FAnimNode_MotionMatching::MaxActiveBlends' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, BlendProfile) == 0x000070, "Member 'FAnimNode_MotionMatching::BlendProfile' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, BlendOption) == 0x000078, "Member 'FAnimNode_MotionMatching::BlendOption' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, PoseJumpThresholdTime) == 0x00007C, "Member 'FAnimNode_MotionMatching::PoseJumpThresholdTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, PoseReselectHistory) == 0x000080, "Member 'FAnimNode_MotionMatching::PoseReselectHistory' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, SearchThrottleTime) == 0x000084, "Member 'FAnimNode_MotionMatching::SearchThrottleTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, PlayRate) == 0x000088, "Member 'FAnimNode_MotionMatching::PlayRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, bResetOnBecomingRelevant) == 0x000090, "Member 'FAnimNode_MotionMatching::bResetOnBecomingRelevant' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, bShouldSearch) == 0x000091, "Member 'FAnimNode_MotionMatching::bShouldSearch' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, YawFromAnimationTrajectoryBlendTime) == 0x000094, "Member 'FAnimNode_MotionMatching::YawFromAnimationTrajectoryBlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, YawFromAnimationBlendRate) == 0x000098, "Member 'FAnimNode_MotionMatching::YawFromAnimationBlendRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, DatabasesToSearch) == 0x000190, "Member 'FAnimNode_MotionMatching::DatabasesToSearch' has a wrong offset!");

// ScriptStruct PoseSearch.AnimNode_PoseSearchHistoryCollector_Base
// 0x0098 (0x00A8 - 0x0010)
struct FAnimNode_PoseSearchHistoryCollector_Base : public FAnimNode_Base
{
public:
	int32                                         PoseCount;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoseDuration;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 CollectedBones;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x80];                                      // 0x0028(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PoseSearchHistoryCollector_Base) == 0x000008, "Wrong alignment on FAnimNode_PoseSearchHistoryCollector_Base");
static_assert(sizeof(FAnimNode_PoseSearchHistoryCollector_Base) == 0x0000A8, "Wrong size on FAnimNode_PoseSearchHistoryCollector_Base");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, PoseCount) == 0x000010, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::PoseCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, PoseDuration) == 0x000014, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::PoseDuration' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, CollectedBones) == 0x000018, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::CollectedBones' has a wrong offset!");

// ScriptStruct PoseSearch.AnimNode_PoseSearchHistoryCollector
// 0x0010 (0x00B8 - 0x00A8)
struct FAnimNode_PoseSearchHistoryCollector final : public FAnimNode_PoseSearchHistoryCollector_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x00A8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_PoseSearchHistoryCollector) == 0x000008, "Wrong alignment on FAnimNode_PoseSearchHistoryCollector");
static_assert(sizeof(FAnimNode_PoseSearchHistoryCollector) == 0x0000B8, "Wrong size on FAnimNode_PoseSearchHistoryCollector");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector, Source) == 0x0000A8, "Member 'FAnimNode_PoseSearchHistoryCollector::Source' has a wrong offset!");

// ScriptStruct PoseSearch.AnimNode_PoseSearchComponentSpaceHistoryCollector
// 0x0010 (0x00B8 - 0x00A8)
struct FAnimNode_PoseSearchComponentSpaceHistoryCollector final : public FAnimNode_PoseSearchHistoryCollector_Base
{
public:
	struct FComponentSpacePoseLink                Source;                                            // 0x00A8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_PoseSearchComponentSpaceHistoryCollector) == 0x000008, "Wrong alignment on FAnimNode_PoseSearchComponentSpaceHistoryCollector");
static_assert(sizeof(FAnimNode_PoseSearchComponentSpaceHistoryCollector) == 0x0000B8, "Wrong size on FAnimNode_PoseSearchComponentSpaceHistoryCollector");
static_assert(offsetof(FAnimNode_PoseSearchComponentSpaceHistoryCollector, Source) == 0x0000A8, "Member 'FAnimNode_PoseSearchComponentSpaceHistoryCollector::Source' has a wrong offset!");

// ScriptStruct PoseSearch.MotionMatchingState
// 0x0088 (0x0088 - 0x0000)
struct alignas(0x08) FMotionMatchingState final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedPoseSearchTime;                             // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WantedPlayRate;                                    // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumpedToPose;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x67];                                      // 0x0021(0x0067)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMotionMatchingState) == 0x000008, "Wrong alignment on FMotionMatchingState");
static_assert(sizeof(FMotionMatchingState) == 0x000088, "Wrong size on FMotionMatchingState");
static_assert(offsetof(FMotionMatchingState, ElapsedPoseSearchTime) == 0x000018, "Member 'FMotionMatchingState::ElapsedPoseSearchTime' has a wrong offset!");
static_assert(offsetof(FMotionMatchingState, WantedPlayRate) == 0x00001C, "Member 'FMotionMatchingState::WantedPlayRate' has a wrong offset!");
static_assert(offsetof(FMotionMatchingState, bJumpedToPose) == 0x000020, "Member 'FMotionMatchingState::bJumpedToPose' has a wrong offset!");

}

