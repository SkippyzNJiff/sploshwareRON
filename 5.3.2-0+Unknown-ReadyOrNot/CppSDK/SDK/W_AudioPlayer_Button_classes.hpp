#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_AudioPlayer_Button

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "E_Briefing_Audio_PlayStates_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_AudioPlayer_Button.W_AudioPlayer_Button_C
// 0x0100 (0x16E0 - 0x15E0)
class UW_AudioPlayer_Button_C final : public UCommonButtonImplementation
{
public:
	uint8                                         Pad_15D8[0x8];                                     // 0x15D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x15E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Hover;                                             // 0x15E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 img_icon;                                          // 0x15F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bActive;                                           // 0x15F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHovered;                                          // 0x15F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPressed;                                          // 0x15FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSelected;                                         // 0x15FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseDarkTheme;                                     // 0x15FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15FD[0x3];                                     // 0x15FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LabelText;                                         // 0x1600(0x0018)(Edit, BlueprintVisible)
	class FText                                   ActiveLabelText;                                   // 0x1618(0x0018)(Edit, BlueprintVisible)
	E_Briefing_Audio_PlayStates                   Control;                                           // 0x1630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlipIcon_Horiz_;                                  // 0x1631(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1632[0x6];                                     // 0x1632(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TextSize;                                          // 0x1638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimCurrentTime;                                   // 0x1640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimDuration;                                      // 0x1648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentTextSize;                                   // 0x1650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReverseHoverAnim;                                  // 0x1658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1659[0x7];                                     // 0x1659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           AnimationTimer;                                    // 0x1660(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AnimFPS;                                           // 0x1668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimStartSize;                                     // 0x1670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Briefing_Audio_PlayStates                   CurrentControl;                                    // 0x1678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1679[0x7];                                     // 0x1679(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_Briefing_Audio_PlayStates, struct FSlateBrush> ControlIcons;                              // 0x1680(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSubclassOf<class UCommonButtonStyle>         DarkThemeStyle;                                    // 0x16D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void AnimateHover();
	void BP_OnDeselected();
	void BP_OnHovered();
	void BP_OnPressed();
	void BP_OnReleased();
	void BP_OnSelected();
	void BP_OnUnhovered();
	void ExecuteUbergraph_W_AudioPlayer_Button(int32 EntryPoint);
	struct FLinearColor GetIconColor();
	void HoverAnim(double Duration, bool Reverse, double FPS);
	void PreConstruct(bool IsDesignTime);
	void SetHoveredState(bool IsHovered_0);
	void SetPressedState();
	void SetTheme(bool UseDarkTheme);
	void UpdateControlSetting(E_Briefing_Audio_PlayStates Control_0);
	void UpdateIcon();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_AudioPlayer_Button_C">();
	}
	static class UW_AudioPlayer_Button_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_AudioPlayer_Button_C>();
	}
};
static_assert(alignof(UW_AudioPlayer_Button_C) == 0x000010, "Wrong alignment on UW_AudioPlayer_Button_C");
static_assert(sizeof(UW_AudioPlayer_Button_C) == 0x0016E0, "Wrong size on UW_AudioPlayer_Button_C");
static_assert(offsetof(UW_AudioPlayer_Button_C, UberGraphFrame) == 0x0015E0, "Member 'UW_AudioPlayer_Button_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, Hover) == 0x0015E8, "Member 'UW_AudioPlayer_Button_C::Hover' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, img_icon) == 0x0015F0, "Member 'UW_AudioPlayer_Button_C::img_icon' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, bActive) == 0x0015F8, "Member 'UW_AudioPlayer_Button_C::bActive' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, bHovered) == 0x0015F9, "Member 'UW_AudioPlayer_Button_C::bHovered' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, bPressed) == 0x0015FA, "Member 'UW_AudioPlayer_Button_C::bPressed' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, bSelected) == 0x0015FB, "Member 'UW_AudioPlayer_Button_C::bSelected' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, bUseDarkTheme) == 0x0015FC, "Member 'UW_AudioPlayer_Button_C::bUseDarkTheme' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, LabelText) == 0x001600, "Member 'UW_AudioPlayer_Button_C::LabelText' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, ActiveLabelText) == 0x001618, "Member 'UW_AudioPlayer_Button_C::ActiveLabelText' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, Control) == 0x001630, "Member 'UW_AudioPlayer_Button_C::Control' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, bFlipIcon_Horiz_) == 0x001631, "Member 'UW_AudioPlayer_Button_C::bFlipIcon_Horiz_' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, TextSize) == 0x001638, "Member 'UW_AudioPlayer_Button_C::TextSize' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, AnimCurrentTime) == 0x001640, "Member 'UW_AudioPlayer_Button_C::AnimCurrentTime' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, AnimDuration) == 0x001648, "Member 'UW_AudioPlayer_Button_C::AnimDuration' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, CurrentTextSize) == 0x001650, "Member 'UW_AudioPlayer_Button_C::CurrentTextSize' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, ReverseHoverAnim) == 0x001658, "Member 'UW_AudioPlayer_Button_C::ReverseHoverAnim' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, AnimationTimer) == 0x001660, "Member 'UW_AudioPlayer_Button_C::AnimationTimer' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, AnimFPS) == 0x001668, "Member 'UW_AudioPlayer_Button_C::AnimFPS' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, AnimStartSize) == 0x001670, "Member 'UW_AudioPlayer_Button_C::AnimStartSize' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, CurrentControl) == 0x001678, "Member 'UW_AudioPlayer_Button_C::CurrentControl' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, ControlIcons) == 0x001680, "Member 'UW_AudioPlayer_Button_C::ControlIcons' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, DarkThemeStyle) == 0x0016D0, "Member 'UW_AudioPlayer_Button_C::DarkThemeStyle' has a wrong offset!");

}

