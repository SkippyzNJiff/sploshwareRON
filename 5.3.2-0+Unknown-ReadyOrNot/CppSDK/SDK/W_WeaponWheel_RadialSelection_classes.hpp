#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_WeaponWheel_RadialSelection

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "W_RadialSelectionBase_classes.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C
// 0x00D0 (0x03A8 - 0x02D8)
class UW_WeaponWheel_RadialSelection_C final : public UW_RadialSelectionBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_W_WeaponWheel_RadialSelection_C;    // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_Expand;                                       // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Item_Icon;                                         // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           MainArea;                                          // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               MainArea_Overlay;                                  // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         RootWidget;                                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                Spacer_420;                                        // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_WeaponWheel_MagazineDisplay_C*       WeaponWheel_MagazineDisplay;                       // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ABaseItem*                              Item;                                              // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        ItemIconSize;                                      // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         CategoryIndex;                                     // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ItemCategory;                                      // 0x0330(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<class ABaseItem*>                      Items;                                             // 0x0348(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class UWeaponWheelScript*>             ExecutableItems;                                   // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UObject*>                        AllItems;                                          // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        WheelSize;                                         // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        MaxWheelSize;                                      // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UImage*>                         Icons;                                             // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UImage*>                         StackedItems;                                      // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void AddExecutableItemToCategory(class UWeaponWheelScript* WeaponWheelScript, int32 AtIndex);
	void AddItemToCategory(const class ABaseItem*& NewItem, int32 AtIndex);
	class UImage* CreateIcon(const struct FSlateBrush& InBrush);
	void ExecuteRadial();
	void ExecuteUbergraph_W_WeaponWheel_RadialSelection(int32 EntryPoint);
	void MoveToBack(class ABaseItem* Item_0);
	void MoveToFront(class ABaseItem* Item_0);
	void Next(bool* bSuccess);
	void On_Wheel_Created();
	void OnDeselected(bool Play_Animation);
	void OnSelected(bool Play_Animation);
	void PreConstruct(bool IsDesignTime);
	void Previous(bool* bSuccess);
	void RemoveExecutableItemFromCategory(class UWeaponWheelScript* WeaponWheelScript);
	void RemoveItemFromCategory(const class ABaseItem*& Item_0);
	void RemoveNullItems();
	void RemoveNullItems__Internal_(TArray<class UObject*>& ItemArray);
	void Select(int32 Index_0);
	void ShiftItemToNewSpot(class ABaseItem* Item_0, int32 NewIndex);
	void ShuffleItems();
	void UpdateIcon(int32 SelectionIndex, const struct FSlateBrush& InBrush);

	void GetCategory(class FText* Category) const;
	void GetItemName(class FName* Item_Name) const;
	void IsEquipping(bool* IsEquipping_0) const;
	void IsInExecutablesArray(bool* Return_Value) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_WeaponWheel_RadialSelection_C">();
	}
	static class UW_WeaponWheel_RadialSelection_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_WeaponWheel_RadialSelection_C>();
	}
};
static_assert(alignof(UW_WeaponWheel_RadialSelection_C) == 0x000008, "Wrong alignment on UW_WeaponWheel_RadialSelection_C");
static_assert(sizeof(UW_WeaponWheel_RadialSelection_C) == 0x0003A8, "Wrong size on UW_WeaponWheel_RadialSelection_C");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, UberGraphFrame_W_WeaponWheel_RadialSelection_C) == 0x0002D8, "Member 'UW_WeaponWheel_RadialSelection_C::UberGraphFrame_W_WeaponWheel_RadialSelection_C' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, Anim_Expand) == 0x0002E0, "Member 'UW_WeaponWheel_RadialSelection_C::Anim_Expand' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, Item_Icon) == 0x0002E8, "Member 'UW_WeaponWheel_RadialSelection_C::Item_Icon' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, MainArea) == 0x0002F0, "Member 'UW_WeaponWheel_RadialSelection_C::MainArea' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, MainArea_Overlay) == 0x0002F8, "Member 'UW_WeaponWheel_RadialSelection_C::MainArea_Overlay' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, RootWidget) == 0x000300, "Member 'UW_WeaponWheel_RadialSelection_C::RootWidget' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, Spacer_420) == 0x000308, "Member 'UW_WeaponWheel_RadialSelection_C::Spacer_420' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, WeaponWheel_MagazineDisplay) == 0x000310, "Member 'UW_WeaponWheel_RadialSelection_C::WeaponWheel_MagazineDisplay' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, Item) == 0x000318, "Member 'UW_WeaponWheel_RadialSelection_C::Item' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, ItemIconSize) == 0x000320, "Member 'UW_WeaponWheel_RadialSelection_C::ItemIconSize' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, CategoryIndex) == 0x000328, "Member 'UW_WeaponWheel_RadialSelection_C::CategoryIndex' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, ItemCategory) == 0x000330, "Member 'UW_WeaponWheel_RadialSelection_C::ItemCategory' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, Items) == 0x000348, "Member 'UW_WeaponWheel_RadialSelection_C::Items' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, ExecutableItems) == 0x000358, "Member 'UW_WeaponWheel_RadialSelection_C::ExecutableItems' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, AllItems) == 0x000368, "Member 'UW_WeaponWheel_RadialSelection_C::AllItems' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, WheelSize) == 0x000378, "Member 'UW_WeaponWheel_RadialSelection_C::WheelSize' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, MaxWheelSize) == 0x000380, "Member 'UW_WeaponWheel_RadialSelection_C::MaxWheelSize' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, Icons) == 0x000388, "Member 'UW_WeaponWheel_RadialSelection_C::Icons' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, StackedItems) == 0x000398, "Member 'UW_WeaponWheel_RadialSelection_C::StackedItems' has a wrong offset!");

}

