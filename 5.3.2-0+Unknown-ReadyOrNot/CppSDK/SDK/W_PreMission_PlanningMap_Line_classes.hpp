#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_PlanningMap_Line

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_PreMission_PlanningMap_Line.W_PreMission_PlanningMap_Line_C
// 0x0068 (0x0328 - 0x02C0)
class UW_PreMission_PlanningMap_Line_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_35;                                          // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Size;                                              // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsDashed;                                          // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              LineMaterial;                                      // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Length;                                            // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Thickness;                                         // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        StartOffset;                                       // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        EndOffset;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class AReadyOrNotPlayerState*                 Player_State;                                      // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_W_PreMission_PlanningMap_Line(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void ScaleLineWeightByZoom(double CurrentZoom);
	void ScaleThickness(double Multiplier);
	void SetAngle(double Angle_0);
	void SetColor(const struct FLinearColor& Color_0);
	void SetColorByPlayerState(class AReadyOrNotPlayerState* PlayerState);
	void SetLength(double Length_0);
	void SetOffset(double StartOffset_0, double EndOffset_0);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdatePlanningTeam(EPlanningLineTeam Team);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_PreMission_PlanningMap_Line_C">();
	}
	static class UW_PreMission_PlanningMap_Line_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_PreMission_PlanningMap_Line_C>();
	}
};
static_assert(alignof(UW_PreMission_PlanningMap_Line_C) == 0x000008, "Wrong alignment on UW_PreMission_PlanningMap_Line_C");
static_assert(sizeof(UW_PreMission_PlanningMap_Line_C) == 0x000328, "Wrong size on UW_PreMission_PlanningMap_Line_C");
static_assert(offsetof(UW_PreMission_PlanningMap_Line_C, UberGraphFrame) == 0x0002C0, "Member 'UW_PreMission_PlanningMap_Line_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Line_C, Image_35) == 0x0002C8, "Member 'UW_PreMission_PlanningMap_Line_C::Image_35' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Line_C, Size) == 0x0002D0, "Member 'UW_PreMission_PlanningMap_Line_C::Size' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Line_C, Color) == 0x0002D8, "Member 'UW_PreMission_PlanningMap_Line_C::Color' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Line_C, IsDashed) == 0x0002E8, "Member 'UW_PreMission_PlanningMap_Line_C::IsDashed' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Line_C, LineMaterial) == 0x0002F0, "Member 'UW_PreMission_PlanningMap_Line_C::LineMaterial' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Line_C, Length) == 0x0002F8, "Member 'UW_PreMission_PlanningMap_Line_C::Length' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Line_C, Angle) == 0x000300, "Member 'UW_PreMission_PlanningMap_Line_C::Angle' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Line_C, Thickness) == 0x000308, "Member 'UW_PreMission_PlanningMap_Line_C::Thickness' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Line_C, StartOffset) == 0x000310, "Member 'UW_PreMission_PlanningMap_Line_C::StartOffset' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Line_C, EndOffset) == 0x000318, "Member 'UW_PreMission_PlanningMap_Line_C::EndOffset' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Line_C, Player_State) == 0x000320, "Member 'UW_PreMission_PlanningMap_Line_C::Player_State' has a wrong offset!");

}

