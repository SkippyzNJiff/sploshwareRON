#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RichChatBox

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_RichChatBox.W_RichChatBox_C
// 0x1DC0 (0x2080 - 0x02C0)
class UW_RichChatBox_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       FadeOut;                                           // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UVerticalBox*                           Box;                                               // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URichTextBlock*                         ChatArea;                                          // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEditableTextBox*                       ChatEntry;                                         // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             ScrollArea;                                        // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_ChatChannel;                                   // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FString                                 ChatAreaText;                                      // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bPreplanning;                                      // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ShowTimeLeft;                                      // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShowTimeMax;                                       // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTextFocused;                                      // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFadingOut;                                        // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTeamChat;                                         // 0x0322(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_323[0x5];                                      // 0x0323(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RedTeamLabel;                                      // 0x0328(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   BlueTeamLabel;                                     // 0x0340(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   GoldTeamLabel;                                     // 0x0358(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bAlwaysShowTextEntry;                              // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_371[0xF];                                      // 0x0371(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEditableTextBoxStyle                  ChatboxEntryStyleAlwaysShown;                      // 0x0380(0x0E80)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FEditableTextBoxStyle                  ChatboxEntryStyleNotAlwaysShown;                   // 0x1200(0x0E80)(Edit, BlueprintVisible, ExposeOnSpawn)

public:
	void AddChatMessage(const class FString& Message);
	void BndEvt__ChatEntry_K2Node_ComponentBoundEvent_1_OnEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod);
	void Construct();
	void ExecuteUbergraph_W_RichChatBox(int32 EntryPoint);
	ESlateVisibility GetTeamChatIndicatorVisibility();
	void On_Chat_Message_Received(const struct FRChatMessage& Message);
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void PreConstruct(bool IsDesignTime);
	void RetryBindChat();
	void SetChatFocus(bool NewFocus, bool NewTeamChat);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_RichChatBox_C">();
	}
	static class UW_RichChatBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_RichChatBox_C>();
	}
};
static_assert(alignof(UW_RichChatBox_C) == 0x000010, "Wrong alignment on UW_RichChatBox_C");
static_assert(sizeof(UW_RichChatBox_C) == 0x002080, "Wrong size on UW_RichChatBox_C");
static_assert(offsetof(UW_RichChatBox_C, UberGraphFrame) == 0x0002C0, "Member 'UW_RichChatBox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, FadeOut) == 0x0002C8, "Member 'UW_RichChatBox_C::FadeOut' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, Box) == 0x0002D0, "Member 'UW_RichChatBox_C::Box' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, ChatArea) == 0x0002D8, "Member 'UW_RichChatBox_C::ChatArea' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, ChatEntry) == 0x0002E0, "Member 'UW_RichChatBox_C::ChatEntry' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, ScrollArea) == 0x0002E8, "Member 'UW_RichChatBox_C::ScrollArea' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, txt_ChatChannel) == 0x0002F0, "Member 'UW_RichChatBox_C::txt_ChatChannel' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, ChatAreaText) == 0x0002F8, "Member 'UW_RichChatBox_C::ChatAreaText' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, bPreplanning) == 0x000308, "Member 'UW_RichChatBox_C::bPreplanning' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, ShowTimeLeft) == 0x000310, "Member 'UW_RichChatBox_C::ShowTimeLeft' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, ShowTimeMax) == 0x000318, "Member 'UW_RichChatBox_C::ShowTimeMax' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, bTextFocused) == 0x000320, "Member 'UW_RichChatBox_C::bTextFocused' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, bFadingOut) == 0x000321, "Member 'UW_RichChatBox_C::bFadingOut' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, bTeamChat) == 0x000322, "Member 'UW_RichChatBox_C::bTeamChat' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, RedTeamLabel) == 0x000328, "Member 'UW_RichChatBox_C::RedTeamLabel' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, BlueTeamLabel) == 0x000340, "Member 'UW_RichChatBox_C::BlueTeamLabel' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, GoldTeamLabel) == 0x000358, "Member 'UW_RichChatBox_C::GoldTeamLabel' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, bAlwaysShowTextEntry) == 0x000370, "Member 'UW_RichChatBox_C::bAlwaysShowTextEntry' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, ChatboxEntryStyleAlwaysShown) == 0x000380, "Member 'UW_RichChatBox_C::ChatboxEntryStyleAlwaysShown' has a wrong offset!");
static_assert(offsetof(UW_RichChatBox_C, ChatboxEntryStyleNotAlwaysShown) == 0x001200, "Member 'UW_RichChatBox_C::ChatboxEntryStyleNotAlwaysShown' has a wrong offset!");

}

