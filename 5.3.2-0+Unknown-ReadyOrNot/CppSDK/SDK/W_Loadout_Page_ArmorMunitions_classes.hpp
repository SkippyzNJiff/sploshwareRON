#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Loadout_Page_ArmorMunitions

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CommonUI_classes.hpp"
#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Loadout_Page_ArmorMunitions.W_Loadout_Page_ArmorMunitions_C
// 0x01B0 (0x05C0 - 0x0410)
class UW_Loadout_Page_ArmorMunitions_C final : public UCommonActivatableWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0410(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UW_Loadout_Munitions_C*                 Ammo;                                              // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_TabCarousel_C*                       Carousel;                                          // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_ButtonBar_C*                         Coverage;                                          // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Loadout_Munitions_C*                 Deployables;                                       // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_VestHighlight;                                 // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_ButtonBar_C*                         Material;                                          // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActivatableWidgetSwitcher*       MunitionsSwitcher;                                 // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_Vest;                                           // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBackgroundBlur*                        VestOptions;                                       // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_LoadoutSlot_v2_C*                    W_LoadoutSlot_Vest;                                // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActivatableWidgetSwitcher*       WidgetSwitcher;                                    // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_LoadoutSlot_v2_C*                    EquippedVestSlot;                                  // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, EArmourCoverage>          CoverageMap;                                       // 0x0478(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, class UArmourMaterial*>   MaterialMap;                                       // 0x04C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWidget*                                LastHovered;                                       // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_Loadout_Munitions_C*                 LastActiveMunitionList;                            // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_LoadoutSlot_v2_C*                    LastAmmoHover;                                     // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_LoadoutSlot_v2_C*                    LastDeployableHover;                               // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_Loadout_Munitions_C*                 CurrentActiveMunitionList;                         // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_LoadoutSlot_v2_C*                    SlotFocus;                                         // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             CoverageSelectedEvent;                             // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             MaterialSelectedEvent;                             // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UFMODEvent*>          ArmorSelectedEventMap;                             // 0x0558(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bVestOptionsOpen;                                  // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A9[0x3];                                      // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EscapeAttempts;                                    // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInitialized;                                      // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B1[0x7];                                      // 0x05B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             CategoryClickedEvent;                              // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BackPage(bool* Handled);
	void BndEvt__W_Loadout_Page_ArmorMunitions_Ammo_K2Node_ComponentBoundEvent_1_OnMunitionHovered__DelegateSignature(class UW_Loadout_Munitions_C* TriggeringList, class UW_LoadoutSlot_v2_C* TriggeringSlot);
	void BndEvt__W_Loadout_Page_ArmorMunitions_Carousel_K2Node_ComponentBoundEvent_0_OnTabSelected__DelegateSignature(class FName TabId);
	void BndEvt__W_Loadout_Page_ArmorMunitions_Deployables_K2Node_ComponentBoundEvent_2_OnMunitionHovered__DelegateSignature(class UW_Loadout_Munitions_C* TriggeringList, class UW_LoadoutSlot_v2_C* TriggeringSlot);
	void BndEvt__W_Loadout_Page_ArmorMunitions_W_LoadoutSlot_Vest_K2Node_ComponentBoundEvent_3_OnClick__DelegateSignature(class UW_LoadoutSlot_v2_C* TriggeringSlot);
	void BP_OnActivated();
	void BP_OnDeactivated();
	void ChangePage(class FName PageName);
	void CloseVestOptions(bool ReturnToSlot);
	void Construct();
	void CoverageOptionClicked(const class FString& ButtonId, class UW_Button_C* TriggeringButton);
	void CoverageOptionHovered(const class FString& ButtonId, class UW_Button_C* TriggeringButton);
	void ExecuteUbergraph_W_Loadout_Page_ArmorMunitions(int32 EntryPoint);
	void HeaderSubpageNavigation(class FName OptionNameID);
	void Hide(double Delay, bool Collapse);
	void ItemUnhovered();
	void MaterialClicked(const class FString& ButtonId, class UW_Button_C* TriggeringButton);
	void MaterialHovered(const class FString& ButtonId, class UW_Button_C* TriggeringButton);
	class UWidget* NavigateVestOptions_First(EUINavigation Navigation_0);
	class UWidget* NavigateVestOptions_Last(EUINavigation Navigation_0);
	void OnArmorClicked(class UW_LoadoutSlot_v2_C* TriggeringSlot);
	void OnArmorHovered(class UW_LoadoutSlot_v2_C* TriggeringSlot);
	void OnInitialized();
	void OpenVestOptions();
	void PopulateArmor();
	void PopulateCoverage();
	void PopulateMaterials();
	void Reveal(double Delay);
	void SetInputMode(bool IsGamepad);
	void UpdateActiveCoverage();
	void UpdateActiveLoadout(const struct FSavedLoadout& ActiveLoadout);
	void UpdateActiveMaterial();
	void UpdateCurrentItemMap(const TMap<EItemCategory, class UClass*>& ItemCategory);
	void UpdateCurrentVest();

	class UWidget* BP_GetDesiredFocusTarget() const;
	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Loadout_Page_ArmorMunitions_C">();
	}
	static class UW_Loadout_Page_ArmorMunitions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Loadout_Page_ArmorMunitions_C>();
	}
};
static_assert(alignof(UW_Loadout_Page_ArmorMunitions_C) == 0x000008, "Wrong alignment on UW_Loadout_Page_ArmorMunitions_C");
static_assert(sizeof(UW_Loadout_Page_ArmorMunitions_C) == 0x0005C0, "Wrong size on UW_Loadout_Page_ArmorMunitions_C");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, UberGraphFrame) == 0x000410, "Member 'UW_Loadout_Page_ArmorMunitions_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, Ammo) == 0x000418, "Member 'UW_Loadout_Page_ArmorMunitions_C::Ammo' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, Carousel) == 0x000420, "Member 'UW_Loadout_Page_ArmorMunitions_C::Carousel' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, Coverage) == 0x000428, "Member 'UW_Loadout_Page_ArmorMunitions_C::Coverage' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, Deployables) == 0x000430, "Member 'UW_Loadout_Page_ArmorMunitions_C::Deployables' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, img_VestHighlight) == 0x000438, "Member 'UW_Loadout_Page_ArmorMunitions_C::img_VestHighlight' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, Material) == 0x000440, "Member 'UW_Loadout_Page_ArmorMunitions_C::Material' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, MunitionsSwitcher) == 0x000448, "Member 'UW_Loadout_Page_ArmorMunitions_C::MunitionsSwitcher' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, VB_Vest) == 0x000450, "Member 'UW_Loadout_Page_ArmorMunitions_C::VB_Vest' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, VestOptions) == 0x000458, "Member 'UW_Loadout_Page_ArmorMunitions_C::VestOptions' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, W_LoadoutSlot_Vest) == 0x000460, "Member 'UW_Loadout_Page_ArmorMunitions_C::W_LoadoutSlot_Vest' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, WidgetSwitcher) == 0x000468, "Member 'UW_Loadout_Page_ArmorMunitions_C::WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, EquippedVestSlot) == 0x000470, "Member 'UW_Loadout_Page_ArmorMunitions_C::EquippedVestSlot' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, CoverageMap) == 0x000478, "Member 'UW_Loadout_Page_ArmorMunitions_C::CoverageMap' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, MaterialMap) == 0x0004C8, "Member 'UW_Loadout_Page_ArmorMunitions_C::MaterialMap' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, LastHovered) == 0x000518, "Member 'UW_Loadout_Page_ArmorMunitions_C::LastHovered' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, LastActiveMunitionList) == 0x000520, "Member 'UW_Loadout_Page_ArmorMunitions_C::LastActiveMunitionList' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, LastAmmoHover) == 0x000528, "Member 'UW_Loadout_Page_ArmorMunitions_C::LastAmmoHover' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, LastDeployableHover) == 0x000530, "Member 'UW_Loadout_Page_ArmorMunitions_C::LastDeployableHover' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, CurrentActiveMunitionList) == 0x000538, "Member 'UW_Loadout_Page_ArmorMunitions_C::CurrentActiveMunitionList' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, SlotFocus) == 0x000540, "Member 'UW_Loadout_Page_ArmorMunitions_C::SlotFocus' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, CoverageSelectedEvent) == 0x000548, "Member 'UW_Loadout_Page_ArmorMunitions_C::CoverageSelectedEvent' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, MaterialSelectedEvent) == 0x000550, "Member 'UW_Loadout_Page_ArmorMunitions_C::MaterialSelectedEvent' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, ArmorSelectedEventMap) == 0x000558, "Member 'UW_Loadout_Page_ArmorMunitions_C::ArmorSelectedEventMap' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, bVestOptionsOpen) == 0x0005A8, "Member 'UW_Loadout_Page_ArmorMunitions_C::bVestOptionsOpen' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, EscapeAttempts) == 0x0005AC, "Member 'UW_Loadout_Page_ArmorMunitions_C::EscapeAttempts' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, bInitialized) == 0x0005B0, "Member 'UW_Loadout_Page_ArmorMunitions_C::bInitialized' has a wrong offset!");
static_assert(offsetof(UW_Loadout_Page_ArmorMunitions_C, CategoryClickedEvent) == 0x0005B8, "Member 'UW_Loadout_Page_ArmorMunitions_C::CategoryClickedEvent' has a wrong offset!");

}

