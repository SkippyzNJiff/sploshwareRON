#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_DifficultySelect

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CommonInput_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_DifficultySelect.W_DifficultySelect_C
// 0x0058 (0x0318 - 0x02C0)
class UW_DifficultySelect_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URichTextBlock*                         txt_PrimaryDescription;                            // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URichTextBlock*                         txt_SecondaryDescription;                          // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Carousel_C*                          W_Carousel;                                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class Uw_Dropdown_C*                          w_Dropdown;                                        // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_SubMenu_C*                           W_SubMenu;                                         // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActivatableWidgetSwitcher*       WidgetSwitcher;                                    // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FGameplayTag                           SelectedDifficulty;                                // 0x02F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(const struct FGameplayTag& SelectedDifficulty)> OnDifficultySelected; // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          UseGamepad;                                        // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__W_DifficultySelect_W_Carousel_K2Node_ComponentBoundEvent_1_OnOptionSelected__DelegateSignature(class FName OptionID);
	void BndEvt__W_DifficultySelect_w_Dropdown_K2Node_ComponentBoundEvent_0_OnOptionSelected__DelegateSignature(const class FString& OptionID);
	void Construct();
	void ExecuteUbergraph_W_DifficultySelect(int32 EntryPoint);
	void InputMethodChanged(ECommonInputType bNewInputType);
	void OnInputMethodChanged(bool UseGamepad_0);
	void OnOptionSelected(const class FString& OptionID);
	void PopulateDifficulties();
	void PreConstruct(bool IsDesignTime);
	void Start_Listening();
	void Stop_Listening();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_DifficultySelect_C">();
	}
	static class UW_DifficultySelect_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_DifficultySelect_C>();
	}
};
static_assert(alignof(UW_DifficultySelect_C) == 0x000008, "Wrong alignment on UW_DifficultySelect_C");
static_assert(sizeof(UW_DifficultySelect_C) == 0x000318, "Wrong size on UW_DifficultySelect_C");
static_assert(offsetof(UW_DifficultySelect_C, UberGraphFrame) == 0x0002C0, "Member 'UW_DifficultySelect_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_DifficultySelect_C, txt_PrimaryDescription) == 0x0002C8, "Member 'UW_DifficultySelect_C::txt_PrimaryDescription' has a wrong offset!");
static_assert(offsetof(UW_DifficultySelect_C, txt_SecondaryDescription) == 0x0002D0, "Member 'UW_DifficultySelect_C::txt_SecondaryDescription' has a wrong offset!");
static_assert(offsetof(UW_DifficultySelect_C, W_Carousel) == 0x0002D8, "Member 'UW_DifficultySelect_C::W_Carousel' has a wrong offset!");
static_assert(offsetof(UW_DifficultySelect_C, w_Dropdown) == 0x0002E0, "Member 'UW_DifficultySelect_C::w_Dropdown' has a wrong offset!");
static_assert(offsetof(UW_DifficultySelect_C, W_SubMenu) == 0x0002E8, "Member 'UW_DifficultySelect_C::W_SubMenu' has a wrong offset!");
static_assert(offsetof(UW_DifficultySelect_C, WidgetSwitcher) == 0x0002F0, "Member 'UW_DifficultySelect_C::WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UW_DifficultySelect_C, SelectedDifficulty) == 0x0002F8, "Member 'UW_DifficultySelect_C::SelectedDifficulty' has a wrong offset!");
static_assert(offsetof(UW_DifficultySelect_C, OnDifficultySelected) == 0x000300, "Member 'UW_DifficultySelect_C::OnDifficultySelected' has a wrong offset!");
static_assert(offsetof(UW_DifficultySelect_C, UseGamepad) == 0x000310, "Member 'UW_DifficultySelect_C::UseGamepad' has a wrong offset!");

}

