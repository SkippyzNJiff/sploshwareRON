#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModioUICore

#include "Basic.hpp"

#include "CommonUI_classes.hpp"
#include "Engine_classes.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "ModioUICore_structs.hpp"
#include "Modio_structs.hpp"
#include "UMG_classes.hpp"
#include "Slate_structs.hpp"


namespace SDK
{

// Class ModioUICore.ModioUIComponentBase
// 0x0060 (0x0470 - 0x0410)
class UModioUIComponentBase : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_410[0x38];                                     // 0x0410(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DataSource;                                        // 0x0448(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UObject* ActivationContext, bool bIsActivated)> OnModioActivationChanged; // 0x0450(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UObject* FocusContext, const struct FFocusEvent& InFocusEvent, bool bIsFocused)> OnModioFocusPathChanged; // 0x0460(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIComponentBase">();
	}
	static class UModioUIComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIComponentBase>();
	}
};
static_assert(alignof(UModioUIComponentBase) == 0x000008, "Wrong alignment on UModioUIComponentBase");
static_assert(sizeof(UModioUIComponentBase) == 0x000470, "Wrong size on UModioUIComponentBase");
static_assert(offsetof(UModioUIComponentBase, DataSource) == 0x000448, "Member 'UModioUIComponentBase::DataSource' has a wrong offset!");
static_assert(offsetof(UModioUIComponentBase, OnModioActivationChanged) == 0x000450, "Member 'UModioUIComponentBase::OnModioActivationChanged' has a wrong offset!");
static_assert(offsetof(UModioUIComponentBase, OnModioFocusPathChanged) == 0x000460, "Member 'UModioUIComponentBase::OnModioFocusPathChanged' has a wrong offset!");

// Class ModioUICore.ModioModTagSelectorEntry
// 0x0048 (0x04B8 - 0x0470)
class UModioModTagSelectorEntry final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x28];                                     // 0x0470(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* SelectionContext, bool bNewSelectedState)> OnSelectionStateChanged; // 0x0498(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UObject* ClickContext)> OnClicked;                           // 0x04A8(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void NotifyClicked();
	void NotifySelectionChanged();
	void OnTagEntryClicked(class UObject* ClickedObject);

	TScriptInterface<class IModioUIClickableWidget> GetClickableWidget() const;
	TScriptInterface<class IModioUISelectableWidget> GetSelectionWidget() const;
	TScriptInterface<class IModioUIHasTextWidget> GetTagLabelWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModTagSelectorEntry">();
	}
	static class UModioModTagSelectorEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModTagSelectorEntry>();
	}
};
static_assert(alignof(UModioModTagSelectorEntry) == 0x000008, "Wrong alignment on UModioModTagSelectorEntry");
static_assert(sizeof(UModioModTagSelectorEntry) == 0x0004B8, "Wrong size on UModioModTagSelectorEntry");
static_assert(offsetof(UModioModTagSelectorEntry, OnSelectionStateChanged) == 0x000498, "Member 'UModioModTagSelectorEntry::OnSelectionStateChanged' has a wrong offset!");
static_assert(offsetof(UModioModTagSelectorEntry, OnClicked) == 0x0004A8, "Member 'UModioModTagSelectorEntry::OnClicked' has a wrong offset!");

// Class ModioUICore.ModioActivatableWidget
// 0x0000 (0x0000 - 0x0000)
class IModioActivatableWidget final
{
public:
	void Activate();
	void AddActivationChangedHandler(const TDelegate<void(class UObject* ActivationContext, bool bIsActivated)>& Handler);
	void Deactivate();
	void RemoveActivationChangedHandler(const TDelegate<void(class UObject* ActivationContext, bool bIsActivated)>& Handler);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioActivatableWidget">();
	}
	static class IModioActivatableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioActivatableWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioActivatableWidget) == 0x000001, "Wrong alignment on IModioActivatableWidget");
static_assert(sizeof(IModioActivatableWidget) == 0x000001, "Wrong size on IModioActivatableWidget");

// Class ModioUICore.ModioEnumEntryUIDetails
// 0x0000 (0x0000 - 0x0000)
class IModioEnumEntryUIDetails final
{
public:
	void GetEnumEntryDetails(uint8* EnumValue, class FText* EnumValueDisplayText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioEnumEntryUIDetails">();
	}
	static class IModioEnumEntryUIDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioEnumEntryUIDetails>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioEnumEntryUIDetails) == 0x000001, "Wrong alignment on IModioEnumEntryUIDetails");
static_assert(sizeof(IModioEnumEntryUIDetails) == 0x000001, "Wrong size on IModioEnumEntryUIDetails");

// Class ModioUICore.ModioRetryLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioRetryLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CanRetry(const struct FModioRetryCounter& Target);
	static bool CanRetryAsExec(const struct FModioRetryCounter& Target);
	static void ResetRetryCount(struct FModioRetryCounter& Target);
	static struct FModioRetryCounter ResetRetryCountPure(struct FModioRetryCounter& Target);
	static bool Retry(struct FModioRetryCounter& Target);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioRetryLibrary">();
	}
	static class UModioRetryLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioRetryLibrary>();
	}
};
static_assert(alignof(UModioRetryLibrary) == 0x000008, "Wrong alignment on UModioRetryLibrary");
static_assert(sizeof(UModioRetryLibrary) == 0x000028, "Wrong size on UModioRetryLibrary");

// Class ModioUICore.ModioFocusableWidget
// 0x0000 (0x0000 - 0x0000)
class IModioFocusableWidget final
{
public:
	void AddFocusPathChangedHandler(const TDelegate<void(class UObject* FocusContext, const struct FFocusEvent& InFocusEvent, bool bIsFocused)>& Handler);
	void RemoveFocusPathChangedHandler(const TDelegate<void(class UObject* FocusContext, const struct FFocusEvent& InFocusEvent, bool bIsFocused)>& Handler);

	class UWidget* GetWidgetToFocus(EUINavigation NavigationType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioFocusableWidget">();
	}
	static class IModioFocusableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioFocusableWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioFocusableWidget) == 0x000001, "Wrong alignment on IModioFocusableWidget");
static_assert(sizeof(IModioFocusableWidget) == 0x000001, "Wrong size on IModioFocusableWidget");

// Class ModioUICore.ModioGalleryImageUIDetails
// 0x0000 (0x0000 - 0x0000)
class IModioGalleryImageUIDetails final
{
public:
	struct FModioImageWrapper GetImage();
	int32 GetIndex();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioGalleryImageUIDetails">();
	}
	static class IModioGalleryImageUIDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioGalleryImageUIDetails>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioGalleryImageUIDetails) == 0x000001, "Wrong alignment on IModioGalleryImageUIDetails");
static_assert(sizeof(IModioGalleryImageUIDetails) == 0x000001, "Wrong size on IModioGalleryImageUIDetails");

// Class ModioUICore.ModioPlatformSpecificWidget
// 0x0000 (0x0198 - 0x0198)
class UModioPlatformSpecificWidget final : public UContentWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioPlatformSpecificWidget">();
	}
	static class UModioPlatformSpecificWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioPlatformSpecificWidget>();
	}
};
static_assert(alignof(UModioPlatformSpecificWidget) == 0x000008, "Wrong alignment on UModioPlatformSpecificWidget");
static_assert(sizeof(UModioPlatformSpecificWidget) == 0x000198, "Wrong size on UModioPlatformSpecificWidget");

// Class ModioUICore.ModioModDependencyUIDetails
// 0x0000 (0x0000 - 0x0000)
class IModioModDependencyUIDetails final
{
public:
	struct FModioModDependency GetModDependency();
	struct FModioModID GetModID();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModDependencyUIDetails">();
	}
	static class IModioModDependencyUIDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioModDependencyUIDetails>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioModDependencyUIDetails) == 0x000001, "Wrong alignment on IModioModDependencyUIDetails");
static_assert(sizeof(IModioModDependencyUIDetails) == 0x000001, "Wrong size on IModioModDependencyUIDetails");

// Class ModioUICore.ModioModFilterUIDetails
// 0x0000 (0x0000 - 0x0000)
class IModioModFilterUIDetails final
{
public:
	bool GetFilterName(class FText& Name_0);
	struct FModioFilterParams GetFilterParams();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModFilterUIDetails">();
	}
	static class IModioModFilterUIDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioModFilterUIDetails>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioModFilterUIDetails) == 0x000001, "Wrong alignment on IModioModFilterUIDetails");
static_assert(sizeof(IModioModFilterUIDetails) == 0x000001, "Wrong size on IModioModFilterUIDetails");

// Class ModioUICore.ModioModTagSelector
// 0x0018 (0x0488 - 0x0470)
class UModioModTagSelector final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x8];                                      // 0x0470(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IModioModTagOptionsUIDetails> CachedTagOptions;                           // 0x0478(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	TScriptInterface<class IModioUIClickableWidget> GetMenuToggleClickableWidget() const;
	TScriptInterface<class IModioUIModTagSelector> GetSelectorMenuWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModTagSelector">();
	}
	static class UModioModTagSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModTagSelector>();
	}
};
static_assert(alignof(UModioModTagSelector) == 0x000008, "Wrong alignment on UModioModTagSelector");
static_assert(sizeof(UModioModTagSelector) == 0x000488, "Wrong size on UModioModTagSelector");
static_assert(offsetof(UModioModTagSelector, CachedTagOptions) == 0x000478, "Member 'UModioModTagSelector::CachedTagOptions' has a wrong offset!");

// Class ModioUICore.ModioModInfoUIDetails
// 0x0000 (0x0000 - 0x0000)
class IModioModInfoUIDetails final
{
public:
	struct FModioModInfo GetFullModInfo();
	struct FModioModID GetModID();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModInfoUIDetails">();
	}
	static class IModioModInfoUIDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioModInfoUIDetails>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioModInfoUIDetails) == 0x000001, "Wrong alignment on IModioModInfoUIDetails");
static_assert(sizeof(IModioModInfoUIDetails) == 0x000001, "Wrong size on IModioModInfoUIDetails");

// Class ModioUICore.ModioModTagUIDetails
// 0x0000 (0x0000 - 0x0000)
class IModioModTagUIDetails final
{
public:
	class FText GetLocalizedText();
	class FString GetRawStringValue();
	bool GetSelectionState();
	void SetSelectionState(bool bNewSelectionState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModTagUIDetails">();
	}
	static class IModioModTagUIDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioModTagUIDetails>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioModTagUIDetails) == 0x000001, "Wrong alignment on IModioModTagUIDetails");
static_assert(sizeof(IModioModTagUIDetails) == 0x000001, "Wrong size on IModioModTagUIDetails");

// Class ModioUICore.PropertyOverridesLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropertyOverridesLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FSoftClassPath ApplyClassPathOverride(const struct FClassPathOverride& Target, const struct FSoftClassPath& DefaultValue);
	static class UClass* ApplyClassPathOverride_Casted(const struct FClassPathOverride& Target, TSubclassOf<class UObject> BaseClass, class UClass* DefaultValue);
	static float ApplyFloatOverride(const struct FFloatOverride& Target, float DefaultValue);
	static struct FSlateFontInfo ApplyFontInfoOverride(const struct FSlateFontInfoOverride& Target, const struct FSlateFontInfo& DefaultValue);
	static EHorizontalAlignment ApplyHAlignOverride(const struct FHAlignOverride& Target, EHorizontalAlignment DefaultValue);
	static struct FDataTableRowHandle ApplyInputActionOverride(const struct FInputActionOverride& Target, const struct FDataTableRowHandle& DefaultValue);
	static int32 ApplyIntOverride(const struct FIntegerOverride& Target, int32 DefaultValue);
	static class FText ApplyTextOverride(const struct FTextOverride& Target, const class FText& DefaultValue);
	static ETextTransformPolicy ApplyTextTransformOverride(const struct FTextTransformOverride& Target, ETextTransformPolicy DefaultValue);
	static struct FSoftClassPath ResolveClassPathOverride(const struct FClassPathOverride& Target, bool* bOverrideSet);
	static class UClass* ResolveClassPathOverride_Casted(const struct FClassPathOverride& Target, TSubclassOf<class UObject> BaseClass, bool* bOverrideSet);
	static struct FSoftClassPath ResolveClassPathOverrideAsExec(const struct FClassPathOverride& Target, bool* bOverrideSet);
	static class UClass* ResolveClassPathOverrideAsExec_Casted(const struct FClassPathOverride& Target, TSubclassOf<class UObject> BaseClass, bool* bOverrideSet);
	static float ResolveFloatOverride(const struct FFloatOverride& Target, bool* bOverrideSet);
	static float ResolveFloatOverrideAsExec(const struct FFloatOverride& Target, bool* bOverrideSet);
	static struct FSlateFontInfo ResolveFontInfoOverride(const struct FSlateFontInfoOverride& Target, bool* bOverrideSet);
	static struct FSlateFontInfo ResolveFontInfoOverrideAsExec(const struct FSlateFontInfoOverride& Target, bool* bOverrideSet);
	static EHorizontalAlignment ResolveHAlignOverride(const struct FHAlignOverride& Target, bool* bOverrideSet);
	static EHorizontalAlignment ResolveHAlignOverrideAsExec(const struct FHAlignOverride& Target, bool* bOverrideSet);
	static struct FDataTableRowHandle ResolveInputActionOverride(const struct FInputActionOverride& Target, bool* bOverrideSet);
	static struct FDataTableRowHandle ResolveInputActionOverrideAsExec(const struct FInputActionOverride& Target, bool* bOverrideSet);
	static int32 ResolveIntOverride(const struct FIntegerOverride& Target, bool* bOverrideSet);
	static int32 ResolveIntOverrideAsExec(const struct FIntegerOverride& Target, bool* bOverrideSet);
	static class FText ResolveTextOverride(const struct FTextOverride& Target, bool* bOverrideSet);
	static class FText ResolveTextOverrideAsExec(const struct FTextOverride& Target, bool* bOverrideSet);
	static ETextTransformPolicy ResolveTextTransformOverride(const struct FTextTransformOverride& Target, bool* bOverrideSet);
	static ETextTransformPolicy ResolveTextTransformOverrideAsExec(const struct FTextTransformOverride& Target, bool* bOverrideSet);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PropertyOverridesLibrary">();
	}
	static class UPropertyOverridesLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropertyOverridesLibrary>();
	}
};
static_assert(alignof(UPropertyOverridesLibrary) == 0x000008, "Wrong alignment on UPropertyOverridesLibrary");
static_assert(sizeof(UPropertyOverridesLibrary) == 0x000028, "Wrong size on UPropertyOverridesLibrary");

// Class ModioUICore.ModioModTagCategoryUIDetails
// 0x0000 (0x0000 - 0x0000)
class IModioModTagCategoryUIDetails final
{
public:
	bool GetAllowMultipleSelection();
	TArray<TScriptInterface<class IModioModTagUIDetails>> GetCategoryTags();
	bool GetIsCategoryHidden();
	bool GetIsCategoryLocked();
	class FText GetLocalizedCategoryName();
	class FString GetRawCategoryName();
	TArray<class FString> GetSelectedTags();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModTagCategoryUIDetails">();
	}
	static class IModioModTagCategoryUIDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioModTagCategoryUIDetails>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioModTagCategoryUIDetails) == 0x000001, "Wrong alignment on IModioModTagCategoryUIDetails");
static_assert(sizeof(IModioModTagCategoryUIDetails) == 0x000001, "Wrong size on IModioModTagCategoryUIDetails");

// Class ModioUICore.ModioModTagOptionsUIDetails
// 0x0000 (0x0000 - 0x0000)
class IModioModTagOptionsUIDetails final
{
public:
	void ClearSelectedTags();
	TArray<TScriptInterface<class IModioModTagCategoryUIDetails>> GetCategories();
	TArray<class FString> GetSelectedTags();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModTagOptionsUIDetails">();
	}
	static class IModioModTagOptionsUIDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioModTagOptionsUIDetails>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioModTagOptionsUIDetails) == 0x000001, "Wrong alignment on IModioModTagOptionsUIDetails");
static_assert(sizeof(IModioModTagOptionsUIDetails) == 0x000001, "Wrong size on IModioModTagOptionsUIDetails");

// Class ModioUICore.ModioTokenPackBrowser
// 0x0030 (0x04A0 - 0x0470)
class UModioTokenPackBrowser final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x30];                                     // 0x0470(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TScriptInterface<class IModioUIHasTextWidget> GetTitleTextWidget() const;
	TScriptInterface<class IModioUITokenPackListInterface> GetTokenTileViewWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTokenPackBrowser">();
	}
	static class UModioTokenPackBrowser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTokenPackBrowser>();
	}
};
static_assert(alignof(UModioTokenPackBrowser) == 0x000008, "Wrong alignment on UModioTokenPackBrowser");
static_assert(sizeof(UModioTokenPackBrowser) == 0x0004A0, "Wrong size on UModioTokenPackBrowser");

// Class ModioUICore.ModioScrollableWidget
// 0x0000 (0x0000 - 0x0000)
class IModioScrollableWidget final
{
public:
	void ScrollToBottom();
	void ScrollToTop();
	void SetScrollOffset(float Offset);

	float GetScrollOffset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioScrollableWidget">();
	}
	static class IModioScrollableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioScrollableWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioScrollableWidget) == 0x000001, "Wrong alignment on IModioScrollableWidget");
static_assert(sizeof(IModioScrollableWidget) == 0x000001, "Wrong size on IModioScrollableWidget");

// Class ModioUICore.ModioToggleableWidget
// 0x0000 (0x0000 - 0x0000)
class IModioToggleableWidget final
{
public:
	void AddToggleStateChangedHandler(const TDelegate<void(class UObject* Context, bool bIsOpen)>& Handler);
	void Close();
	void Open(bool bForce, bool bFocusMenu);
	void RemoveToggleStateChangedHandler(const TDelegate<void(class UObject* Context, bool bIsOpen)>& Handler);

	bool IsOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioToggleableWidget">();
	}
	static class IModioToggleableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioToggleableWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioToggleableWidget) == 0x000001, "Wrong alignment on IModioToggleableWidget");
static_assert(sizeof(IModioToggleableWidget) == 0x000001, "Wrong size on IModioToggleableWidget");

// Class ModioUICore.ModioStackedBoolLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioStackedBoolLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool PeekBoolValue(const struct FModioStackedBool& Target, bool* bDidPeekSuccessfully);
	static bool PopBoolValue(struct FModioStackedBool& Target, bool* bDidPopSuccessfully);
	static void PushBoolValue(struct FModioStackedBool& Target, bool bNewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioStackedBoolLibrary">();
	}
	static class UModioStackedBoolLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioStackedBoolLibrary>();
	}
};
static_assert(alignof(UModioStackedBoolLibrary) == 0x000008, "Wrong alignment on UModioStackedBoolLibrary");
static_assert(sizeof(UModioStackedBoolLibrary) == 0x000028, "Wrong size on UModioStackedBoolLibrary");

// Class ModioUICore.ModioUIClickableWidget
// 0x0000 (0x0000 - 0x0000)
class IModioUIClickableWidget final
{
public:
	void AddClickedHandler(const TDelegate<void(class UObject* ClickContext)>& Handler);
	void DisableClick();
	void EnableClick();
	void RemoveClickedHandler(const TDelegate<void(class UObject* ClickContext)>& Handler);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIClickableWidget">();
	}
	static class IModioUIClickableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIClickableWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIClickableWidget) == 0x000001, "Wrong alignment on IModioUIClickableWidget");
static_assert(sizeof(IModioUIClickableWidget) == 0x000001, "Wrong size on IModioUIClickableWidget");

// Class ModioUICore.ModioUIBoundActionWidget
// 0x0000 (0x0000 - 0x0000)
class IModioUIBoundActionWidget final
{
public:
	void AddActionCompletedHandler(const TDelegate<void(const struct FDataTableRowHandle& BoundAction)>& Handler);
	void AddActionProgressHandler(const TDelegate<void(const struct FDataTableRowHandle& BoundAction, float Progress)>& Handler);
	void ClearBoundAction();
	void RemoveActionCompletedHandler(const TDelegate<void(const struct FDataTableRowHandle& BoundAction)>& Handler);
	void RemoveActionProgressHandler(const TDelegate<void(const struct FDataTableRowHandle& BoundAction, float Progress)>& Handler);
	void SetBoundAction(const struct FDataTableRowHandle& InputActionRow);

	bool TryGetBoundAction(struct FDataTableRowHandle* InputActionRow) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIBoundActionWidget">();
	}
	static class IModioUIBoundActionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIBoundActionWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIBoundActionWidget) == 0x000001, "Wrong alignment on IModioUIBoundActionWidget");
static_assert(sizeof(IModioUIBoundActionWidget) == 0x000001, "Wrong size on IModioUIBoundActionWidget");

// Class ModioUICore.ModioPresetFilterEntryWidget
// 0x0020 (0x0490 - 0x0470)
class UModioPresetFilterEntryWidget final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x20];                                     // 0x0470(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TScriptInterface<class IModioUIHasTextWidget> GetLabelWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioPresetFilterEntryWidget">();
	}
	static class UModioPresetFilterEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioPresetFilterEntryWidget>();
	}
};
static_assert(alignof(UModioPresetFilterEntryWidget) == 0x000008, "Wrong alignment on UModioPresetFilterEntryWidget");
static_assert(sizeof(UModioPresetFilterEntryWidget) == 0x000490, "Wrong size on UModioPresetFilterEntryWidget");

// Class ModioUICore.ModioUICommandMenu
// 0x0000 (0x0000 - 0x0000)
class IModioUICommandMenu final
{
public:
	void AddCommandListBuilder(const TDelegate<void(TArray<class UObject*>* CommandList, class UObject* Context)>& Builder);
	void RebuildCommandList();
	void RemoveCommandListBuilder(const TDelegate<void(TArray<class UObject*>* CommandList, class UObject* Context)>& Builder);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUICommandMenu">();
	}
	static class IModioUICommandMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUICommandMenu>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUICommandMenu) == 0x000001, "Wrong alignment on IModioUICommandMenu");
static_assert(sizeof(IModioUICommandMenu) == 0x000001, "Wrong size on IModioUICommandMenu");

// Class ModioUICore.ModioUICommandObject
// 0x0000 (0x0000 - 0x0000)
class IModioUICommandObject final
{
public:
	bool CanExecute(class UObject* Context);
	void Execute(class UObject* Context);
	struct FSlateBrush GetCommandBrush();
	class FText GetCommandDisplayString();
	void SetDataSource(class UObject* InDataSource);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUICommandObject">();
	}
	static class IModioUICommandObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUICommandObject>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUICommandObject) == 0x000001, "Wrong alignment on IModioUICommandObject");
static_assert(sizeof(IModioUICommandObject) == 0x000001, "Wrong size on IModioUICommandObject");

// Class ModioUICore.ModioModTagInfoUI
// 0x00E8 (0x0110 - 0x0028)
class UModioModTagInfoUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioModTagInfo                       Underlying;                                        // 0x0030(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LocalizedCategoryName;                             // 0x00E8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class UModioModTagUI*>                 BindableTags;                                      // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModTagInfoUI">();
	}
	static class UModioModTagInfoUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModTagInfoUI>();
	}
};
static_assert(alignof(UModioModTagInfoUI) == 0x000008, "Wrong alignment on UModioModTagInfoUI");
static_assert(sizeof(UModioModTagInfoUI) == 0x000110, "Wrong size on UModioModTagInfoUI");
static_assert(offsetof(UModioModTagInfoUI, Underlying) == 0x000030, "Member 'UModioModTagInfoUI::Underlying' has a wrong offset!");
static_assert(offsetof(UModioModTagInfoUI, LocalizedCategoryName) == 0x0000E8, "Member 'UModioModTagInfoUI::LocalizedCategoryName' has a wrong offset!");
static_assert(offsetof(UModioModTagInfoUI, BindableTags) == 0x000100, "Member 'UModioModTagInfoUI::BindableTags' has a wrong offset!");

// Class ModioUICore.ModioUICommandLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUICommandLibrary final : public UBlueprintFunctionLibrary
{
public:
	static const struct FModioUICommandAssetEntry GetCommandAssetEntry(const class FString& CommandID, bool* bResolved);
	static const struct FSlateBrush GetCommandBrush(const class FString& CommandID, const class FName& BrushName, bool* bResolved);
	static const class FText GetCommandText(const class FString& CommandID, const class FName& TextName, bool* bResolved);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUICommandLibrary">();
	}
	static class UModioUICommandLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUICommandLibrary>();
	}
};
static_assert(alignof(UModioUICommandLibrary) == 0x000008, "Wrong alignment on UModioUICommandLibrary");
static_assert(sizeof(UModioUICommandLibrary) == 0x000028, "Wrong size on UModioUICommandLibrary");

// Class ModioUICore.ModioUICommonButtonWidget
// 0x0000 (0x0000 - 0x0000)
class IModioUICommonButtonWidget final
{
public:
	void ConfigureCommonButton(const struct FModioCommonButtonParams& Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUICommonButtonWidget">();
	}
	static class IModioUICommonButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUICommonButtonWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUICommonButtonWidget) == 0x000001, "Wrong alignment on IModioUICommonButtonWidget");
static_assert(sizeof(IModioUICommonButtonWidget) == 0x000001, "Wrong size on IModioUICommonButtonWidget");

// Class ModioUICore.ModioUIPurchaseModCommand
// 0x0010 (0x0038 - 0x0028)
class UModioUIPurchaseModCommand final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DataSource;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIPurchaseModCommand">();
	}
	static class UModioUIPurchaseModCommand* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIPurchaseModCommand>();
	}
};
static_assert(alignof(UModioUIPurchaseModCommand) == 0x000008, "Wrong alignment on UModioUIPurchaseModCommand");
static_assert(sizeof(UModioUIPurchaseModCommand) == 0x000038, "Wrong size on UModioUIPurchaseModCommand");
static_assert(offsetof(UModioUIPurchaseModCommand, DataSource) == 0x000030, "Member 'UModioUIPurchaseModCommand::DataSource' has a wrong offset!");

// Class ModioUICore.ModioUIConnectivityChangedReceiver
// 0x0000 (0x0000 - 0x0000)
class IModioUIConnectivityChangedReceiver final
{
public:
	void OnConnectivityChanged(bool bNewConnectivityState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIConnectivityChangedReceiver">();
	}
	static class IModioUIConnectivityChangedReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIConnectivityChangedReceiver>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIConnectivityChangedReceiver) == 0x000001, "Wrong alignment on IModioUIConnectivityChangedReceiver");
static_assert(sizeof(IModioUIConnectivityChangedReceiver) == 0x000001, "Wrong size on IModioUIConnectivityChangedReceiver");

// Class ModioUICore.ModioUIConnectivityChangedReceiverLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUIConnectivityChangedReceiverLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DeregisterConnectivityChangedReceiver(class UObject* ObjectToDeregister);
	static void RegisterConnectivityChangedReceiver(class UObject* ObjectToRegister);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIConnectivityChangedReceiverLibrary">();
	}
	static class UModioUIConnectivityChangedReceiverLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIConnectivityChangedReceiverLibrary>();
	}
};
static_assert(alignof(UModioUIConnectivityChangedReceiverLibrary) == 0x000008, "Wrong alignment on UModioUIConnectivityChangedReceiverLibrary");
static_assert(sizeof(UModioUIConnectivityChangedReceiverLibrary) == 0x000028, "Wrong size on UModioUIConnectivityChangedReceiverLibrary");

// Class ModioUICore.ModioTokenPackUIDetails
// 0x0000 (0x0000 - 0x0000)
class IModioTokenPackUIDetails final
{
public:
	struct FModioTokenPack GetFullTokenPack();
	struct FModioTokenPackID GetTokenPackID();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTokenPackUIDetails">();
	}
	static class IModioTokenPackUIDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioTokenPackUIDetails>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioTokenPackUIDetails) == 0x000001, "Wrong alignment on IModioTokenPackUIDetails");
static_assert(sizeof(IModioTokenPackUIDetails) == 0x000001, "Wrong size on IModioTokenPackUIDetails");

// Class ModioUICore.ModioUIDataSourceWidget
// 0x0000 (0x0000 - 0x0000)
class IModioUIDataSourceWidget final
{
public:
	class UObject* GetDataSource();
	void SetDataSource(class UObject* InDataSource);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIDataSourceWidget">();
	}
	static class IModioUIDataSourceWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIDataSourceWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIDataSourceWidget) == 0x000001, "Wrong alignment on IModioUIDataSourceWidget");
static_assert(sizeof(IModioUIDataSourceWidget) == 0x000001, "Wrong size on IModioUIDataSourceWidget");

// Class ModioUICore.ModioUIDialog
// 0x0000 (0x0000 - 0x0000)
class IModioUIDialog final
{
public:
	void AddDialogButtonClickedHandler(const TDelegate<void(int32 ButtonIndex)>& Handler);
	void AddDialogCanceledHandler(const TDelegate<void()>& Handler);
	void AddDialogConfirmedHandler(const TDelegate<void()>& Handler);
	void AddDialogShownHandler(const TDelegate<void(bool bOpen)>& Handler);
	void CloseModal();
	void RemoveDialogButtonClickedHandler(const TDelegate<void(int32 ButtonIndex)>& Handler);
	void RemoveDialogCanceledHandler(const TDelegate<void()>& Handler);
	void RemoveDialogConfirmedHandler(const TDelegate<void()>& Handler);
	void RemoveDialogShownHandler(const TDelegate<void(bool bOpen)>& Handler);
	void ShowModal(bool bFocusCancelButton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIDialog">();
	}
	static class IModioUIDialog* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIDialog>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIDialog) == 0x000001, "Wrong alignment on IModioUIDialog");
static_assert(sizeof(IModioUIDialog) == 0x000001, "Wrong size on IModioUIDialog");

// Class ModioUICore.ModioTagCounterIcon
// 0x0010 (0x0480 - 0x0470)
class UModioTagCounterIcon final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x10];                                     // 0x0470(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TScriptInterface<class IModioUIHasTextWidget> GetCounterLabelWidget();
	int32 SynchronizeCounter();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTagCounterIcon">();
	}
	static class UModioTagCounterIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTagCounterIcon>();
	}
};
static_assert(alignof(UModioTagCounterIcon) == 0x000008, "Wrong alignment on UModioTagCounterIcon");
static_assert(sizeof(UModioTagCounterIcon) == 0x000480, "Wrong size on UModioTagCounterIcon");

// Class ModioUICore.ModioUIDialogDisplayEventReceiver
// 0x0000 (0x0000 - 0x0000)
class IModioUIDialogDisplayEventReceiver final
{
public:
	void OnDialogDisplayEvent(EModioUIDialogType DialogRequested, class UObject* DataSource);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIDialogDisplayEventReceiver">();
	}
	static class IModioUIDialogDisplayEventReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIDialogDisplayEventReceiver>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIDialogDisplayEventReceiver) == 0x000001, "Wrong alignment on IModioUIDialogDisplayEventReceiver");
static_assert(sizeof(IModioUIDialogDisplayEventReceiver) == 0x000001, "Wrong size on IModioUIDialogDisplayEventReceiver");

// Class ModioUICore.ModioUIDialogDisplayEventReceiverLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUIDialogDisplayEventReceiverLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DeregisterDialogDisplayEventReceiver(class UObject* ObjectToDeregister);
	static void RegisterDialogDisplayEventReceiver(class UObject* ObjectToRegister);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIDialogDisplayEventReceiverLibrary">();
	}
	static class UModioUIDialogDisplayEventReceiverLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIDialogDisplayEventReceiverLibrary>();
	}
};
static_assert(alignof(UModioUIDialogDisplayEventReceiverLibrary) == 0x000008, "Wrong alignment on UModioUIDialogDisplayEventReceiverLibrary");
static_assert(sizeof(UModioUIDialogDisplayEventReceiverLibrary) == 0x000028, "Wrong size on UModioUIDialogDisplayEventReceiverLibrary");

// Class ModioUICore.ModioUIEntitlementRefreshEventReceiver
// 0x0000 (0x0000 - 0x0000)
class IModioUIEntitlementRefreshEventReceiver final
{
public:
	void OnEntitlementRefreshEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIEntitlementRefreshEventReceiver">();
	}
	static class IModioUIEntitlementRefreshEventReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIEntitlementRefreshEventReceiver>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIEntitlementRefreshEventReceiver) == 0x000001, "Wrong alignment on IModioUIEntitlementRefreshEventReceiver");
static_assert(sizeof(IModioUIEntitlementRefreshEventReceiver) == 0x000001, "Wrong size on IModioUIEntitlementRefreshEventReceiver");

// Class ModioUICore.ModioUIEntitlementRefreshEventReceiverLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUIEntitlementRefreshEventReceiverLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DeregisterEntitlementRefreshEventReceiver(class UObject* ObjectToDeregister);
	static void RegisterEntitlementRefreshEventReceiver(class UObject* ObjectToRegister);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIEntitlementRefreshEventReceiverLibrary">();
	}
	static class UModioUIEntitlementRefreshEventReceiverLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIEntitlementRefreshEventReceiverLibrary>();
	}
};
static_assert(alignof(UModioUIEntitlementRefreshEventReceiverLibrary) == 0x000008, "Wrong alignment on UModioUIEntitlementRefreshEventReceiverLibrary");
static_assert(sizeof(UModioUIEntitlementRefreshEventReceiverLibrary) == 0x000028, "Wrong size on UModioUIEntitlementRefreshEventReceiverLibrary");

// Class ModioUICore.ModioUIHasConfigurableColor
// 0x0000 (0x0000 - 0x0000)
class IModioUIHasConfigurableColor final
{
public:
	void ConfigureWidgetColor(class FName ColorName, const struct FLinearColorRef& ColorValue);
	void ConfigureWidgetColorDirectly(class FName ColorName, const struct FSlateColor& ColorValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIHasConfigurableColor">();
	}
	static class IModioUIHasConfigurableColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIHasConfigurableColor>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIHasConfigurableColor) == 0x000001, "Wrong alignment on IModioUIHasConfigurableColor");
static_assert(sizeof(IModioUIHasConfigurableColor) == 0x000001, "Wrong size on IModioUIHasConfigurableColor");

// Class ModioUICore.ModioUIHasLoadStateWidget
// 0x0000 (0x0000 - 0x0000)
class IModioUIHasLoadStateWidget final
{
public:
	void AddLoadStateChangedHandler(const TDelegate<void(class UObject* Object, EModioUILoadState NewState)>& Handler);
	void RemoveLoadStateChangedHandler(const TDelegate<void(class UObject* Object, EModioUILoadState NewState)>& Handler);
	void SetLoadState(EModioUILoadState NewState);

	EModioUILoadState GetLoadState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIHasLoadStateWidget">();
	}
	static class IModioUIHasLoadStateWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIHasLoadStateWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIHasLoadStateWidget) == 0x000001, "Wrong alignment on IModioUIHasLoadStateWidget");
static_assert(sizeof(IModioUIHasLoadStateWidget) == 0x000001, "Wrong size on IModioUIHasLoadStateWidget");

// Class ModioUICore.ModioUIHasTextWidget
// 0x0000 (0x0000 - 0x0000)
class IModioUIHasTextWidget final
{
public:
	class FText GetWidgetText();
	struct FSlateFontInfo GetWidgetTextFont();
	void SetWidgetText(const class FText& DisplayText);
	void SetWidgetTextFont(const struct FSlateFontInfo& FontInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIHasTextWidget">();
	}
	static class IModioUIHasTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIHasTextWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIHasTextWidget) == 0x000001, "Wrong alignment on IModioUIHasTextWidget");
static_assert(sizeof(IModioUIHasTextWidget) == 0x000001, "Wrong size on IModioUIHasTextWidget");

// Class ModioUICore.ModioUIHasTooltipWidget
// 0x0000 (0x0000 - 0x0000)
class IModioUIHasTooltipWidget final
{
public:
	void ConfigureTooltip(const class FText& TitleText, const class FText& InfoText, const class FText& TagText);
	void SetTooltipEnabledState(bool bNewEnabledState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIHasTooltipWidget">();
	}
	static class IModioUIHasTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIHasTooltipWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIHasTooltipWidget) == 0x000001, "Wrong alignment on IModioUIHasTooltipWidget");
static_assert(sizeof(IModioUIHasTooltipWidget) == 0x000001, "Wrong size on IModioUIHasTooltipWidget");

// Class ModioUICore.ModioUIHoverableWidget
// 0x0000 (0x0000 - 0x0000)
class IModioUIHoverableWidget final
{
public:
	void AddHoverStateChangedHandler(const TDelegate<void(class UObject* HoverContext, bool bHoveredState)>& Handler);
	void DisableHoverEvents();
	void EnableHoverEvents();
	void RemoveHoverStateChangedHandler(const TDelegate<void(class UObject* HoverContext, bool bHoveredState)>& Handler);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIHoverableWidget">();
	}
	static class IModioUIHoverableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIHoverableWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIHoverableWidget) == 0x000001, "Wrong alignment on IModioUIHoverableWidget");
static_assert(sizeof(IModioUIHoverableWidget) == 0x000001, "Wrong size on IModioUIHoverableWidget");

// Class ModioUICore.ModioUIImageDisplayWidget
// 0x0000 (0x0000 - 0x0000)
class IModioUIImageDisplayWidget final
{
public:
	void AddImageLoadEventHandler(const TDelegate<void(class UObject* LoadContext, bool bLoadSuccess)>& Handler);
	void BeginLoadImageFromFile(const struct FModioImageWrapper& Image);
	void RemoveImageLoadEventHandler(const TDelegate<void(class UObject* LoadContext, bool bLoadSuccess)>& Handler);
	void SetBrushDirectly(const struct FSlateBrush& NewBrush);
	void SetBrushMatchTextureSize(bool bMatchTextureSize);
	void SetDesiredBrushSize(const struct FVector2D& DesiredSize);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIImageDisplayWidget">();
	}
	static class IModioUIImageDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIImageDisplayWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIImageDisplayWidget) == 0x000001, "Wrong alignment on IModioUIImageDisplayWidget");
static_assert(sizeof(IModioUIImageDisplayWidget) == 0x000001, "Wrong size on IModioUIImageDisplayWidget");

// Class ModioUICore.ModioUIViewModCommand
// 0x0010 (0x0038 - 0x0028)
class UModioUIViewModCommand final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DataSource;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIViewModCommand">();
	}
	static class UModioUIViewModCommand* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIViewModCommand>();
	}
};
static_assert(alignof(UModioUIViewModCommand) == 0x000008, "Wrong alignment on UModioUIViewModCommand");
static_assert(sizeof(UModioUIViewModCommand) == 0x000038, "Wrong size on UModioUIViewModCommand");
static_assert(offsetof(UModioUIViewModCommand, DataSource) == 0x000030, "Member 'UModioUIViewModCommand::DataSource' has a wrong offset!");

// Class ModioUICore.ModioUIMediaDownloadCompletedReceiver
// 0x0000 (0x0000 - 0x0000)
class IModioUIMediaDownloadCompletedReceiver final
{
public:
	void OnModCreatorAvatarDownloadCompleted(const struct FModioModID& ModId, const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Image);
	void OnModGalleryImageDownloadCompleted(const struct FModioModID& ModId, const struct FModioErrorCode& ErrorCode, int32 ImageIndex, const struct FModioOptionalImage& Image);
	void OnModLogoDownloadCompleted(const struct FModioModID& ModId, const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Image, EModioLogoSize LogoSize);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIMediaDownloadCompletedReceiver">();
	}
	static class IModioUIMediaDownloadCompletedReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIMediaDownloadCompletedReceiver>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIMediaDownloadCompletedReceiver) == 0x000001, "Wrong alignment on IModioUIMediaDownloadCompletedReceiver");
static_assert(sizeof(IModioUIMediaDownloadCompletedReceiver) == 0x000001, "Wrong size on IModioUIMediaDownloadCompletedReceiver");

// Class ModioUICore.ModioUIMediaDownloadCompletedReceiverLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUIMediaDownloadCompletedReceiverLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DeregisterMediaDownloadCompletedReceiver(class UObject* ObjectToDeregister, EModioUIMediaDownloadEventType DownloadTypes);
	static void RegisterMediaDownloadCompletedReceiver(class UObject* ObjectToRegister, EModioUIMediaDownloadEventType DownloadTypes);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIMediaDownloadCompletedReceiverLibrary">();
	}
	static class UModioUIMediaDownloadCompletedReceiverLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIMediaDownloadCompletedReceiverLibrary>();
	}
};
static_assert(alignof(UModioUIMediaDownloadCompletedReceiverLibrary) == 0x000008, "Wrong alignment on UModioUIMediaDownloadCompletedReceiverLibrary");
static_assert(sizeof(UModioUIMediaDownloadCompletedReceiverLibrary) == 0x000028, "Wrong size on UModioUIMediaDownloadCompletedReceiverLibrary");

// Class ModioUICore.ModioUIModEnabledStateChangedReceiver
// 0x0000 (0x0000 - 0x0000)
class IModioUIModEnabledStateChangedReceiver final
{
public:
	void OnModEnabledStateChanged(const struct FModioModID& ModId, bool bNewEnabledState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIModEnabledStateChangedReceiver">();
	}
	static class IModioUIModEnabledStateChangedReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIModEnabledStateChangedReceiver>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIModEnabledStateChangedReceiver) == 0x000001, "Wrong alignment on IModioUIModEnabledStateChangedReceiver");
static_assert(sizeof(IModioUIModEnabledStateChangedReceiver) == 0x000001, "Wrong size on IModioUIModEnabledStateChangedReceiver");

// Class ModioUICore.ModioUIModEnabledStateChangedReceiverLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUIModEnabledStateChangedReceiverLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DeregisterModEnabledStateChangedReceiver(class UObject* ObjectToDeregister);
	static void RegisterModEnabledStateChangedReceiver(class UObject* ObjectToRegister);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIModEnabledStateChangedReceiverLibrary">();
	}
	static class UModioUIModEnabledStateChangedReceiverLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIModEnabledStateChangedReceiverLibrary>();
	}
};
static_assert(alignof(UModioUIModEnabledStateChangedReceiverLibrary) == 0x000008, "Wrong alignment on UModioUIModEnabledStateChangedReceiverLibrary");
static_assert(sizeof(UModioUIModEnabledStateChangedReceiverLibrary) == 0x000028, "Wrong size on UModioUIModEnabledStateChangedReceiverLibrary");

// Class ModioUICore.ModioUIModEnabledStateProvider
// 0x0000 (0x0000 - 0x0000)
class IModioUIModEnabledStateProvider final
{
public:
	void AddModEnabledStateChangeHandler(const TDelegate<void(int64 RawID, bool bNewEnabledState)>& Handler);
	bool QueryIsModEnabled(const struct FModioModID& ModId);
	void RemoveModEnabledStateChangeHandler(const TDelegate<void(int64 RawID, bool bNewEnabledState)>& Handler);
	bool RequestModEnabledStateChange(const struct FModioModID& ID, bool bNewEnabledState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIModEnabledStateProvider">();
	}
	static class IModioUIModEnabledStateProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIModEnabledStateProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIModEnabledStateProvider) == 0x000001, "Wrong alignment on IModioUIModEnabledStateProvider");
static_assert(sizeof(IModioUIModEnabledStateProvider) == 0x000001, "Wrong size on IModioUIModEnabledStateProvider");

// Class ModioUICore.ModioUIModInfoReceiver
// 0x0000 (0x0000 - 0x0000)
class IModioUIModInfoReceiver final
{
public:
	void OnListAllModsRequestCompleted(const class FString& RequestIdentifier, const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfoList& List);
	void OnModInfoRequestCompleted(const struct FModioModID& ModId, const struct FModioErrorCode& ErrorCode, const struct FModioOptionalModInfo& Info);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIModInfoReceiver">();
	}
	static class IModioUIModInfoReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIModInfoReceiver>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIModInfoReceiver) == 0x000001, "Wrong alignment on IModioUIModInfoReceiver");
static_assert(sizeof(IModioUIModInfoReceiver) == 0x000001, "Wrong size on IModioUIModInfoReceiver");

// Class ModioUICore.ModioUISubsystem
// 0x02C0 (0x02F0 - 0x0030)
class UModioUISubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_30[0x50];                                      // 0x0030(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ModEnabledStateDataProvider;                       // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                ModRatingStateProvider;                            // 0x0088(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0x260];                                     // 0x0090(0x0260)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisableModManagement();
	struct FModioErrorCode EnableModManagement();
	float GetCurrentDPIScaleValue();
	bool IsUGCFeatureEnabled(EModioUIFeatureFlags Feature);
	void NotifyConnectivityChange(bool bNewConnectivityState);
	void OnModEnabledChanged(int64 RawModID, bool bNewEnabledState);
	bool QueryConnectivityState();
	bool QueryIsModEnabled(const struct FModioModID& ID);
	void RequestEmailAuthenticationWithHandler(const struct FModioEmailAuthCode& Code, const TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void RequestGalleryImageDownloadForModID(const struct FModioModID& ID, int32 Index_0, EModioGallerySize ImageSize);
	void RequestListAllMods(const struct FModioFilterParams& Params_0, const class FString& RequestIdentifier);
	void RequestListAllTokenPacks();
	void RequestLogoDownloadForModID(const struct FModioModID& ID, EModioLogoSize LogoSize);
	bool RequestModEnabledStateChange(const struct FModioModID& ID, bool bNewEnabledState);
	void RequestModInfoForModIDs(const TArray<struct FModioModID>& IDs);
	void RequestPurchaseForModIDWithHandler(const struct FModioModID& ID, const struct FModioUnsigned64& ExpectedPrice, const TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalTransactionRecord& Transaction)>& Callback);
	bool RequestPurchaseTokenPack(const struct FModioTokenPackID& TokenPackID, const TDelegate<void(bool bSuccess, const class FString& Message)>& Callback);
	void RequestRefreshEntitlements();
	void RequestRemoveSubscriptionForModID(const struct FModioModID& ID);
	void RequestRemoveSubscriptionForModIDWithHandler(const struct FModioModID& ID, TDelegate<void(const struct FModioErrorCode& ErrorCode)> DedicatedCallback);
	void RequestShowDialog(EModioUIDialogType DialogType, class UObject* DataSource);
	EModioOpenStoreResult RequestShowTokenPurchaseUI();
	EModioOpenStoreResult RequestShowTokenPurchaseUIWithHandler(const TDelegate<void(bool bResult, const class FString& Message)>& Callback);
	void RequestSubscriptionForModID(const struct FModioModID& ID, bool IncludeDependencies);
	void RequestSubscriptionForModIDWithHandler(const struct FModioModID& ID, bool IncludeDependencies, TDelegate<void(const struct FModioErrorCode& ErrorCode)> Callback);
	void RequestUserAvatar();
	void RequestWalletBalanceRefresh();
	void RequestWalletBalanceRefreshWithHandler(const TDelegate<void(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalUInt64& WalletBalance)>& Callback);
	void SetModEnabledStateDataProvider(TScriptInterface<class IModioUIModEnabledStateProvider> InModEnabledStateDataProvider);
	void SetModRatingStateDataProvider(TScriptInterface<class IModRatingStateProvider> InModRatingStateProvider);
	void SubscriptionHandler(const struct FModioErrorCode& ErrorCode, const struct FModioModID& ID);
	void UninstallHandler(const struct FModioErrorCode& ErrorCode, const struct FModioModID& ID);
	void UnsubscribeHandler(const struct FModioErrorCode& ErrorCode, const struct FModioModID& ID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUISubsystem">();
	}
	static class UModioUISubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUISubsystem>();
	}
};
static_assert(alignof(UModioUISubsystem) == 0x000008, "Wrong alignment on UModioUISubsystem");
static_assert(sizeof(UModioUISubsystem) == 0x0002F0, "Wrong size on UModioUISubsystem");
static_assert(offsetof(UModioUISubsystem, ModEnabledStateDataProvider) == 0x000080, "Member 'UModioUISubsystem::ModEnabledStateDataProvider' has a wrong offset!");
static_assert(offsetof(UModioUISubsystem, ModRatingStateProvider) == 0x000088, "Member 'UModioUISubsystem::ModRatingStateProvider' has a wrong offset!");

// Class ModioUICore.ModioUIModInfoReceiverLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUIModInfoReceiverLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DeregisterModInfoReceiver(class UObject* ObjectToDeregister, EModioUIModInfoEventType EventType);
	static void RegisterModInfoReceiver(class UObject* ObjectToRegister, EModioUIModInfoEventType EventType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIModInfoReceiverLibrary">();
	}
	static class UModioUIModInfoReceiverLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIModInfoReceiverLibrary>();
	}
};
static_assert(alignof(UModioUIModInfoReceiverLibrary) == 0x000008, "Wrong alignment on UModioUIModInfoReceiverLibrary");
static_assert(sizeof(UModioUIModInfoReceiverLibrary) == 0x000028, "Wrong size on UModioUIModInfoReceiverLibrary");

// Class ModioUICore.ModioUIModListViewInterface
// 0x0000 (0x0000 - 0x0000)
class IModioUIModListViewInterface final
{
public:
	void SetModSelectionByID(const struct FModioModID& ModId);
	void SetModsFromModCollectionEntryArray(const TArray<struct FModioModCollectionEntry>& inArray, bool bAddToExisting);
	void SetModsFromModInfoArray(const TArray<struct FModioModInfo>& inArray, bool bAddToExisting);
	void SetModsFromModInfoList(const struct FModioModInfoList& InList, bool bAddToExisting);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIModListViewInterface">();
	}
	static class IModioUIModListViewInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIModListViewInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIModListViewInterface) == 0x000001, "Wrong alignment on IModioUIModListViewInterface");
static_assert(sizeof(IModioUIModListViewInterface) == 0x000001, "Wrong size on IModioUIModListViewInterface");

// Class ModioUICore.ModioUIModManagementEventReceiver
// 0x0000 (0x0000 - 0x0000)
class IModioUIModManagementEventReceiver final
{
public:
	void OnModManagementEvent(const struct FModioModManagementEvent& Event);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIModManagementEventReceiver">();
	}
	static class IModioUIModManagementEventReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIModManagementEventReceiver>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIModManagementEventReceiver) == 0x000001, "Wrong alignment on IModioUIModManagementEventReceiver");
static_assert(sizeof(IModioUIModManagementEventReceiver) == 0x000001, "Wrong size on IModioUIModManagementEventReceiver");

// Class ModioUICore.ModioModManagementEventReceiverLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioModManagementEventReceiverLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DeregisterModManagementEventReceiver(class UObject* ObjectToDeregister);
	static void RegisterModManagementEventReceiver(class UObject* ObjectToRegister);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModManagementEventReceiverLibrary">();
	}
	static class UModioModManagementEventReceiverLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModManagementEventReceiverLibrary>();
	}
};
static_assert(alignof(UModioModManagementEventReceiverLibrary) == 0x000008, "Wrong alignment on UModioModManagementEventReceiverLibrary");
static_assert(sizeof(UModioModManagementEventReceiverLibrary) == 0x000028, "Wrong size on UModioModManagementEventReceiverLibrary");

// Class ModioUICore.ModioUIModTagSelector
// 0x0000 (0x0000 - 0x0000)
class IModioUIModTagSelector final
{
public:
	void AddTagSelectionChangedHandler(const TDelegate<void()>& Handler);
	void ClearSelectedTags();
	bool GetAllowHiddenTags();
	bool GetAllowLockedTags();
	TArray<class FString> GetSelectedTags();
	void RemoveTagSelectionChangedHandler(const TDelegate<void()>& Handler);
	void SetAvailableTagsFromBoundModTagOptions(const TScriptInterface<class IModioModTagOptionsUIDetails>& InOptions);
	void SetAvailableTagsFromModTagOptions(const struct FModioModTagOptions& InOptions);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIModTagSelector">();
	}
	static class IModioUIModTagSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIModTagSelector>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIModTagSelector) == 0x000001, "Wrong alignment on IModioUIModTagSelector");
static_assert(sizeof(IModioUIModTagSelector) == 0x000001, "Wrong size on IModioUIModTagSelector");

// Class ModioUICore.ModioUIObjectListWidget
// 0x0000 (0x0000 - 0x0000)
class IModioUIObjectListWidget final
{
public:
	void AddObjectWidgetCreatedHandler(const TDelegate<void(class UWidget* ObjectWidget, class UObject* Object)>& Handler);
	class UWidget* GetFirstEntryWidget();
	TArray<class UObject*> GetObjects();
	void RemoveObjectWidgetCreatedHandler(const TDelegate<void(class UWidget* ObjectWidget, class UObject* Object)>& Handler);
	void SetObjects(const TArray<class UObject*>& InObjects);

	class UObject* GetObjectAt(int32 Index_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIObjectListWidget">();
	}
	static class IModioUIObjectListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIObjectListWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIObjectListWidget) == 0x000001, "Wrong alignment on IModioUIObjectListWidget");
static_assert(sizeof(IModioUIObjectListWidget) == 0x000001, "Wrong size on IModioUIObjectListWidget");

// Class ModioUICore.ModioUIObjectSelector
// 0x0000 (0x0000 - 0x0000)
class IModioUIObjectSelector final
{
public:
	void AddSelectionChangedHandler(const TDelegate<void(class UObject* SelectedValue)>& Handler);
	void ClearSelectedValues();
	int32 GetLastSelectionIndex();
	bool GetMultiSelectionAllowed();
	int32 GetNumEntries();
	TArray<class UObject*> GetSelectedValues();
	class UObject* GetSingleSelectedValue();
	int32 GetSingleSelectionIndex();
	void RemoveSelectionChangedHandler(const TDelegate<void(class UObject* SelectedValue)>& Handler);
	void SetListEntryWidgetClass(TSubclassOf<class UWidget> InNewEntryClass);
	void SetMultiSelectionAllowed(bool bMultiSelectionAllowed);
	void SetSelectedStateForIndex(int32 Index_0, bool bNewSelectionState, bool bEmitSelectionEvent);
	void SetSelectedStateForValue(class UObject* Value, bool bNewSelectionState, bool bEmitSelectionEvent);
	void SetSingleSelectionByIndex(int32 Index_0, bool bEmitSelectionEvent);
	void SetSingleSelectionByValue(class UObject* Value, bool bEmitSelectionEvent);
	void SetValues(const TArray<class UObject*>& InValues);

	int32 GetIndexForValue(class UObject* Value) const;
	class UUserWidget* GetWidgetForValue(class UObject* Value) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIObjectSelector">();
	}
	static class IModioUIObjectSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIObjectSelector>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIObjectSelector) == 0x000001, "Wrong alignment on IModioUIObjectSelector");
static_assert(sizeof(IModioUIObjectSelector) == 0x000001, "Wrong size on IModioUIObjectSelector");

// Class ModioUICore.ModioUIProgressWidget
// 0x0000 (0x0000 - 0x0000)
class IModioUIProgressWidget final
{
public:
	void AddValueChangedHandler(const TDelegate<void(float NewValue)>& Handler);
	void ClearColorOverride();
	float GetProgress();
	void RemoveValueChangedHandler(const TDelegate<void(float NewValue)>& Handler);
	void SetColorOverride(const struct FLinearColor& Override);
	void SetMarquee(bool bNewIsMarquee);
	void SetProgress(float NewProgressValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIProgressWidget">();
	}
	static class IModioUIProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIProgressWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIProgressWidget) == 0x000001, "Wrong alignment on IModioUIProgressWidget");
static_assert(sizeof(IModioUIProgressWidget) == 0x000001, "Wrong size on IModioUIProgressWidget");

// Class ModioUICore.ModioUISelectableWidget
// 0x0000 (0x0000 - 0x0000)
class IModioUISelectableWidget final
{
public:
	void AddSelectedStateChangedHandler(const TDelegate<void(class UObject* SelectionContext, bool bNewSelectedState)>& Handler);
	void GetSelectable(bool* bIsSelectable);
	void GetSelectedState(bool* bCurrentSelectedState);
	void GetToggleable(bool* bIsToggleable);
	void RemoveSelectedStateChangedHandler(const TDelegate<void(class UObject* SelectionContext, bool bNewSelectedState)>& Handler);
	void SetSelectable(bool bNewSelectableState);
	void SetSelectedState(bool bNewSelectedState);
	void SetToggleable(bool bNewToggleableState);
	void ToggleSelectedState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUISelectableWidget">();
	}
	static class IModioUISelectableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUISelectableWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUISelectableWidget) == 0x000001, "Wrong alignment on IModioUISelectableWidget");
static_assert(sizeof(IModioUISelectableWidget) == 0x000001, "Wrong size on IModioUISelectableWidget");

// Class ModioUICore.ModioUIStringInputWidget
// 0x0000 (0x0000 - 0x0000)
class IModioUIStringInputWidget final
{
public:
	void AddTextChangedHandler(const TDelegate<void(class UObject* Context, const class FText& Text)>& Handler);
	void AddTextCommittedHandler(const TDelegate<void(class UObject* Context, const class FText& Text, ETextCommit CommitMethod)>& Handler);
	class FString GatherInput();
	void RemoveTextChangedHandler(const TDelegate<void(class UObject* Context, const class FText& Text)>& Handler);
	void RemoveTextCommittedHandler(const TDelegate<void(class UObject* Context, const class FText& Text, ETextCommit CommitMethod)>& Handler);
	void SetHint(const class FText& HintText);
	void SetInput(const class FString& Input);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIStringInputWidget">();
	}
	static class IModioUIStringInputWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIStringInputWidget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIStringInputWidget) == 0x000001, "Wrong alignment on IModioUIStringInputWidget");
static_assert(sizeof(IModioUIStringInputWidget) == 0x000001, "Wrong size on IModioUIStringInputWidget");

// Class ModioUICore.ModioUISubscriptionsChangedReceiver
// 0x0000 (0x0000 - 0x0000)
class IModioUISubscriptionsChangedReceiver final
{
public:
	void OnSubscriptionsChanged(const struct FModioModID& ModId, bool bNewSubscriptionState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUISubscriptionsChangedReceiver">();
	}
	static class IModioUISubscriptionsChangedReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUISubscriptionsChangedReceiver>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUISubscriptionsChangedReceiver) == 0x000001, "Wrong alignment on IModioUISubscriptionsChangedReceiver");
static_assert(sizeof(IModioUISubscriptionsChangedReceiver) == 0x000001, "Wrong size on IModioUISubscriptionsChangedReceiver");

// Class ModioUICore.ModioUISubscriptionsChangedReceiverLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUISubscriptionsChangedReceiverLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DeregisterSubscriptionsChangedReceiver(class UObject* ObjectToDeregister);
	static void RegisterSubscriptionsChangedReceiver(class UObject* ObjectToRegister);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUISubscriptionsChangedReceiverLibrary">();
	}
	static class UModioUISubscriptionsChangedReceiverLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUISubscriptionsChangedReceiverLibrary>();
	}
};
static_assert(alignof(UModioUISubscriptionsChangedReceiverLibrary) == 0x000008, "Wrong alignment on UModioUISubscriptionsChangedReceiverLibrary");
static_assert(sizeof(UModioUISubscriptionsChangedReceiverLibrary) == 0x000028, "Wrong size on UModioUISubscriptionsChangedReceiverLibrary");

// Class ModioUICore.ModioUISupportsCustomNavigation
// 0x0000 (0x0000 - 0x0000)
class IModioUISupportsCustomNavigation final
{
public:
	void SetNavigationDelegate(uint8 Context, const TDelegate<void(EUINavigation Navigation)>& ContentNavigationDelegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUISupportsCustomNavigation">();
	}
	static class IModioUISupportsCustomNavigation* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUISupportsCustomNavigation>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUISupportsCustomNavigation) == 0x000001, "Wrong alignment on IModioUISupportsCustomNavigation");
static_assert(sizeof(IModioUISupportsCustomNavigation) == 0x000001, "Wrong size on IModioUISupportsCustomNavigation");

// Class ModioUICore.ModioUITextValidator
// 0x0000 (0x0000 - 0x0000)
class IModioUITextValidator final
{
public:
	void AddTextValidationCompletedHandler(const TDelegate<void(bool bIsValid)>& Handler);
	void GetTextValidationRules(TArray<struct FModioTextValidationRule>* Rules);
	void RemoveTextValidationCompletedHandler(const TDelegate<void(bool bIsValid)>& Handler);
	void SetValidationError(const class FText& ErrorText);
	bool ValidateText(const class FText& inputText, class FText* ValidationMessageText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUITextValidator">();
	}
	static class IModioUITextValidator* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUITextValidator>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUITextValidator) == 0x000001, "Wrong alignment on IModioUITextValidator");
static_assert(sizeof(IModioUITextValidator) == 0x000001, "Wrong size on IModioUITextValidator");

// Class ModioUICore.ModioUIInputValidationLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUIInputValidationLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool DefaultValidateText(TScriptInterface<class IModioUITextValidator> TargetObject, const class FText& inputText, class FText* ValidationMessageText);
	static bool ValidateAllLetters(const class FText& TextToValidate);
	static bool ValidateAllNumeric(const class FText& TextToValidate);
	static bool ValidateAlphanumeric(const class FText& TextToValidate);
	static bool ValidateEmailAddress(const class FText& TextToValidate);
	static bool ValidateLength(const class FText& TextToValidate, int32 DesiredMaximumLength, int32 DesiredMinimumLength);
	static bool ValidateNotBlank(const class FText& TextToValidate);
	static bool ValidateNotEmpty(const class FText& TextToValidate);
	static bool ValidateNoWhitespace(const class FText& TextToValidate);
	static bool ValidateUsingRule(const struct FModioTextValidationRule& Rule, const class FText& TextToValidate, class FText* ValidationMessageText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIInputValidationLibrary">();
	}
	static class UModioUIInputValidationLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIInputValidationLibrary>();
	}
};
static_assert(alignof(UModioUIInputValidationLibrary) == 0x000008, "Wrong alignment on UModioUIInputValidationLibrary");
static_assert(sizeof(UModioUIInputValidationLibrary) == 0x000028, "Wrong size on UModioUIInputValidationLibrary");

// Class ModioUICore.ModioUITokenPackListInterface
// 0x0000 (0x0000 - 0x0000)
class IModioUITokenPackListInterface final
{
public:
	void SetTokenPackSelectionByID(const struct FModioTokenPackID& TokenPackID);
	void SetTokenPacksFromTokenPackArray(const TArray<struct FModioTokenPack>& inArray, bool bAddToExisting);
	void SetTokenPacksFromTokenPackList(const struct FModioTokenPackList& InList, bool bAddToExisting);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUITokenPackListInterface">();
	}
	static class IModioUITokenPackListInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUITokenPackListInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUITokenPackListInterface) == 0x000001, "Wrong alignment on IModioUITokenPackListInterface");
static_assert(sizeof(IModioUITokenPackListInterface) == 0x000001, "Wrong size on IModioUITokenPackListInterface");

// Class ModioUICore.ModioUITokenPackReceiver
// 0x0000 (0x0000 - 0x0000)
class IModioUITokenPackReceiver final
{
public:
	void OnListAllTokenPacksRequestCompleted(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalTokenPackList& List);
	void OnTokenPackRequestCompleted(const struct FModioTokenPackID& TokenPackID, const struct FModioErrorCode& ErrorCode, const struct FModioOptionalTokenPack& Info);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUITokenPackReceiver">();
	}
	static class IModioUITokenPackReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUITokenPackReceiver>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUITokenPackReceiver) == 0x000001, "Wrong alignment on IModioUITokenPackReceiver");
static_assert(sizeof(IModioUITokenPackReceiver) == 0x000001, "Wrong size on IModioUITokenPackReceiver");

// Class ModioUICore.ModioUITokenPackReceiverLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUITokenPackReceiverLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DeregisterTokenPackReceiver(class UObject* ObjectToDeregister, EModioUITokenPackEventType EventType);
	static void RegisterTokenPackReceiver(class UObject* ObjectToRegister, EModioUITokenPackEventType EventType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUITokenPackReceiverLibrary">();
	}
	static class UModioUITokenPackReceiverLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUITokenPackReceiverLibrary>();
	}
};
static_assert(alignof(UModioUITokenPackReceiverLibrary) == 0x000008, "Wrong alignment on UModioUITokenPackReceiverLibrary");
static_assert(sizeof(UModioUITokenPackReceiverLibrary) == 0x000028, "Wrong size on UModioUITokenPackReceiverLibrary");

// Class ModioUICore.ModioUIUserAvatarDownloadCompletedReceiver
// 0x0000 (0x0000 - 0x0000)
class IModioUIUserAvatarDownloadCompletedReceiver final
{
public:
	void OnUserAvatarDownloadCompleted(const struct FModioErrorCode& ErrorCode, const struct FModioOptionalImage& Image);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIUserAvatarDownloadCompletedReceiver">();
	}
	static class IModioUIUserAvatarDownloadCompletedReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIUserAvatarDownloadCompletedReceiver>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIUserAvatarDownloadCompletedReceiver) == 0x000001, "Wrong alignment on IModioUIUserAvatarDownloadCompletedReceiver");
static_assert(sizeof(IModioUIUserAvatarDownloadCompletedReceiver) == 0x000001, "Wrong size on IModioUIUserAvatarDownloadCompletedReceiver");

// Class ModioUICore.ModioUIUserAvatarDownloadCompletedReceiverLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUIUserAvatarDownloadCompletedReceiverLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DeregisterUserAvatarDownloadCompletedReceiver(class UObject* ObjectToDeregister);
	static void RegisterUserAvatarDownloadCompletedReceiver(class UObject* ObjectToRegister);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIUserAvatarDownloadCompletedReceiverLibrary">();
	}
	static class UModioUIUserAvatarDownloadCompletedReceiverLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIUserAvatarDownloadCompletedReceiverLibrary>();
	}
};
static_assert(alignof(UModioUIUserAvatarDownloadCompletedReceiverLibrary) == 0x000008, "Wrong alignment on UModioUIUserAvatarDownloadCompletedReceiverLibrary");
static_assert(sizeof(UModioUIUserAvatarDownloadCompletedReceiverLibrary) == 0x000028, "Wrong size on UModioUIUserAvatarDownloadCompletedReceiverLibrary");

// Class ModioUICore.ModioUIUserChangedReceiver
// 0x0000 (0x0000 - 0x0000)
class IModioUIUserChangedReceiver final
{
public:
	void OnUserChanged(const struct FModioOptionalUser& NewUser);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIUserChangedReceiver">();
	}
	static class IModioUIUserChangedReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIUserChangedReceiver>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIUserChangedReceiver) == 0x000001, "Wrong alignment on IModioUIUserChangedReceiver");
static_assert(sizeof(IModioUIUserChangedReceiver) == 0x000001, "Wrong size on IModioUIUserChangedReceiver");

// Class ModioUICore.ModioUIUserChangedReceiverLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUIUserChangedReceiverLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DeregisterUserChangedReceiver(class UObject* ObjectToDeregister);
	static void RegisterUserChangedReceiver(class UObject* ObjectToRegister);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIUserChangedReceiverLibrary">();
	}
	static class UModioUIUserChangedReceiverLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIUserChangedReceiverLibrary>();
	}
};
static_assert(alignof(UModioUIUserChangedReceiverLibrary) == 0x000008, "Wrong alignment on UModioUIUserChangedReceiverLibrary");
static_assert(sizeof(UModioUIUserChangedReceiverLibrary) == 0x000028, "Wrong size on UModioUIUserChangedReceiverLibrary");

// Class ModioUICore.ModioUIWalletBalanceUpdatedEventReceiver
// 0x0000 (0x0000 - 0x0000)
class IModioUIWalletBalanceUpdatedEventReceiver final
{
public:
	void OnWalletBalanceUpdated(const struct FModioUnsigned64& WalletBalance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIWalletBalanceUpdatedEventReceiver">();
	}
	static class IModioUIWalletBalanceUpdatedEventReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIWalletBalanceUpdatedEventReceiver>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUIWalletBalanceUpdatedEventReceiver) == 0x000001, "Wrong alignment on IModioUIWalletBalanceUpdatedEventReceiver");
static_assert(sizeof(IModioUIWalletBalanceUpdatedEventReceiver) == 0x000001, "Wrong size on IModioUIWalletBalanceUpdatedEventReceiver");

// Class ModioUICore.ModioUIWalletBalanceUpdatedEventReceiverLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUIWalletBalanceUpdatedEventReceiverLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DeregisterWalletBalanceUpdatedEventReceiver(class UObject* ObjectToDeregister);
	static void RegisterWalletBalanceUpdatedEventReceiver(class UObject* ObjectToRegister);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIWalletBalanceUpdatedEventReceiverLibrary">();
	}
	static class UModioUIWalletBalanceUpdatedEventReceiverLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIWalletBalanceUpdatedEventReceiverLibrary>();
	}
};
static_assert(alignof(UModioUIWalletBalanceUpdatedEventReceiverLibrary) == 0x000008, "Wrong alignment on UModioUIWalletBalanceUpdatedEventReceiverLibrary");
static_assert(sizeof(UModioUIWalletBalanceUpdatedEventReceiverLibrary) == 0x000028, "Wrong size on UModioUIWalletBalanceUpdatedEventReceiverLibrary");

// Class ModioUICore.ModioUserUIDetails
// 0x0000 (0x0000 - 0x0000)
class IModioUserUIDetails final
{
public:
	struct FModioUser GetFullUser();
	struct FModioUserID GetUserID();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUserUIDetails">();
	}
	static class IModioUserUIDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUserUIDetails>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioUserUIDetails) == 0x000001, "Wrong alignment on IModioUserUIDetails");
static_assert(sizeof(IModioUserUIDetails) == 0x000001, "Wrong size on IModioUserUIDetails");

// Class ModioUICore.ModRatingStateProvider
// 0x0000 (0x0000 - 0x0000)
class IModRatingStateProvider final
{
public:
	EModioRating QueryModRating(int64 ModId);
	bool RequestModRatingChange(int64 ID, EModioRating NewRating);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModRatingStateProvider">();
	}
	static class IModRatingStateProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModRatingStateProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModRatingStateProvider) == 0x000001, "Wrong alignment on IModRatingStateProvider");
static_assert(sizeof(IModRatingStateProvider) == 0x000001, "Wrong size on IModRatingStateProvider");

// Class ModioUICore.LinearColorRefLibrary
// 0x0000 (0x0028 - 0x0028)
class ULinearColorRefLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddColorChangeHandler(const TDelegate<void()>& Handler);
	static TArray<class FName> GetValidColorKeys();
	static void RemoveColorChangeHandler(const TDelegate<void()>& Handler);
	static struct FLinearColor Resolve(const struct FLinearColorRef& Target, bool* bResolved);
	static struct FLinearColor ResolveOverride(const struct FLinearColorRefOverride& Target, bool* bOverrideSet);
	static struct FLinearColor ResolveOverrideAsExec(const struct FLinearColorRefOverride& Target, bool* bOverrideSet);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LinearColorRefLibrary">();
	}
	static class ULinearColorRefLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULinearColorRefLibrary>();
	}
};
static_assert(alignof(ULinearColorRefLibrary) == 0x000008, "Wrong alignment on ULinearColorRefLibrary");
static_assert(sizeof(ULinearColorRefLibrary) == 0x000028, "Wrong size on ULinearColorRefLibrary");

// Class ModioUICore.ModioButtonWidget
// 0x00C0 (0x1670 - 0x15B0)
class UModioButtonWidget : public UCommonButtonBase
{
public:
	uint8                                         Pad_15B0[0x38];                                    // 0x15B0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* ClickContext)> OnClicked;                           // 0x15E8(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	class UObject*                                DataSource;                                        // 0x15F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFocusOnHover;                                     // 0x1600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1601[0x37];                                    // 0x1601(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* FocusContext, const struct FFocusEvent& InFocusEvent, bool bIsFocused)> OnModioFocusPathChanged; // 0x1638(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UObject* SelectionContext, bool bNewSelectedState)> OnSelected; // 0x1648(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UObject* HoverContext, bool bHoveredState)> OnHoverStateChanged; // 0x1658(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1668[0x8];                                     // 0x1668(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioButtonWidget">();
	}
	static class UModioButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioButtonWidget>();
	}
};
static_assert(alignof(UModioButtonWidget) == 0x000010, "Wrong alignment on UModioButtonWidget");
static_assert(sizeof(UModioButtonWidget) == 0x001670, "Wrong size on UModioButtonWidget");
static_assert(offsetof(UModioButtonWidget, OnClicked) == 0x0015E8, "Member 'UModioButtonWidget::OnClicked' has a wrong offset!");
static_assert(offsetof(UModioButtonWidget, DataSource) == 0x0015F8, "Member 'UModioButtonWidget::DataSource' has a wrong offset!");
static_assert(offsetof(UModioButtonWidget, bFocusOnHover) == 0x001600, "Member 'UModioButtonWidget::bFocusOnHover' has a wrong offset!");
static_assert(offsetof(UModioButtonWidget, OnModioFocusPathChanged) == 0x001638, "Member 'UModioButtonWidget::OnModioFocusPathChanged' has a wrong offset!");
static_assert(offsetof(UModioButtonWidget, OnSelected) == 0x001648, "Member 'UModioButtonWidget::OnSelected' has a wrong offset!");
static_assert(offsetof(UModioButtonWidget, OnHoverStateChanged) == 0x001658, "Member 'UModioButtonWidget::OnHoverStateChanged' has a wrong offset!");

// Class ModioUICore.ModioCommandEntry
// 0x0028 (0x0498 - 0x0470)
class UModioCommandEntry final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x28];                                     // 0x0470(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleInnerButtonClicked(class UObject* ClickContext);

	TScriptInterface<class IModioUIClickableWidget> GetClickableWidget() const;
	TScriptInterface<class IModioUIImageDisplayWidget> GetIconWidget() const;
	TScriptInterface<class IModioUIHasTextWidget> GetLabelWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioCommandEntry">();
	}
	static class UModioCommandEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCommandEntry>();
	}
};
static_assert(alignof(UModioCommandEntry) == 0x000008, "Wrong alignment on UModioCommandEntry");
static_assert(sizeof(UModioCommandEntry) == 0x000498, "Wrong size on UModioCommandEntry");

// Class ModioUICore.ModioCommandMenu
// 0x0028 (0x0498 - 0x0470)
class UModioCommandMenu final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x8];                                      // 0x0470(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        CommandObjects;                                    // 0x0478(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_488[0x10];                                     // 0x0488(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCommandSelected(class UObject* SelectedCommandObject);

	TScriptInterface<class IModioUIObjectSelector> GetSelectorWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioCommandMenu">();
	}
	static class UModioCommandMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCommandMenu>();
	}
};
static_assert(alignof(UModioCommandMenu) == 0x000008, "Wrong alignment on UModioCommandMenu");
static_assert(sizeof(UModioCommandMenu) == 0x000498, "Wrong size on UModioCommandMenu");
static_assert(offsetof(UModioCommandMenu, CommandObjects) == 0x000478, "Member 'UModioCommandMenu::CommandObjects' has a wrong offset!");

// Class ModioUICore.ModioUserDisplay
// 0x0000 (0x0470 - 0x0470)
class UModioUserDisplay : public UModioUIComponentBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUserDisplay">();
	}
	static class UModioUserDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUserDisplay>();
	}
};
static_assert(alignof(UModioUserDisplay) == 0x000008, "Wrong alignment on UModioUserDisplay");
static_assert(sizeof(UModioUserDisplay) == 0x000470, "Wrong size on UModioUserDisplay");

// Class ModioUICore.ModioCurrentUserAvatarWidget
// 0x02C0 (0x0730 - 0x0470)
class UModioCurrentUserAvatarWidget final : public UModioUserDisplay
{
public:
	uint8                                         Pad_470[0x30];                                     // 0x0470(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            UnloadedBrush;                                     // 0x04A0(0x00D0)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            ErroredBrush;                                      // 0x0570(0x00D0)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            LoadingBrush;                                      // 0x0640(0x00D0)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_710[0x20];                                     // 0x0710(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TScriptInterface<class IModioUIImageDisplayWidget> GetAvatarImageWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioCurrentUserAvatarWidget">();
	}
	static class UModioCurrentUserAvatarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCurrentUserAvatarWidget>();
	}
};
static_assert(alignof(UModioCurrentUserAvatarWidget) == 0x000010, "Wrong alignment on UModioCurrentUserAvatarWidget");
static_assert(sizeof(UModioCurrentUserAvatarWidget) == 0x000730, "Wrong size on UModioCurrentUserAvatarWidget");
static_assert(offsetof(UModioCurrentUserAvatarWidget, UnloadedBrush) == 0x0004A0, "Member 'UModioCurrentUserAvatarWidget::UnloadedBrush' has a wrong offset!");
static_assert(offsetof(UModioCurrentUserAvatarWidget, ErroredBrush) == 0x000570, "Member 'UModioCurrentUserAvatarWidget::ErroredBrush' has a wrong offset!");
static_assert(offsetof(UModioCurrentUserAvatarWidget, LoadingBrush) == 0x000640, "Member 'UModioCurrentUserAvatarWidget::LoadingBrush' has a wrong offset!");

// Class ModioUICore.ModioDefaultBorder
// 0x0000 (0x0340 - 0x0340)
class UModioDefaultBorder final : public UBorder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultBorder">();
	}
	static class UModioDefaultBorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultBorder>();
	}
};
static_assert(alignof(UModioDefaultBorder) == 0x000010, "Wrong alignment on UModioDefaultBorder");
static_assert(sizeof(UModioDefaultBorder) == 0x000340, "Wrong size on UModioDefaultBorder");

// Class ModioUICore.ModioDefaultCheckBox
// 0x00B0 (0x0D60 - 0x0CB0)
class UModioDefaultCheckBox final : public UCheckBox
{
public:
	uint8                                         Pad_CB0[0x10];                                     // 0x0CB0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                ContentPadding;                                    // 0x0CC0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD0[0x68];                                     // 0x0CD0(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UWidget>                    LabelClass;                                        // 0x0D38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                LabelWidget;                                       // 0x0D40(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   LabelText;                                         // 0x0D48(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)

public:
	void HandleOnCheckStateChanged(bool bIsChecked);
	void SetHovered(bool bHovered);
	void SetLabel(const class FText& InLabelText);

	struct FMargin GetCheckboxContentPadding() const;
	class FText GetLabel() const;
	class FText GetLabelTextBlockText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultCheckBox">();
	}
	static class UModioDefaultCheckBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultCheckBox>();
	}
};
static_assert(alignof(UModioDefaultCheckBox) == 0x000010, "Wrong alignment on UModioDefaultCheckBox");
static_assert(sizeof(UModioDefaultCheckBox) == 0x000D60, "Wrong size on UModioDefaultCheckBox");
static_assert(offsetof(UModioDefaultCheckBox, ContentPadding) == 0x000CC0, "Member 'UModioDefaultCheckBox::ContentPadding' has a wrong offset!");
static_assert(offsetof(UModioDefaultCheckBox, LabelClass) == 0x000D38, "Member 'UModioDefaultCheckBox::LabelClass' has a wrong offset!");
static_assert(offsetof(UModioDefaultCheckBox, LabelWidget) == 0x000D40, "Member 'UModioDefaultCheckBox::LabelWidget' has a wrong offset!");
static_assert(offsetof(UModioDefaultCheckBox, LabelText) == 0x000D48, "Member 'UModioDefaultCheckBox::LabelText' has a wrong offset!");

// Class ModioUICore.ModioDefaultCodeInputTextBox
// 0x0680 (0x0800 - 0x0180)
class UModioDefaultCodeInputTextBox final : public UWidget
{
public:
	uint8                                         Pad_180[0x20];                                     // 0x0180(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioDefaultCodeInputTextBoxStyle     CodeInputStyle;                                    // 0x01A0(0x05F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ETextFlowDirection                            TextFlowDirection;                                 // 0x0790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVirtualKeyboardOptions                VirtualKeyboardOptions;                            // 0x0791(0x0001)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EVirtualKeyboardTrigger                       VirtualKeyboardTrigger;                            // 0x0792(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVirtualKeyboardDismissAction                 VirtualKeyboardDismissAction;                      // 0x0793(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_794[0x4];                                      // 0x0794(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* Context, const class FText& Text, ETextCommit CommitMethod)> OnModioTextCommitted; // 0x0798(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UObject* Context, const class FText& Text)> OnModioTextChanged; // 0x07A8(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	int32                                         NumberOfCharacters;                                // 0x07B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7BC[0x1C];                                     // 0x07BC(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnCodeSubmitDynamic;                               // 0x07D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E8[0x18];                                     // 0x07E8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TScriptInterface<class IModioUIHasTextWidget> GetValidationErrorWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultCodeInputTextBox">();
	}
	static class UModioDefaultCodeInputTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultCodeInputTextBox>();
	}
};
static_assert(alignof(UModioDefaultCodeInputTextBox) == 0x000010, "Wrong alignment on UModioDefaultCodeInputTextBox");
static_assert(sizeof(UModioDefaultCodeInputTextBox) == 0x000800, "Wrong size on UModioDefaultCodeInputTextBox");
static_assert(offsetof(UModioDefaultCodeInputTextBox, CodeInputStyle) == 0x0001A0, "Member 'UModioDefaultCodeInputTextBox::CodeInputStyle' has a wrong offset!");
static_assert(offsetof(UModioDefaultCodeInputTextBox, TextFlowDirection) == 0x000790, "Member 'UModioDefaultCodeInputTextBox::TextFlowDirection' has a wrong offset!");
static_assert(offsetof(UModioDefaultCodeInputTextBox, VirtualKeyboardOptions) == 0x000791, "Member 'UModioDefaultCodeInputTextBox::VirtualKeyboardOptions' has a wrong offset!");
static_assert(offsetof(UModioDefaultCodeInputTextBox, VirtualKeyboardTrigger) == 0x000792, "Member 'UModioDefaultCodeInputTextBox::VirtualKeyboardTrigger' has a wrong offset!");
static_assert(offsetof(UModioDefaultCodeInputTextBox, VirtualKeyboardDismissAction) == 0x000793, "Member 'UModioDefaultCodeInputTextBox::VirtualKeyboardDismissAction' has a wrong offset!");
static_assert(offsetof(UModioDefaultCodeInputTextBox, OnModioTextCommitted) == 0x000798, "Member 'UModioDefaultCodeInputTextBox::OnModioTextCommitted' has a wrong offset!");
static_assert(offsetof(UModioDefaultCodeInputTextBox, OnModioTextChanged) == 0x0007A8, "Member 'UModioDefaultCodeInputTextBox::OnModioTextChanged' has a wrong offset!");
static_assert(offsetof(UModioDefaultCodeInputTextBox, NumberOfCharacters) == 0x0007B8, "Member 'UModioDefaultCodeInputTextBox::NumberOfCharacters' has a wrong offset!");
static_assert(offsetof(UModioDefaultCodeInputTextBox, OnCodeSubmitDynamic) == 0x0007D8, "Member 'UModioDefaultCodeInputTextBox::OnCodeSubmitDynamic' has a wrong offset!");

// Class ModioUICore.ModioDefaultEditableTextBox
// 0x0050 (0x10F0 - 0x10A0)
class UModioDefaultEditableTextBox final : public UEditableTextBox
{
public:
	uint8                                         Pad_10A0[0x20];                                    // 0x10A0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* Context, const class FText& Text, ETextCommit CommitMethod)> OnModioTextCommitted; // 0x10C0(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UObject* Context, const class FText& Text)> OnModioTextChanged; // 0x10D0(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UObject* FocusContext, const struct FFocusEvent& InFocusEvent, bool bIsFocused)> OnModioFocusPathChanged; // 0x10E0(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultEditableTextBox">();
	}
	static class UModioDefaultEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultEditableTextBox>();
	}
};
static_assert(alignof(UModioDefaultEditableTextBox) == 0x000010, "Wrong alignment on UModioDefaultEditableTextBox");
static_assert(sizeof(UModioDefaultEditableTextBox) == 0x0010F0, "Wrong size on UModioDefaultEditableTextBox");
static_assert(offsetof(UModioDefaultEditableTextBox, OnModioTextCommitted) == 0x0010C0, "Member 'UModioDefaultEditableTextBox::OnModioTextCommitted' has a wrong offset!");
static_assert(offsetof(UModioDefaultEditableTextBox, OnModioTextChanged) == 0x0010D0, "Member 'UModioDefaultEditableTextBox::OnModioTextChanged' has a wrong offset!");
static_assert(offsetof(UModioDefaultEditableTextBox, OnModioFocusPathChanged) == 0x0010E0, "Member 'UModioDefaultEditableTextBox::OnModioFocusPathChanged' has a wrong offset!");

// Class ModioUICore.ModioDefaultTextButton
// 0x0020 (0x1690 - 0x1670)
class UModioDefaultTextButton : public UModioButtonWidget
{
public:
	uint8                                         Pad_1670[0x8];                                     // 0x1670(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LabelText;                                         // 0x1678(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	TScriptInterface<class IModioUIHasTextWidget> GetLabelWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultTextButton">();
	}
	static class UModioDefaultTextButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultTextButton>();
	}
};
static_assert(alignof(UModioDefaultTextButton) == 0x000010, "Wrong alignment on UModioDefaultTextButton");
static_assert(sizeof(UModioDefaultTextButton) == 0x001690, "Wrong size on UModioDefaultTextButton");
static_assert(offsetof(UModioDefaultTextButton, LabelText) == 0x001678, "Member 'UModioDefaultTextButton::LabelText' has a wrong offset!");

// Class ModioUICore.ModioDefaultIconButton
// 0x0030 (0x16C0 - 0x1690)
class UModioDefaultIconButton final : public UModioDefaultTextButton
{
public:
	uint8                                         Pad_1690[0x20];                                    // 0x1690(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* LoadContext, bool bLoadSuccess)> OnLoadStateChanged; // 0x16B0(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	TScriptInterface<class IModioUIImageDisplayWidget> GetImageWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultIconButton">();
	}
	static class UModioDefaultIconButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultIconButton>();
	}
};
static_assert(alignof(UModioDefaultIconButton) == 0x000010, "Wrong alignment on UModioDefaultIconButton");
static_assert(sizeof(UModioDefaultIconButton) == 0x0016C0, "Wrong size on UModioDefaultIconButton");
static_assert(offsetof(UModioDefaultIconButton, OnLoadStateChanged) == 0x0016B0, "Member 'UModioDefaultIconButton::OnLoadStateChanged' has a wrong offset!");

// Class ModioUICore.ModioDefaultImage
// 0x0030 (0x0310 - 0x02E0)
class UModioDefaultImage final : public UImage
{
public:
	uint8                                         Pad_2E0[0x30];                                     // 0x02E0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultImage">();
	}
	static class UModioDefaultImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultImage>();
	}
};
static_assert(alignof(UModioDefaultImage) == 0x000010, "Wrong alignment on UModioDefaultImage");
static_assert(sizeof(UModioDefaultImage) == 0x000310, "Wrong size on UModioDefaultImage");

// Class ModioUICore.ModioDefaultModalDialogImpl
// 0x0030 (0x04A0 - 0x0470)
class UModioDefaultModalDialogImpl final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x8];                                      // 0x0470(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 ButtonIndex)> OnDialogButtonClicked;                         // 0x0478(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	bool                                          bUseGeneratedButtonContent;                        // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModioDialogButtonInfo>         DialogButtonData;                                  // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultModalDialogImpl">();
	}
	static class UModioDefaultModalDialogImpl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultModalDialogImpl>();
	}
};
static_assert(alignof(UModioDefaultModalDialogImpl) == 0x000008, "Wrong alignment on UModioDefaultModalDialogImpl");
static_assert(sizeof(UModioDefaultModalDialogImpl) == 0x0004A0, "Wrong size on UModioDefaultModalDialogImpl");
static_assert(offsetof(UModioDefaultModalDialogImpl, OnDialogButtonClicked) == 0x000478, "Member 'UModioDefaultModalDialogImpl::OnDialogButtonClicked' has a wrong offset!");
static_assert(offsetof(UModioDefaultModalDialogImpl, bUseGeneratedButtonContent) == 0x000488, "Member 'UModioDefaultModalDialogImpl::bUseGeneratedButtonContent' has a wrong offset!");
static_assert(offsetof(UModioDefaultModalDialogImpl, DialogButtonData) == 0x000490, "Member 'UModioDefaultModalDialogImpl::DialogButtonData' has a wrong offset!");

// Class ModioUICore.ModioDefaultModListView
// 0x0070 (0x0CE0 - 0x0C70)
class UModioDefaultModListView final : public UListView
{
public:
	uint8                                         Pad_C70[0x38];                                     // 0x0C70(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* SelectedValue)> OnSelectedValueChanged;             // 0x0CA8(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_CB8[0x28];                                     // 0x0CB8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultModListView">();
	}
	static class UModioDefaultModListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultModListView>();
	}
};
static_assert(alignof(UModioDefaultModListView) == 0x000010, "Wrong alignment on UModioDefaultModListView");
static_assert(sizeof(UModioDefaultModListView) == 0x000CE0, "Wrong size on UModioDefaultModListView");
static_assert(offsetof(UModioDefaultModListView, OnSelectedValueChanged) == 0x000CA8, "Member 'UModioDefaultModListView::OnSelectedValueChanged' has a wrong offset!");

// Class ModioUICore.ModioDefaultModTile
// 0x0068 (0x04D8 - 0x0470)
class UModioDefaultModTile final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x28];                                     // 0x0470(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* ClickContext)> OnClicked;                           // 0x0498(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bSelected;                                         // 0x04A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* SelectionContext, bool bNewSelectedState)> OnSelected; // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C0[0x8];                                      // 0x04C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* HoverContext, bool bHoveredState)> OnHoverStateChanged; // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	bool GetSelectedStateEx();
	void NotifyClicked();
	void NotifyHoverStateChanged(bool bNewHoveredState);
	void PopulateExtraOptionsCommands(TArray<class UObject*>* Commands, class UObject* Context);

	TScriptInterface<class IModioUICommandMenu> GetMoreOptionsMenuWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultModTile">();
	}
	static class UModioDefaultModTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultModTile>();
	}
};
static_assert(alignof(UModioDefaultModTile) == 0x000008, "Wrong alignment on UModioDefaultModTile");
static_assert(sizeof(UModioDefaultModTile) == 0x0004D8, "Wrong size on UModioDefaultModTile");
static_assert(offsetof(UModioDefaultModTile, OnClicked) == 0x000498, "Member 'UModioDefaultModTile::OnClicked' has a wrong offset!");
static_assert(offsetof(UModioDefaultModTile, bSelected) == 0x0004A8, "Member 'UModioDefaultModTile::bSelected' has a wrong offset!");
static_assert(offsetof(UModioDefaultModTile, OnSelected) == 0x0004B0, "Member 'UModioDefaultModTile::OnSelected' has a wrong offset!");
static_assert(offsetof(UModioDefaultModTile, OnHoverStateChanged) == 0x0004C8, "Member 'UModioDefaultModTile::OnHoverStateChanged' has a wrong offset!");

// Class ModioUICore.ModioDefaultModTileView
// 0x0060 (0x0D00 - 0x0CA0)
class UModioDefaultModTileView final : public UTileView
{
public:
	uint8                                         Pad_CA0[0x30];                                     // 0x0CA0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* SelectedValue)> OnSelectedValueChanged;             // 0x0CD0(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_CE0[0x20];                                     // 0x0CE0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultModTileView">();
	}
	static class UModioDefaultModTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultModTileView>();
	}
};
static_assert(alignof(UModioDefaultModTileView) == 0x000010, "Wrong alignment on UModioDefaultModTileView");
static_assert(sizeof(UModioDefaultModTileView) == 0x000D00, "Wrong size on UModioDefaultModTileView");
static_assert(offsetof(UModioDefaultModTileView, OnSelectedValueChanged) == 0x000CD0, "Member 'UModioDefaultModTileView::OnSelectedValueChanged' has a wrong offset!");

// Class ModioUICore.ModioDefaultMultiLineEditableTextBox
// 0x0040 (0x10E0 - 0x10A0)
class UModioDefaultMultiLineEditableTextBox final : public UMultiLineEditableTextBox
{
public:
	uint8                                         Pad_10A0[0x10];                                    // 0x10A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsCaretMovedWhenGainFocus;                         // 0x10B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SelectAllTextWhenFocused;                          // 0x10B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          RevertTextOnEscape;                                // 0x10B2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ClearKeyboardFocusOnCommit;                        // 0x10B3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SelectAllTextOnCommit;                             // 0x10B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AlwaysShowScrollbars;                              // 0x10B5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AllowMultiLine;                                    // 0x10B6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVirtualKeyboardTrigger                       VirtualKeyboardTrigger;                            // 0x10B7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextOverflowPolicy                           OverflowPolicy;                                    // 0x10B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10B9[0x7];                                     // 0x10B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* Context, const class FText& Text, ETextCommit CommitMethod)> OnModioTextCommitted; // 0x10C0(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UObject* Context, const class FText& Text)> OnModioTextChanged; // 0x10D0(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultMultiLineEditableTextBox">();
	}
	static class UModioDefaultMultiLineEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultMultiLineEditableTextBox>();
	}
};
static_assert(alignof(UModioDefaultMultiLineEditableTextBox) == 0x000010, "Wrong alignment on UModioDefaultMultiLineEditableTextBox");
static_assert(sizeof(UModioDefaultMultiLineEditableTextBox) == 0x0010E0, "Wrong size on UModioDefaultMultiLineEditableTextBox");
static_assert(offsetof(UModioDefaultMultiLineEditableTextBox, IsCaretMovedWhenGainFocus) == 0x0010B0, "Member 'UModioDefaultMultiLineEditableTextBox::IsCaretMovedWhenGainFocus' has a wrong offset!");
static_assert(offsetof(UModioDefaultMultiLineEditableTextBox, SelectAllTextWhenFocused) == 0x0010B1, "Member 'UModioDefaultMultiLineEditableTextBox::SelectAllTextWhenFocused' has a wrong offset!");
static_assert(offsetof(UModioDefaultMultiLineEditableTextBox, RevertTextOnEscape) == 0x0010B2, "Member 'UModioDefaultMultiLineEditableTextBox::RevertTextOnEscape' has a wrong offset!");
static_assert(offsetof(UModioDefaultMultiLineEditableTextBox, ClearKeyboardFocusOnCommit) == 0x0010B3, "Member 'UModioDefaultMultiLineEditableTextBox::ClearKeyboardFocusOnCommit' has a wrong offset!");
static_assert(offsetof(UModioDefaultMultiLineEditableTextBox, SelectAllTextOnCommit) == 0x0010B4, "Member 'UModioDefaultMultiLineEditableTextBox::SelectAllTextOnCommit' has a wrong offset!");
static_assert(offsetof(UModioDefaultMultiLineEditableTextBox, AlwaysShowScrollbars) == 0x0010B5, "Member 'UModioDefaultMultiLineEditableTextBox::AlwaysShowScrollbars' has a wrong offset!");
static_assert(offsetof(UModioDefaultMultiLineEditableTextBox, AllowMultiLine) == 0x0010B6, "Member 'UModioDefaultMultiLineEditableTextBox::AllowMultiLine' has a wrong offset!");
static_assert(offsetof(UModioDefaultMultiLineEditableTextBox, VirtualKeyboardTrigger) == 0x0010B7, "Member 'UModioDefaultMultiLineEditableTextBox::VirtualKeyboardTrigger' has a wrong offset!");
static_assert(offsetof(UModioDefaultMultiLineEditableTextBox, OverflowPolicy) == 0x0010B8, "Member 'UModioDefaultMultiLineEditableTextBox::OverflowPolicy' has a wrong offset!");
static_assert(offsetof(UModioDefaultMultiLineEditableTextBox, OnModioTextCommitted) == 0x0010C0, "Member 'UModioDefaultMultiLineEditableTextBox::OnModioTextCommitted' has a wrong offset!");
static_assert(offsetof(UModioDefaultMultiLineEditableTextBox, OnModioTextChanged) == 0x0010D0, "Member 'UModioDefaultMultiLineEditableTextBox::OnModioTextChanged' has a wrong offset!");

// Class ModioUICore.ModioDefaultObjectSelector
// 0x0070 (0x0CE0 - 0x0C70)
class UModioDefaultObjectSelector final : public UListView
{
public:
	uint8                                         Pad_C70[0x28];                                     // 0x0C70(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UWidget>                    MultipleSelectionListItemClass;                    // 0x0C98(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UObject* SelectedValue)> OnSelectedValueChanged;             // 0x0CA0(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_CB0[0x18];                                     // 0x0CB0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UWidget* ObjectWidget, class UObject* Object)> OnWidgetCreated; // 0x0CC8(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_CD8[0x8];                                      // 0x0CD8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEntryWidgetClicked(class UObject* Widget);

	class UUserWidget* GetEntryWidgetFromItem(const class UObject* Item) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultObjectSelector">();
	}
	static class UModioDefaultObjectSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultObjectSelector>();
	}
};
static_assert(alignof(UModioDefaultObjectSelector) == 0x000010, "Wrong alignment on UModioDefaultObjectSelector");
static_assert(sizeof(UModioDefaultObjectSelector) == 0x000CE0, "Wrong size on UModioDefaultObjectSelector");
static_assert(offsetof(UModioDefaultObjectSelector, MultipleSelectionListItemClass) == 0x000C98, "Member 'UModioDefaultObjectSelector::MultipleSelectionListItemClass' has a wrong offset!");
static_assert(offsetof(UModioDefaultObjectSelector, OnSelectedValueChanged) == 0x000CA0, "Member 'UModioDefaultObjectSelector::OnSelectedValueChanged' has a wrong offset!");
static_assert(offsetof(UModioDefaultObjectSelector, OnWidgetCreated) == 0x000CC8, "Member 'UModioDefaultObjectSelector::OnWidgetCreated' has a wrong offset!");

// Class ModioUICore.ModioDefaultProgressBar
// 0x0030 (0x04A0 - 0x0470)
class UModioDefaultProgressBar final : public UProgressBar
{
public:
	uint8                                         Pad_470[0x30];                                     // 0x0470(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultProgressBar">();
	}
	static class UModioDefaultProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultProgressBar>();
	}
};
static_assert(alignof(UModioDefaultProgressBar) == 0x000010, "Wrong alignment on UModioDefaultProgressBar");
static_assert(sizeof(UModioDefaultProgressBar) == 0x0004A0, "Wrong size on UModioDefaultProgressBar");

// Class ModioUICore.ModioDefaultScrollBox
// 0x0020 (0x0D10 - 0x0CF0)
class UModioDefaultScrollBox final : public UScrollBox
{
public:
	bool                                          bScrollByNavigationInput;                          // 0x0CE8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CE9[0x3];                                      // 0x0CE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NavigationScrollOffsetStep;                        // 0x0CEC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NavigationScrollOffsetSpeed;                       // 0x0CF0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CF4[0x4];                                      // 0x0CF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetNavigation*                      UserDefinedNavigation;                             // 0x0CF8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D00[0x10];                                     // 0x0D00(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UWidget* HandleCustomBoundaryNavigation(EUINavigation InNavigation);
	void OnUserScrolledHandle(float CurrentOffset);
	void UpdateNavigationData(int32 PendingScrollOffset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultScrollBox">();
	}
	static class UModioDefaultScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultScrollBox>();
	}
};
static_assert(alignof(UModioDefaultScrollBox) == 0x000010, "Wrong alignment on UModioDefaultScrollBox");
static_assert(sizeof(UModioDefaultScrollBox) == 0x000D10, "Wrong size on UModioDefaultScrollBox");
static_assert(offsetof(UModioDefaultScrollBox, bScrollByNavigationInput) == 0x000CE8, "Member 'UModioDefaultScrollBox::bScrollByNavigationInput' has a wrong offset!");
static_assert(offsetof(UModioDefaultScrollBox, NavigationScrollOffsetStep) == 0x000CEC, "Member 'UModioDefaultScrollBox::NavigationScrollOffsetStep' has a wrong offset!");
static_assert(offsetof(UModioDefaultScrollBox, NavigationScrollOffsetSpeed) == 0x000CF0, "Member 'UModioDefaultScrollBox::NavigationScrollOffsetSpeed' has a wrong offset!");
static_assert(offsetof(UModioDefaultScrollBox, UserDefinedNavigation) == 0x000CF8, "Member 'UModioDefaultScrollBox::UserDefinedNavigation' has a wrong offset!");

// Class ModioUICore.ModioDefaultTagWidget
// 0x0000 (0x0470 - 0x0470)
class UModioDefaultTagWidget final : public UModioUIComponentBase
{
public:
	TScriptInterface<class IModioUIHasTextWidget> GetLabelWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultTagWidget">();
	}
	static class UModioDefaultTagWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultTagWidget>();
	}
};
static_assert(alignof(UModioDefaultTagWidget) == 0x000008, "Wrong alignment on UModioDefaultTagWidget");
static_assert(sizeof(UModioDefaultTagWidget) == 0x000470, "Wrong size on UModioDefaultTagWidget");

// Class ModioUICore.ModioDefaultTextBlock
// 0x0050 (0x03D0 - 0x0380)
class UModioDefaultTextBlock final : public UTextBlock
{
public:
	uint8                                         Pad_378[0x30];                                     // 0x0378(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColorRefOverride                TextColorOverride;                                 // 0x03A8(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C4[0xC];                                      // 0x03C4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultTextBlock">();
	}
	static class UModioDefaultTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultTextBlock>();
	}
};
static_assert(alignof(UModioDefaultTextBlock) == 0x000010, "Wrong alignment on UModioDefaultTextBlock");
static_assert(sizeof(UModioDefaultTextBlock) == 0x0003D0, "Wrong size on UModioDefaultTextBlock");
static_assert(offsetof(UModioDefaultTextBlock, TextColorOverride) == 0x0003A8, "Member 'UModioDefaultTextBlock::TextColorOverride' has a wrong offset!");

// Class ModioUICore.ModioUIManageModSubscriptionCommand
// 0x0010 (0x0038 - 0x0028)
class UModioUIManageModSubscriptionCommand final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DataSource;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIManageModSubscriptionCommand">();
	}
	static class UModioUIManageModSubscriptionCommand* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIManageModSubscriptionCommand>();
	}
};
static_assert(alignof(UModioUIManageModSubscriptionCommand) == 0x000008, "Wrong alignment on UModioUIManageModSubscriptionCommand");
static_assert(sizeof(UModioUIManageModSubscriptionCommand) == 0x000038, "Wrong size on UModioUIManageModSubscriptionCommand");
static_assert(offsetof(UModioUIManageModSubscriptionCommand, DataSource) == 0x000030, "Member 'UModioUIManageModSubscriptionCommand::DataSource' has a wrong offset!");

// Class ModioUICore.ModioDefaultTokenPackTile
// 0x0068 (0x04D8 - 0x0470)
class UModioDefaultTokenPackTile final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x28];                                     // 0x0470(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* ClickContext)> OnClicked;                           // 0x0498(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bSelected;                                         // 0x04A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* SelectionContext, bool bNewSelectedState)> OnSelected; // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C0[0x8];                                      // 0x04C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* HoverContext, bool bHoveredState)> OnHoverStateChanged; // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	bool GetSelectedStateEx();
	void NotifyClicked();
	void NotifyHoverStateChanged(bool bNewHoveredState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultTokenPackTile">();
	}
	static class UModioDefaultTokenPackTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultTokenPackTile>();
	}
};
static_assert(alignof(UModioDefaultTokenPackTile) == 0x000008, "Wrong alignment on UModioDefaultTokenPackTile");
static_assert(sizeof(UModioDefaultTokenPackTile) == 0x0004D8, "Wrong size on UModioDefaultTokenPackTile");
static_assert(offsetof(UModioDefaultTokenPackTile, OnClicked) == 0x000498, "Member 'UModioDefaultTokenPackTile::OnClicked' has a wrong offset!");
static_assert(offsetof(UModioDefaultTokenPackTile, bSelected) == 0x0004A8, "Member 'UModioDefaultTokenPackTile::bSelected' has a wrong offset!");
static_assert(offsetof(UModioDefaultTokenPackTile, OnSelected) == 0x0004B0, "Member 'UModioDefaultTokenPackTile::OnSelected' has a wrong offset!");
static_assert(offsetof(UModioDefaultTokenPackTile, OnHoverStateChanged) == 0x0004C8, "Member 'UModioDefaultTokenPackTile::OnHoverStateChanged' has a wrong offset!");

// Class ModioUICore.ModioDefaultTokenPackTileView
// 0x0060 (0x0D00 - 0x0CA0)
class UModioDefaultTokenPackTileView final : public UTileView
{
public:
	uint8                                         Pad_CA0[0x28];                                     // 0x0CA0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* SelectedValue)> OnSelectedValueChanged;             // 0x0CC8(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_CD8[0x28];                                     // 0x0CD8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultTokenPackTileView">();
	}
	static class UModioDefaultTokenPackTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultTokenPackTileView>();
	}
};
static_assert(alignof(UModioDefaultTokenPackTileView) == 0x000010, "Wrong alignment on UModioDefaultTokenPackTileView");
static_assert(sizeof(UModioDefaultTokenPackTileView) == 0x000D00, "Wrong size on UModioDefaultTokenPackTileView");
static_assert(offsetof(UModioDefaultTokenPackTileView, OnSelectedValueChanged) == 0x000CC8, "Member 'UModioDefaultTokenPackTileView::OnSelectedValueChanged' has a wrong offset!");

// Class ModioUICore.ModioDialogButtonUIDetails
// 0x0000 (0x0000 - 0x0000)
class IModioDialogButtonUIDetails final
{
public:
	struct FModioDialogButtonInfo GetDialogButtonInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDialogButtonUIDetails">();
	}
	static class IModioDialogButtonUIDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioDialogButtonUIDetails>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IModioDialogButtonUIDetails) == 0x000001, "Wrong alignment on IModioDialogButtonUIDetails");
static_assert(sizeof(IModioDialogButtonUIDetails) == 0x000001, "Wrong size on IModioDialogButtonUIDetails");

// Class ModioUICore.ModioModBrowserDialogButtonInfoUI
// 0x00C0 (0x00E8 - 0x0028)
class UModioModBrowserDialogButtonInfoUI final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioDialogButtonInfo                 Underlying;                                        // 0x0038(0x00B0)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModBrowserDialogButtonInfoUI">();
	}
	static class UModioModBrowserDialogButtonInfoUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModBrowserDialogButtonInfoUI>();
	}
};
static_assert(alignof(UModioModBrowserDialogButtonInfoUI) == 0x000008, "Wrong alignment on UModioModBrowserDialogButtonInfoUI");
static_assert(sizeof(UModioModBrowserDialogButtonInfoUI) == 0x0000E8, "Wrong size on UModioModBrowserDialogButtonInfoUI");
static_assert(offsetof(UModioModBrowserDialogButtonInfoUI, Underlying) == 0x000038, "Member 'UModioModBrowserDialogButtonInfoUI::Underlying' has a wrong offset!");

// Class ModioUICore.ModioUISettings
// 0x00B0 (0x00D8 - 0x0028)
class UModioUISettings final : public UObject
{
public:
	TSoftObjectPtr<class UDataTable>              ColorsTable;                                       // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              CommandsTable;                                     // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterial>               UnderlineMaterial;                                 // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterial>               FakeCaretMaterial;                                 // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FModioPresetFilterParams>       PresetNamedFilters;                                // 0x00C8(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUISettings">();
	}
	static class UModioUISettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUISettings>();
	}
};
static_assert(alignof(UModioUISettings) == 0x000008, "Wrong alignment on UModioUISettings");
static_assert(sizeof(UModioUISettings) == 0x0000D8, "Wrong size on UModioUISettings");
static_assert(offsetof(UModioUISettings, ColorsTable) == 0x000028, "Member 'UModioUISettings::ColorsTable' has a wrong offset!");
static_assert(offsetof(UModioUISettings, CommandsTable) == 0x000050, "Member 'UModioUISettings::CommandsTable' has a wrong offset!");
static_assert(offsetof(UModioUISettings, UnderlineMaterial) == 0x000078, "Member 'UModioUISettings::UnderlineMaterial' has a wrong offset!");
static_assert(offsetof(UModioUISettings, FakeCaretMaterial) == 0x0000A0, "Member 'UModioUISettings::FakeCaretMaterial' has a wrong offset!");
static_assert(offsetof(UModioUISettings, PresetNamedFilters) == 0x0000C8, "Member 'UModioUISettings::PresetNamedFilters' has a wrong offset!");

// Class ModioUICore.ModioDropdownAnchor
// 0x0018 (0x0200 - 0x01E8)
class UModioDropdownAnchor final : public UMenuAnchor
{
public:
	uint8                                         Pad_1E8[0x18];                                     // 0x01E8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ModioHandleMenuOpenChanged(bool bIsOpen);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDropdownAnchor">();
	}
	static class UModioDropdownAnchor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDropdownAnchor>();
	}
};
static_assert(alignof(UModioDropdownAnchor) == 0x000008, "Wrong alignment on UModioDropdownAnchor");
static_assert(sizeof(UModioDropdownAnchor) == 0x000200, "Wrong size on UModioDropdownAnchor");

// Class ModioUICore.ModioEnumEntryUI
// 0x0028 (0x0050 - 0x0028)
class UModioEnumEntryUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         UnderlyingEnumValue;                               // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnderlyingEnumValueDisplayText;                    // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioEnumEntryUI">();
	}
	static class UModioEnumEntryUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioEnumEntryUI>();
	}
};
static_assert(alignof(UModioEnumEntryUI) == 0x000008, "Wrong alignment on UModioEnumEntryUI");
static_assert(sizeof(UModioEnumEntryUI) == 0x000050, "Wrong size on UModioEnumEntryUI");
static_assert(offsetof(UModioEnumEntryUI, UnderlyingEnumValue) == 0x000030, "Member 'UModioEnumEntryUI::UnderlyingEnumValue' has a wrong offset!");
static_assert(offsetof(UModioEnumEntryUI, UnderlyingEnumValueDisplayText) == 0x000038, "Member 'UModioEnumEntryUI::UnderlyingEnumValueDisplayText' has a wrong offset!");

// Class ModioUICore.ModioUIComponentStatics
// 0x0000 (0x0028 - 0x0028)
class UModioUIComponentStatics final : public UObject
{
public:
	static const TMap<EModioUIComponentID, struct FModioUIComponentMetadata> GetAllComponentMetadata();
	static const struct FModioUIComponentMetadata GetMetadataForComponent(EModioUIComponentID ComponentType, bool* bComponentTypeFound);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIComponentStatics">();
	}
	static class UModioUIComponentStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIComponentStatics>();
	}
};
static_assert(alignof(UModioUIComponentStatics) == 0x000008, "Wrong alignment on UModioUIComponentStatics");
static_assert(sizeof(UModioUIComponentStatics) == 0x000028, "Wrong size on UModioUIComponentStatics");

// Class ModioUICore.ModioEnumSelector
// 0x0028 (0x0498 - 0x0470)
class UModioEnumSelector final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x8];                                      // 0x0470(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* SelectedValue)> OnSelectionChanged;                 // 0x0478(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UObject*>                        CachedValues;                                      // 0x0488(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void InternalSelectionChangedHandler(class UObject* SelectedObject);
	void NotifySelectionChanged(class UObject* SelectedObject);

	TScriptInterface<class IModioUIClickableWidget> GetMenuToggleClickableWidget() const;
	TScriptInterface<class IModioUIObjectSelector> GetSelectorMenuWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioEnumSelector">();
	}
	static class UModioEnumSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioEnumSelector>();
	}
};
static_assert(alignof(UModioEnumSelector) == 0x000008, "Wrong alignment on UModioEnumSelector");
static_assert(sizeof(UModioEnumSelector) == 0x000498, "Wrong size on UModioEnumSelector");
static_assert(offsetof(UModioEnumSelector, OnSelectionChanged) == 0x000478, "Member 'UModioEnumSelector::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(UModioEnumSelector, CachedValues) == 0x000488, "Member 'UModioEnumSelector::CachedValues' has a wrong offset!");

// Class ModioUICore.ModioEnumSelectorEntry
// 0x0040 (0x04B0 - 0x0470)
class UModioEnumSelectorEntry final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x18];                                     // 0x0470(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* ClickContext)> OnClicked;                           // 0x0488(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_498[0x8];                                      // 0x0498(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* SelectionContext, bool bNewSelectedState)> OnSelectionChanged; // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void InternalClickHandler(class UObject* ClickContext);
	void InternalSelectionChangedHandler(class UObject* SelectionContext, bool bNewSelectedState);
	void NotifyClicked();
	void NotifySelectionChanged(bool bNewSelectedState);

	TScriptInterface<class IModioUIClickableWidget> GetClickableWidget() const;
	TScriptInterface<class IModioUIHasTextWidget> GetLabelWidget() const;
	TScriptInterface<class IModioUISelectableWidget> GetSelectableWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioEnumSelectorEntry">();
	}
	static class UModioEnumSelectorEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioEnumSelectorEntry>();
	}
};
static_assert(alignof(UModioEnumSelectorEntry) == 0x000008, "Wrong alignment on UModioEnumSelectorEntry");
static_assert(sizeof(UModioEnumSelectorEntry) == 0x0004B0, "Wrong size on UModioEnumSelectorEntry");
static_assert(offsetof(UModioEnumSelectorEntry, OnClicked) == 0x000488, "Member 'UModioEnumSelectorEntry::OnClicked' has a wrong offset!");
static_assert(offsetof(UModioEnumSelectorEntry, OnSelectionChanged) == 0x0004A0, "Member 'UModioEnumSelectorEntry::OnSelectionChanged' has a wrong offset!");

// Class ModioUICore.ModioEnumSelectorMenu
// 0x0028 (0x0498 - 0x0470)
class UModioEnumSelectorMenu final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x8];                                      // 0x0470(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* SelectedValue)> OnSelectionChanged;                 // 0x0478(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UObject*>                        CachedValues;                                      // 0x0488(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void InternalSelectionChangedHandler(class UObject* SelectedObject);
	void NotifySelectionChanged(class UObject* SelectedObject);

	TScriptInterface<class IModioUIObjectSelector> GetSelectorWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioEnumSelectorMenu">();
	}
	static class UModioEnumSelectorMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioEnumSelectorMenu>();
	}
};
static_assert(alignof(UModioEnumSelectorMenu) == 0x000008, "Wrong alignment on UModioEnumSelectorMenu");
static_assert(sizeof(UModioEnumSelectorMenu) == 0x000498, "Wrong size on UModioEnumSelectorMenu");
static_assert(offsetof(UModioEnumSelectorMenu, OnSelectionChanged) == 0x000478, "Member 'UModioEnumSelectorMenu::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(UModioEnumSelectorMenu, CachedValues) == 0x000488, "Member 'UModioEnumSelectorMenu::CachedValues' has a wrong offset!");

// Class ModioUICore.ModioFeaturedCategoryParamsUI
// 0x0050 (0x0078 - 0x0028)
class UModioFeaturedCategoryParamsUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioFeaturedCategoryParams           Underlying;                                        // 0x0030(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioFeaturedCategoryParamsUI">();
	}
	static class UModioFeaturedCategoryParamsUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioFeaturedCategoryParamsUI>();
	}
};
static_assert(alignof(UModioFeaturedCategoryParamsUI) == 0x000008, "Wrong alignment on UModioFeaturedCategoryParamsUI");
static_assert(sizeof(UModioFeaturedCategoryParamsUI) == 0x000078, "Wrong size on UModioFeaturedCategoryParamsUI");
static_assert(offsetof(UModioFeaturedCategoryParamsUI, Underlying) == 0x000030, "Member 'UModioFeaturedCategoryParamsUI::Underlying' has a wrong offset!");

// Class ModioUICore.ModioFeatureVisibilityWidget
// 0x0008 (0x01A0 - 0x0198)
class UModioFeatureVisibilityWidget final : public UContentWidget
{
public:
	EModioUIFeatureFlags                          FeatureToCheck;                                    // 0x0198(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioFeatureVisibilityWidget">();
	}
	static class UModioFeatureVisibilityWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioFeatureVisibilityWidget>();
	}
};
static_assert(alignof(UModioFeatureVisibilityWidget) == 0x000008, "Wrong alignment on UModioFeatureVisibilityWidget");
static_assert(sizeof(UModioFeatureVisibilityWidget) == 0x0001A0, "Wrong size on UModioFeatureVisibilityWidget");
static_assert(offsetof(UModioFeatureVisibilityWidget, FeatureToCheck) == 0x000198, "Member 'UModioFeatureVisibilityWidget::FeatureToCheck' has a wrong offset!");

// Class ModioUICore.ModioFilterCounterButton
// 0x0010 (0x16A0 - 0x1690)
class UModioFilterCounterButton final : public UModioDefaultTextButton
{
public:
	uint8                                         Pad_1690[0x10];                                    // 0x1690(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TScriptInterface<class IModioUIDataSourceWidget> GetFilterCounterWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioFilterCounterButton">();
	}
	static class UModioFilterCounterButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioFilterCounterButton>();
	}
};
static_assert(alignof(UModioFilterCounterButton) == 0x000010, "Wrong alignment on UModioFilterCounterButton");
static_assert(sizeof(UModioFilterCounterButton) == 0x0016A0, "Wrong size on UModioFilterCounterButton");

// Class ModioUICore.ModioFilterPanel
// 0x0010 (0x0480 - 0x0470)
class UModioFilterPanel final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x10];                                     // 0x0470(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddTagSelectionChangedHandler(const TDelegate<void()>& Handler);
	void ClearSelectedTags();
	TArray<class FString> GetSelectedTags();

	TScriptInterface<class IModioUIClickableWidget> GetBackgroundButtonWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetClearButtonWidget() const;
	TScriptInterface<class IModioUIModTagSelector> GetTagSelectorWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioFilterPanel">();
	}
	static class UModioFilterPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioFilterPanel>();
	}
};
static_assert(alignof(UModioFilterPanel) == 0x000008, "Wrong alignment on UModioFilterPanel");
static_assert(sizeof(UModioFilterPanel) == 0x000480, "Wrong size on UModioFilterPanel");

// Class ModioUICore.ModioFilterParamsUI
// 0x00D8 (0x0100 - 0x0028)
class UModioFilterParamsUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FilterName;                                        // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioFilterParams                     Underlying;                                        // 0x0048(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioFilterParamsUI">();
	}
	static class UModioFilterParamsUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioFilterParamsUI>();
	}
};
static_assert(alignof(UModioFilterParamsUI) == 0x000008, "Wrong alignment on UModioFilterParamsUI");
static_assert(sizeof(UModioFilterParamsUI) == 0x000100, "Wrong size on UModioFilterParamsUI");
static_assert(offsetof(UModioFilterParamsUI, FilterName) == 0x000030, "Member 'UModioFilterParamsUI::FilterName' has a wrong offset!");
static_assert(offsetof(UModioFilterParamsUI, Underlying) == 0x000048, "Member 'UModioFilterParamsUI::Underlying' has a wrong offset!");

// Class ModioUICore.ModioGalleryImageUI
// 0x0020 (0x0048 - 0x0028)
class UModioGalleryImageUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioImageWrapper                     UnderlyingImage;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         UnderlyingIndex;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioGalleryImageUI">();
	}
	static class UModioGalleryImageUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioGalleryImageUI>();
	}
};
static_assert(alignof(UModioGalleryImageUI) == 0x000008, "Wrong alignment on UModioGalleryImageUI");
static_assert(sizeof(UModioGalleryImageUI) == 0x000048, "Wrong size on UModioGalleryImageUI");
static_assert(offsetof(UModioGalleryImageUI, UnderlyingImage) == 0x000030, "Member 'UModioGalleryImageUI::UnderlyingImage' has a wrong offset!");
static_assert(offsetof(UModioGalleryImageUI, UnderlyingIndex) == 0x000040, "Member 'UModioGalleryImageUI::UnderlyingIndex' has a wrong offset!");

// Class ModioUICore.ModioGalleryListEntry
// 0x0018 (0x0488 - 0x0470)
class UModioGalleryListEntry final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x18];                                     // 0x0470(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioGalleryListEntry">();
	}
	static class UModioGalleryListEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioGalleryListEntry>();
	}
};
static_assert(alignof(UModioGalleryListEntry) == 0x000008, "Wrong alignment on UModioGalleryListEntry");
static_assert(sizeof(UModioGalleryListEntry) == 0x000488, "Wrong size on UModioGalleryListEntry");

// Class ModioUICore.ModioImageGallery
// 0x0210 (0x0680 - 0x0470)
class UModioImageGallery final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x20];                                     // 0x0470(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioModInfo                          BoundModInfo;                                      // 0x0490(0x01E8)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseLogoOnly;                                      // 0x0678(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_679[0x7];                                      // 0x0679(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Refresh();

	TScriptInterface<class IModioUIClickableWidget> GetDecrementSelectionButtonWidget() const;
	TScriptInterface<class IModioUIObjectSelector> GetImageSelectorWidget() const;
	TScriptInterface<class IModioUIImageDisplayWidget> GetImageWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetIncrementSelectionButtonWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioImageGallery">();
	}
	static class UModioImageGallery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioImageGallery>();
	}
};
static_assert(alignof(UModioImageGallery) == 0x000008, "Wrong alignment on UModioImageGallery");
static_assert(sizeof(UModioImageGallery) == 0x000680, "Wrong size on UModioImageGallery");
static_assert(offsetof(UModioImageGallery, BoundModInfo) == 0x000490, "Member 'UModioImageGallery::BoundModInfo' has a wrong offset!");
static_assert(offsetof(UModioImageGallery, bUseLogoOnly) == 0x000678, "Member 'UModioImageGallery::bUseLogoOnly' has a wrong offset!");

// Class ModioUICore.ModioModBrowser
// 0x0070 (0x04E0 - 0x0470)
class UModioModBrowser final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x48];                                     // 0x0470(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	EModioModBrowserState                         CurrentView;                                       // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StoredSearchString;                                // 0x04C0(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                StoredTagData;                                     // 0x04D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                StoredLibraryTagData;                              // 0x04D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static bool DoFilterParamsIncludeUserId(const struct FModioFilterParams& Params_0);

	void DecrementPresetFilterSelection();
	void IncrementPresetFilterSelection();
	void InitializeLibraryTagData(class UObject* InTagData);
	void InitializeTagData(class UObject* InTagData);

	TScriptInterface<class IModioUIClickableWidget> GetClearSearchButtonWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetCloseBrowserButtonWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetFilterButtonWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetLibraryViewButtonWidget() const;
	TScriptInterface<class IModioUIModListViewInterface> GetModTileViewWidget() const;
	TScriptInterface<class IModioUIObjectSelector> GetPresetFilterSelectorWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetSearchButtonWidget() const;
	TScriptInterface<class IModioUIStringInputWidget> GetSearchEditableTextBoxWidget() const;
	TScriptInterface<class IModioUIHasTextWidget> GetSearchTextWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetTabLeftButtonWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetTabRightButtonWidget() const;
	TScriptInterface<class IModioUIImageDisplayWidget> GetViewDescriptionImageWidget() const;
	TScriptInterface<class IModioUIHasTextWidget> GetViewDescriptionTextWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetWalletButtonWidget() const;
	TArray<struct FModioModInfo> SearchLibraryWithStoredParams() const;
	TArray<struct FModioModInfo> SearchPurchasesWithStoredParams() const;
	TArray<struct FModioModInfo> SearchSubscriptionsAndInstallsWithStoredParams() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModBrowser">();
	}
	static class UModioModBrowser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModBrowser>();
	}
};
static_assert(alignof(UModioModBrowser) == 0x000008, "Wrong alignment on UModioModBrowser");
static_assert(sizeof(UModioModBrowser) == 0x0004E0, "Wrong size on UModioModBrowser");
static_assert(offsetof(UModioModBrowser, CurrentView) == 0x0004B8, "Member 'UModioModBrowser::CurrentView' has a wrong offset!");
static_assert(offsetof(UModioModBrowser, StoredSearchString) == 0x0004C0, "Member 'UModioModBrowser::StoredSearchString' has a wrong offset!");
static_assert(offsetof(UModioModBrowser, StoredTagData) == 0x0004D0, "Member 'UModioModBrowser::StoredTagData' has a wrong offset!");
static_assert(offsetof(UModioModBrowser, StoredLibraryTagData) == 0x0004D8, "Member 'UModioModBrowser::StoredLibraryTagData' has a wrong offset!");

// Class ModioUICore.ModioModCollectionEntryUI
// 0x0230 (0x0258 - 0x0028)
class UModioModCollectionEntryUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioModCollectionEntry               Underlying;                                        // 0x0030(0x0220)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          bCachedSubscriptionStatus;                         // 0x0250(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModCollectionEntryUI">();
	}
	static class UModioModCollectionEntryUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModCollectionEntryUI>();
	}
};
static_assert(alignof(UModioModCollectionEntryUI) == 0x000008, "Wrong alignment on UModioModCollectionEntryUI");
static_assert(sizeof(UModioModCollectionEntryUI) == 0x000258, "Wrong size on UModioModCollectionEntryUI");
static_assert(offsetof(UModioModCollectionEntryUI, Underlying) == 0x000030, "Member 'UModioModCollectionEntryUI::Underlying' has a wrong offset!");
static_assert(offsetof(UModioModCollectionEntryUI, bCachedSubscriptionStatus) == 0x000250, "Member 'UModioModCollectionEntryUI::bCachedSubscriptionStatus' has a wrong offset!");

// Class ModioUICore.ModioModDependencyUI
// 0x0100 (0x0128 - 0x0028)
class UModioModDependencyUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioModDependency                    Underlying;                                        // 0x0030(0x00F8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModDependencyUI">();
	}
	static class UModioModDependencyUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModDependencyUI>();
	}
};
static_assert(alignof(UModioModDependencyUI) == 0x000008, "Wrong alignment on UModioModDependencyUI");
static_assert(sizeof(UModioModDependencyUI) == 0x000128, "Wrong size on UModioModDependencyUI");
static_assert(offsetof(UModioModDependencyUI, Underlying) == 0x000030, "Member 'UModioModDependencyUI::Underlying' has a wrong offset!");

// Class ModioUICore.ModioModDetailsDialog
// 0x0238 (0x06A8 - 0x0470)
class UModioModDetailsDialog final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x30];                                     // 0x0470(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ExpandLabelText;                                   // 0x04A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FModioModInfo                          BoundModInfo;                                      // 0x04B8(0x01E8)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bHasFullDescription;                               // 0x06A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A1[0x7];                                      // 0x06A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsModPurchased();
	bool IsUserSubscribed();
	void PopulateExtraOptionsCommands(TArray<class UObject*>* Commands, class UObject* Context);

	TScriptInterface<class IModioUIClickableWidget> GetCloseDialogButtonWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetExpandDescriptionButtonWidget() const;
	TScriptInterface<class IModioUIDataSourceWidget> GetModAuthorDisplayWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetModDependenciesButtonWidget() const;
	TScriptInterface<class IModioUIMediaDownloadCompletedReceiver> GetModImageGalleryWidget() const;
	TScriptInterface<class IModioUIHasTextWidget> GetModNameTextWidget() const;
	TScriptInterface<class IModioUIDataSourceWidget> GetModPropertiesWidget() const;
	TScriptInterface<class IModioUIDataSourceWidget> GetModStatusWidget() const;
	TScriptInterface<class IModioUIHasTextWidget> GetModSummaryShortTextWidget() const;
	TScriptInterface<class IModioUICommandMenu> GetMoreOptionsMenuWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetPurchaseButtonWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetRateDownButtonWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetRateUpButtonWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetSubscribeButtonWidget() const;
	TScriptInterface<class IModioUIDataSourceWidget> GetTagDisplayWidget() const;
	TScriptInterface<class IModioUIClickableWidget> GetWalletButtonWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModDetailsDialog">();
	}
	static class UModioModDetailsDialog* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModDetailsDialog>();
	}
};
static_assert(alignof(UModioModDetailsDialog) == 0x000008, "Wrong alignment on UModioModDetailsDialog");
static_assert(sizeof(UModioModDetailsDialog) == 0x0006A8, "Wrong size on UModioModDetailsDialog");
static_assert(offsetof(UModioModDetailsDialog, ExpandLabelText) == 0x0004A0, "Member 'UModioModDetailsDialog::ExpandLabelText' has a wrong offset!");
static_assert(offsetof(UModioModDetailsDialog, BoundModInfo) == 0x0004B8, "Member 'UModioModDetailsDialog::BoundModInfo' has a wrong offset!");
static_assert(offsetof(UModioModDetailsDialog, bHasFullDescription) == 0x0006A0, "Member 'UModioModDetailsDialog::bHasFullDescription' has a wrong offset!");

// Class ModioUICore.ModioModEnabledStatusWidget
// 0x0010 (0x0480 - 0x0470)
class UModioModEnabledStatusWidget final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x10];                                     // 0x0470(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModEnabledStatusWidget">();
	}
	static class UModioModEnabledStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModEnabledStatusWidget>();
	}
};
static_assert(alignof(UModioModEnabledStatusWidget) == 0x000008, "Wrong alignment on UModioModEnabledStatusWidget");
static_assert(sizeof(UModioModEnabledStatusWidget) == 0x000480, "Wrong size on UModioModEnabledStatusWidget");

// Class ModioUICore.ModioModEnabledToggleWidget
// 0x0010 (0x0480 - 0x0470)
class UModioModEnabledToggleWidget final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x10];                                     // 0x0470(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModEnabledToggleWidget">();
	}
	static class UModioModEnabledToggleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModEnabledToggleWidget>();
	}
};
static_assert(alignof(UModioModEnabledToggleWidget) == 0x000008, "Wrong alignment on UModioModEnabledToggleWidget");
static_assert(sizeof(UModioModEnabledToggleWidget) == 0x000480, "Wrong size on UModioModEnabledToggleWidget");

// Class ModioUICore.ModioModInfoUI
// 0x01F0 (0x0218 - 0x0028)
class UModioModInfoUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioModInfo                          Underlying;                                        // 0x0030(0x01E8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModInfoUI">();
	}
	static class UModioModInfoUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModInfoUI>();
	}
};
static_assert(alignof(UModioModInfoUI) == 0x000008, "Wrong alignment on UModioModInfoUI");
static_assert(sizeof(UModioModInfoUI) == 0x000218, "Wrong size on UModioModInfoUI");
static_assert(offsetof(UModioModInfoUI, Underlying) == 0x000030, "Member 'UModioModInfoUI::Underlying' has a wrong offset!");

// Class ModioUICore.ModioModInstallationStatusWidget
// 0x0230 (0x06A0 - 0x0470)
class UModioModInstallationStatusWidget final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x30];                                     // 0x0470(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioModInfo                          BoundModInfo;                                      // 0x04A0(0x01E8)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EModioModInstallationStatus NewStatus)> OnInstallationStatusChanged; // 0x0688(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	EModioModInstallationStatus                   CurrentInstallationStatus;                         // 0x0698(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_699[0x7];                                      // 0x0699(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float QueryProgressValueForState(EModioModProgressState ProgressState) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModInstallationStatusWidget">();
	}
	static class UModioModInstallationStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModInstallationStatusWidget>();
	}
};
static_assert(alignof(UModioModInstallationStatusWidget) == 0x000008, "Wrong alignment on UModioModInstallationStatusWidget");
static_assert(sizeof(UModioModInstallationStatusWidget) == 0x0006A0, "Wrong size on UModioModInstallationStatusWidget");
static_assert(offsetof(UModioModInstallationStatusWidget, BoundModInfo) == 0x0004A0, "Member 'UModioModInstallationStatusWidget::BoundModInfo' has a wrong offset!");
static_assert(offsetof(UModioModInstallationStatusWidget, OnInstallationStatusChanged) == 0x000688, "Member 'UModioModInstallationStatusWidget::OnInstallationStatusChanged' has a wrong offset!");
static_assert(offsetof(UModioModInstallationStatusWidget, CurrentInstallationStatus) == 0x000698, "Member 'UModioModInstallationStatusWidget::CurrentInstallationStatus' has a wrong offset!");

// Class ModioUICore.ModioModManagementEventUI
// 0x0018 (0x0040 - 0x0028)
class UModioModManagementEventUI final : public UObject
{
public:
	struct FModioModManagementEvent               Underlying;                                        // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModManagementEventUI">();
	}
	static class UModioModManagementEventUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModManagementEventUI>();
	}
};
static_assert(alignof(UModioModManagementEventUI) == 0x000008, "Wrong alignment on UModioModManagementEventUI");
static_assert(sizeof(UModioModManagementEventUI) == 0x000040, "Wrong size on UModioModManagementEventUI");
static_assert(offsetof(UModioModManagementEventUI, Underlying) == 0x000028, "Member 'UModioModManagementEventUI::Underlying' has a wrong offset!");

// Class ModioUICore.ModioModProgressInfoUI
// 0x0050 (0x0078 - 0x0028)
class UModioModProgressInfoUI final : public UObject
{
public:
	struct FModioModProgressInfo                  Underlying;                                        // 0x0028(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModProgressInfoUI">();
	}
	static class UModioModProgressInfoUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModProgressInfoUI>();
	}
};
static_assert(alignof(UModioModProgressInfoUI) == 0x000008, "Wrong alignment on UModioModProgressInfoUI");
static_assert(sizeof(UModioModProgressInfoUI) == 0x000078, "Wrong size on UModioModProgressInfoUI");
static_assert(offsetof(UModioModProgressInfoUI, Underlying) == 0x000028, "Member 'UModioModProgressInfoUI::Underlying' has a wrong offset!");

// Class ModioUICore.ModioModPropCollectionVisualizer
// 0x0000 (0x0470 - 0x0470)
class UModioModPropCollectionVisualizer final : public UModioUIComponentBase
{
public:
	TArray<TScriptInterface<class IModioUIDataSourceWidget>> GetModPropertyVisualizerWidgets();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModPropCollectionVisualizer">();
	}
	static class UModioModPropCollectionVisualizer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModPropCollectionVisualizer>();
	}
};
static_assert(alignof(UModioModPropCollectionVisualizer) == 0x000008, "Wrong alignment on UModioModPropCollectionVisualizer");
static_assert(sizeof(UModioModPropCollectionVisualizer) == 0x000470, "Wrong size on UModioModPropCollectionVisualizer");

// Class ModioUICore.ModioModRatingDisplay
// 0x0000 (0x0470 - 0x0470)
class UModioModRatingDisplay final : public UModioUIComponentBase
{
public:
	TScriptInterface<class IModioUIHasTextWidget> GetRatingDescriptionLabelWidget() const;
	TScriptInterface<class IModioUIHasTextWidget> GetRatingPercentageLabelWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModRatingDisplay">();
	}
	static class UModioModRatingDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModRatingDisplay>();
	}
};
static_assert(alignof(UModioModRatingDisplay) == 0x000008, "Wrong alignment on UModioModRatingDisplay");
static_assert(sizeof(UModioModRatingDisplay) == 0x000470, "Wrong size on UModioModRatingDisplay");

// Class ModioUICore.ModioModSubscriptionStatusWidget
// 0x0010 (0x0480 - 0x0470)
class UModioModSubscriptionStatusWidget final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x10];                                     // 0x0470(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModSubscriptionStatusWidget">();
	}
	static class UModioModSubscriptionStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModSubscriptionStatusWidget>();
	}
};
static_assert(alignof(UModioModSubscriptionStatusWidget) == 0x000008, "Wrong alignment on UModioModSubscriptionStatusWidget");
static_assert(sizeof(UModioModSubscriptionStatusWidget) == 0x000480, "Wrong size on UModioModSubscriptionStatusWidget");

// Class ModioUICore.ModioModTagDisplay
// 0x0000 (0x0470 - 0x0470)
class UModioModTagDisplay final : public UModioUIComponentBase
{
public:
	TScriptInterface<class IModioUIObjectListWidget> GetTagContainerWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModTagDisplay">();
	}
	static class UModioModTagDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModTagDisplay>();
	}
};
static_assert(alignof(UModioModTagDisplay) == 0x000008, "Wrong alignment on UModioModTagDisplay");
static_assert(sizeof(UModioModTagDisplay) == 0x000470, "Wrong size on UModioModTagDisplay");

// Class ModioUICore.ModioModTagSelectorCategory
// 0x0018 (0x0488 - 0x0470)
class UModioModTagSelectorCategory final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x18];                                     // 0x0470(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TScriptInterface<class IModioUIObjectSelector> GetCategoryTagListWidget() const;
	TScriptInterface<class IModioUIHasTextWidget> GetTagCategoryLabel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModTagSelectorCategory">();
	}
	static class UModioModTagSelectorCategory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModTagSelectorCategory>();
	}
};
static_assert(alignof(UModioModTagSelectorCategory) == 0x000008, "Wrong alignment on UModioModTagSelectorCategory");
static_assert(sizeof(UModioModTagSelectorCategory) == 0x000488, "Wrong size on UModioModTagSelectorCategory");

// Class ModioUICore.ModioModTagSelectorMenu
// 0x0030 (0x04A0 - 0x0470)
class UModioModTagSelectorMenu final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x8];                                      // 0x0470(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShowHiddenTags;                                   // 0x0478(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowLockedTags;                                   // 0x0479(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_47A[0x6];                                      // 0x047A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnTagSelectionChanged;                             // 0x0480(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TScriptInterface<class IModioModTagOptionsUIDetails> CachedTagOptions;                           // 0x0490(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	TArray<TScriptInterface<class IModioModTagCategoryUIDetails>> GetAllowedTags();
	void NotifySelectionChanged();
	void OnCategoryEntrySelectionChanged(class UObject* NewlySelectedEntry);
	void OnCategoryWidgetCreated(class UWidget* CategoryWidget, class UObject* CategoryDataSource);

	TScriptInterface<class IModioUIObjectListWidget> GetCategoryContainerWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModTagSelectorMenu">();
	}
	static class UModioModTagSelectorMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModTagSelectorMenu>();
	}
};
static_assert(alignof(UModioModTagSelectorMenu) == 0x000008, "Wrong alignment on UModioModTagSelectorMenu");
static_assert(sizeof(UModioModTagSelectorMenu) == 0x0004A0, "Wrong size on UModioModTagSelectorMenu");
static_assert(offsetof(UModioModTagSelectorMenu, bShowHiddenTags) == 0x000478, "Member 'UModioModTagSelectorMenu::bShowHiddenTags' has a wrong offset!");
static_assert(offsetof(UModioModTagSelectorMenu, bShowLockedTags) == 0x000479, "Member 'UModioModTagSelectorMenu::bShowLockedTags' has a wrong offset!");
static_assert(offsetof(UModioModTagSelectorMenu, OnTagSelectionChanged) == 0x000480, "Member 'UModioModTagSelectorMenu::OnTagSelectionChanged' has a wrong offset!");
static_assert(offsetof(UModioModTagSelectorMenu, CachedTagOptions) == 0x000490, "Member 'UModioModTagSelectorMenu::CachedTagOptions' has a wrong offset!");

// Class ModioUICore.ModioObjectWrapBox
// 0x0038 (0x01F8 - 0x01C0)
class UModioObjectWrapBox final : public UWrapBox
{
public:
	uint8                                         Pad_1C0[0x10];                                     // 0x01C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        BoundObjects;                                      // 0x01D0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UWidget>                    WidgetClass;                                       // 0x01E0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UWidget* ObjectWidget, class UObject* Object)> OnWidgetCreated; // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioObjectWrapBox">();
	}
	static class UModioObjectWrapBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioObjectWrapBox>();
	}
};
static_assert(alignof(UModioObjectWrapBox) == 0x000008, "Wrong alignment on UModioObjectWrapBox");
static_assert(sizeof(UModioObjectWrapBox) == 0x0001F8, "Wrong size on UModioObjectWrapBox");
static_assert(offsetof(UModioObjectWrapBox, BoundObjects) == 0x0001D0, "Member 'UModioObjectWrapBox::BoundObjects' has a wrong offset!");
static_assert(offsetof(UModioObjectWrapBox, WidgetClass) == 0x0001E0, "Member 'UModioObjectWrapBox::WidgetClass' has a wrong offset!");
static_assert(offsetof(UModioObjectWrapBox, OnWidgetCreated) == 0x0001E8, "Member 'UModioObjectWrapBox::OnWidgetCreated' has a wrong offset!");

// Class ModioUICore.ModioOperationTracker
// 0x0078 (0x04E8 - 0x0470)
class UModioOperationTracker final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x48];                                     // 0x0470(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SizeFormatText;                                    // 0x04B8(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   SpeedFormatText;                                   // 0x04D0(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void HandleOperationComplete();
	void RefreshQueueData();

	TScriptInterface<class IModioUIHasTextWidget> GetDownloadSizeTextWidget() const;
	TScriptInterface<class IModioUIHasTextWidget> GetDownloadSpeedTextWidget() const;
	TScriptInterface<class IModioUIImageDisplayWidget> GetOperationTypeIconWidget() const;
	TScriptInterface<class IModioUIHasTextWidget> GetPercentProgressTextWidget() const;
	TScriptInterface<class IModioUIImageDisplayWidget> GetQueueCountIconWidget() const;
	TScriptInterface<class IModioUIHasTextWidget> GetQueueCountTextWidget() const;
	TScriptInterface<class IModioUIHasTextWidget> GetQueueLabelTextWidget() const;
	TScriptInterface<class IModioUIProgressWidget> GetRadialProgressWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioOperationTracker">();
	}
	static class UModioOperationTracker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioOperationTracker>();
	}
};
static_assert(alignof(UModioOperationTracker) == 0x000008, "Wrong alignment on UModioOperationTracker");
static_assert(sizeof(UModioOperationTracker) == 0x0004E8, "Wrong size on UModioOperationTracker");
static_assert(offsetof(UModioOperationTracker, SizeFormatText) == 0x0004B8, "Member 'UModioOperationTracker::SizeFormatText' has a wrong offset!");
static_assert(offsetof(UModioOperationTracker, SpeedFormatText) == 0x0004D0, "Member 'UModioOperationTracker::SpeedFormatText' has a wrong offset!");

// Class ModioUICore.ModioPopupCommandMenu
// 0x0008 (0x0478 - 0x0470)
class UModioPopupCommandMenu final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x8];                                      // 0x0470(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConstructCommandMenuWidget();

	TScriptInterface<class IModioUICommandMenu> GetCommandMenuWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioPopupCommandMenu">();
	}
	static class UModioPopupCommandMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioPopupCommandMenu>();
	}
};
static_assert(alignof(UModioPopupCommandMenu) == 0x000008, "Wrong alignment on UModioPopupCommandMenu");
static_assert(sizeof(UModioPopupCommandMenu) == 0x000478, "Wrong size on UModioPopupCommandMenu");

// Class ModioUICore.ModioPresetFilterSelector
// 0x0018 (0x0488 - 0x0470)
class UModioPresetFilterSelector final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x8];                                      // 0x0470(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        CachedBoundPresets;                                // 0x0478(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	TArray<TScriptInterface<class IModioModFilterUIDetails>> GetFilterPresets();

	TScriptInterface<class IModioUIObjectSelector> GetPresetListWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioPresetFilterSelector">();
	}
	static class UModioPresetFilterSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioPresetFilterSelector>();
	}
};
static_assert(alignof(UModioPresetFilterSelector) == 0x000008, "Wrong alignment on UModioPresetFilterSelector");
static_assert(sizeof(UModioPresetFilterSelector) == 0x000488, "Wrong size on UModioPresetFilterSelector");
static_assert(offsetof(UModioPresetFilterSelector, CachedBoundPresets) == 0x000478, "Member 'UModioPresetFilterSelector::CachedBoundPresets' has a wrong offset!");

// Class ModioUICore.ModioReportInfoUI
// 0x0068 (0x0090 - 0x0028)
class UModioReportInfoUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioReportParams                     ReportData;                                        // 0x0030(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UObject*                                ModInfo;                                           // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioReportInfoUI">();
	}
	static class UModioReportInfoUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioReportInfoUI>();
	}
};
static_assert(alignof(UModioReportInfoUI) == 0x000008, "Wrong alignment on UModioReportInfoUI");
static_assert(sizeof(UModioReportInfoUI) == 0x000090, "Wrong size on UModioReportInfoUI");
static_assert(offsetof(UModioReportInfoUI, ReportData) == 0x000030, "Member 'UModioReportInfoUI::ReportData' has a wrong offset!");
static_assert(offsetof(UModioReportInfoUI, ModInfo) == 0x000088, "Member 'UModioReportInfoUI::ModInfo' has a wrong offset!");

// Class ModioUICore.ModioSearchBar
// 0x0010 (0x0480 - 0x0470)
class UModioSearchBar final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x10];                                     // 0x0470(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TScriptInterface<class IModioUIClickableWidget> GetButtonWidget() const;
	TScriptInterface<class IModioUIStringInputWidget> GetSearchBoxWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioSearchBar">();
	}
	static class UModioSearchBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioSearchBar>();
	}
};
static_assert(alignof(UModioSearchBar) == 0x000008, "Wrong alignment on UModioSearchBar");
static_assert(sizeof(UModioSearchBar) == 0x000480, "Wrong size on UModioSearchBar");

// Class ModioUICore.ModioStorageTracker
// 0x0010 (0x0480 - 0x0470)
class UModioStorageTracker final : public UModioUIComponentBase
{
public:
	uint8                                         Pad_470[0x10];                                     // 0x0470(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RefreshData();

	TScriptInterface<class IModioUIHasTextWidget> GetStorageUsedTextWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioStorageTracker">();
	}
	static class UModioStorageTracker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioStorageTracker>();
	}
};
static_assert(alignof(UModioStorageTracker) == 0x000008, "Wrong alignment on UModioStorageTracker");
static_assert(sizeof(UModioStorageTracker) == 0x000480, "Wrong size on UModioStorageTracker");

// Class ModioUICore.ModioModTagUI
// 0x0038 (0x0060 - 0x0028)
class UModioModTagUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Underlying;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LocalizedText;                                     // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bSelectionState;                                   // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModTagUI">();
	}
	static class UModioModTagUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModTagUI>();
	}
};
static_assert(alignof(UModioModTagUI) == 0x000008, "Wrong alignment on UModioModTagUI");
static_assert(sizeof(UModioModTagUI) == 0x000060, "Wrong size on UModioModTagUI");
static_assert(offsetof(UModioModTagUI, Underlying) == 0x000030, "Member 'UModioModTagUI::Underlying' has a wrong offset!");
static_assert(offsetof(UModioModTagUI, LocalizedText) == 0x000040, "Member 'UModioModTagUI::LocalizedText' has a wrong offset!");
static_assert(offsetof(UModioModTagUI, bSelectionState) == 0x000058, "Member 'UModioModTagUI::bSelectionState' has a wrong offset!");

// Class ModioUICore.ModioModTagOptionsUI
// 0x0040 (0x0068 - 0x0028)
class UModioModTagOptionsUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioModTagOptions                    Underlying;                                        // 0x0030(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UModioModTagInfoUI*>             BindableTagCategories;                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModTagOptionsUI">();
	}
	static class UModioModTagOptionsUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModTagOptionsUI>();
	}
};
static_assert(alignof(UModioModTagOptionsUI) == 0x000008, "Wrong alignment on UModioModTagOptionsUI");
static_assert(sizeof(UModioModTagOptionsUI) == 0x000068, "Wrong size on UModioModTagOptionsUI");
static_assert(offsetof(UModioModTagOptionsUI, Underlying) == 0x000030, "Member 'UModioModTagOptionsUI::Underlying' has a wrong offset!");
static_assert(offsetof(UModioModTagOptionsUI, BindableTagCategories) == 0x000058, "Member 'UModioModTagOptionsUI::BindableTagCategories' has a wrong offset!");

// Class ModioUICore.ModioTokenPackUI
// 0x0120 (0x0148 - 0x0028)
class UModioTokenPackUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioTokenPack                        Underlying;                                        // 0x0030(0x0118)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTokenPackUI">();
	}
	static class UModioTokenPackUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTokenPackUI>();
	}
};
static_assert(alignof(UModioTokenPackUI) == 0x000008, "Wrong alignment on UModioTokenPackUI");
static_assert(sizeof(UModioTokenPackUI) == 0x000148, "Wrong size on UModioTokenPackUI");
static_assert(offsetof(UModioTokenPackUI, Underlying) == 0x000030, "Member 'UModioTokenPackUI::Underlying' has a wrong offset!");

// Class ModioUICore.ModioUICommonFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUICommonFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ApplyTextPropertyOverridesHelper(const struct FSlateFontInfoOverride& FontPropertiesOverride, const struct FHAlignOverride& TextJustificationOverride, const struct FTextTransformOverride& TextTransformOverride, class UObject* Target);
	static TArray<class UObject*> AsObjectArray(const TArray<int32>& TargetArray);
	static bool CheckLogoDownloadEvent(const struct FModioModID& EventModID, EModioLogoSize EventLogoSize, const struct FModioModID& RequestedModID, EModioLogoSize RequestedSize);
	static bool CheckLogoDownloadEventForDataSource(const struct FModioModID& EventModID, EModioLogoSize EventLogoSize, class UObject* DataSource, EModioLogoSize RequestedSize);
	static class UModioEnumEntryUI* CreateBindableEnum(const uint8 InValue, const class FText& InText);
	static class UModioModDependencyUI* CreateBindableModDependency(const struct FModioModDependency& InModDependency);
	static TArray<class UModioModDependencyUI*> CreateBindableModDependencyArrayFromArray(const TArray<struct FModioModDependency>& InModDependencyArray);
	static TArray<class UModioModDependencyUI*> CreateBindableModDependencyArrayFromList(const struct FModioModDependencyList& InModDependencyList);
	static class UModioModTagUI* CreateBindableModTag(const struct FModioModTagLocalizationData& InTagLocalizationData);
	static TArray<class UModioModTagUI*> CreateBindableModTagArray(const TArray<struct FModioModTag>& InTags);
	static class UModioModTagInfoUI* CreateBindableModTagInfo(const struct FModioModTagInfo& InRawTagInfo);
	static class UModioModTagOptionsUI* CreateBindableModTagOptions(const struct FModioModTagOptions& InRawOptions);
	static class UModioModTagUI* CreateBindableModTagRawValue(const struct FModioModTag& InTag);
	static TArray<class UModioEnumEntryUI*> CreateBindableReportTypeEnumArray();
	static class UModioUserUI* CreateBindableUser(const struct FModioUser& InRawUser);
	static class FText FormatNumberWithSIUnit(int64 Value, const class FText& FormatText);
	static class FText FormatTimespan(const struct FTimespan& Timespan, const class FText& YearFormat, const class FText& MonthFormat, const class FText& DaysFormat, const class FText& TodayFormat);
	static class FText GetLocalizedTagCategory(const struct FModioModTagInfo& InTagInfo);
	static class FText GetLocalizedTagValue(const struct FModioModTagLocalizationData& InTagLocalizationData);
	static class FText GetModioText(class FName StringKey);
	static bool IsDesignTime(class UWidget* Target);
	static bool IsDesignTimeAsExec(class UWidget* Target);
	static bool MapValueIntoRangeIndex(const TArray<struct FInt32Range>& ValueRanges, int32 Value, int32* OutIndex);
	static class UWidget* ValidateWidget(TScriptInterface<class IInterface> TargetWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUICommonFunctionLibrary">();
	}
	static class UModioUICommonFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUICommonFunctionLibrary>();
	}
};
static_assert(alignof(UModioUICommonFunctionLibrary) == 0x000008, "Wrong alignment on UModioUICommonFunctionLibrary");
static_assert(sizeof(UModioUICommonFunctionLibrary) == 0x000028, "Wrong size on UModioUICommonFunctionLibrary");

// Class ModioUICore.ModioUIDisplayFilteredModsCommand
// 0x00D8 (0x0100 - 0x0028)
class UModioUIDisplayFilteredModsCommand final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DataSource;                                        // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FModioFilterParams                     UnderlyingParams;                                  // 0x0040(0x00B8)(Protected, NativeAccessSpecifierProtected)
	class FName                                   DisplayStringKey;                                  // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetDisplayStringKey(const class FName& InDisplayStringKey);
	void SetFilterParams(const struct FModioFilterParams& FilterParams);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIDisplayFilteredModsCommand">();
	}
	static class UModioUIDisplayFilteredModsCommand* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIDisplayFilteredModsCommand>();
	}
};
static_assert(alignof(UModioUIDisplayFilteredModsCommand) == 0x000008, "Wrong alignment on UModioUIDisplayFilteredModsCommand");
static_assert(sizeof(UModioUIDisplayFilteredModsCommand) == 0x000100, "Wrong size on UModioUIDisplayFilteredModsCommand");
static_assert(offsetof(UModioUIDisplayFilteredModsCommand, DataSource) == 0x000038, "Member 'UModioUIDisplayFilteredModsCommand::DataSource' has a wrong offset!");
static_assert(offsetof(UModioUIDisplayFilteredModsCommand, UnderlyingParams) == 0x000040, "Member 'UModioUIDisplayFilteredModsCommand::UnderlyingParams' has a wrong offset!");
static_assert(offsetof(UModioUIDisplayFilteredModsCommand, DisplayStringKey) == 0x0000F8, "Member 'UModioUIDisplayFilteredModsCommand::DisplayStringKey' has a wrong offset!");

// Class ModioUICore.ModioUIPrioritizeModCommand
// 0x0010 (0x0038 - 0x0028)
class UModioUIPrioritizeModCommand final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DataSource;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIPrioritizeModCommand">();
	}
	static class UModioUIPrioritizeModCommand* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIPrioritizeModCommand>();
	}
};
static_assert(alignof(UModioUIPrioritizeModCommand) == 0x000008, "Wrong alignment on UModioUIPrioritizeModCommand");
static_assert(sizeof(UModioUIPrioritizeModCommand) == 0x000038, "Wrong size on UModioUIPrioritizeModCommand");
static_assert(offsetof(UModioUIPrioritizeModCommand, DataSource) == 0x000030, "Member 'UModioUIPrioritizeModCommand::DataSource' has a wrong offset!");

// Class ModioUICore.ModioUIReportModCommand
// 0x0010 (0x0038 - 0x0028)
class UModioUIReportModCommand final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DataSource;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIReportModCommand">();
	}
	static class UModioUIReportModCommand* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIReportModCommand>();
	}
};
static_assert(alignof(UModioUIReportModCommand) == 0x000008, "Wrong alignment on UModioUIReportModCommand");
static_assert(sizeof(UModioUIReportModCommand) == 0x000038, "Wrong size on UModioUIReportModCommand");
static_assert(offsetof(UModioUIReportModCommand, DataSource) == 0x000030, "Member 'UModioUIReportModCommand::DataSource' has a wrong offset!");

// Class ModioUICore.ModioUIDefaultModEnabledStateProvider
// 0x0008 (0x0030 - 0x0028)
class UModioUIDefaultModEnabledStateProvider final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIDefaultModEnabledStateProvider">();
	}
	static class UModioUIDefaultModEnabledStateProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIDefaultModEnabledStateProvider>();
	}
};
static_assert(alignof(UModioUIDefaultModEnabledStateProvider) == 0x000008, "Wrong alignment on UModioUIDefaultModEnabledStateProvider");
static_assert(sizeof(UModioUIDefaultModEnabledStateProvider) == 0x000030, "Wrong size on UModioUIDefaultModEnabledStateProvider");

// Class ModioUICore.ModioUIToggleModEnabledCommand
// 0x0010 (0x0038 - 0x0028)
class UModioUIToggleModEnabledCommand final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DataSource;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIToggleModEnabledCommand">();
	}
	static class UModioUIToggleModEnabledCommand* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIToggleModEnabledCommand>();
	}
};
static_assert(alignof(UModioUIToggleModEnabledCommand) == 0x000008, "Wrong alignment on UModioUIToggleModEnabledCommand");
static_assert(sizeof(UModioUIToggleModEnabledCommand) == 0x000038, "Wrong size on UModioUIToggleModEnabledCommand");
static_assert(offsetof(UModioUIToggleModEnabledCommand, DataSource) == 0x000030, "Member 'UModioUIToggleModEnabledCommand::DataSource' has a wrong offset!");

// Class ModioUICore.ModioUserUI
// 0x0048 (0x0070 - 0x0028)
class UModioUserUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUser                             Underlying;                                        // 0x0030(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUserUI">();
	}
	static class UModioUserUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUserUI>();
	}
};
static_assert(alignof(UModioUserUI) == 0x000008, "Wrong alignment on UModioUserUI");
static_assert(sizeof(UModioUserUI) == 0x000070, "Wrong size on UModioUserUI");
static_assert(offsetof(UModioUserUI, Underlying) == 0x000030, "Member 'UModioUserUI::Underlying' has a wrong offset!");

}

