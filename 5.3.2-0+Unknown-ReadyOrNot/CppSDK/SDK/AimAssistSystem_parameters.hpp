#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AimAssistSystem

#include "Basic.hpp"

#include "AimAssistSystem_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AimAssistSystem.UASAimAssistComponent.GetDrawAimBox
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_GetDrawAimBox final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_GetDrawAimBox) == 0x000001, "Wrong alignment on UASAimAssistComponent_GetDrawAimBox");
static_assert(sizeof(UASAimAssistComponent_GetDrawAimBox) == 0x000001, "Wrong size on UASAimAssistComponent_GetDrawAimBox");
static_assert(offsetof(UASAimAssistComponent_GetDrawAimBox, ReturnValue) == 0x000000, "Member 'UASAimAssistComponent_GetDrawAimBox::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.GetDrawCircles
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_GetDrawCircles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_GetDrawCircles) == 0x000001, "Wrong alignment on UASAimAssistComponent_GetDrawCircles");
static_assert(sizeof(UASAimAssistComponent_GetDrawCircles) == 0x000001, "Wrong size on UASAimAssistComponent_GetDrawCircles");
static_assert(offsetof(UASAimAssistComponent_GetDrawCircles, ReturnValue) == 0x000000, "Member 'UASAimAssistComponent_GetDrawCircles::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.GetDrawCrosshair
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_GetDrawCrosshair final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_GetDrawCrosshair) == 0x000001, "Wrong alignment on UASAimAssistComponent_GetDrawCrosshair");
static_assert(sizeof(UASAimAssistComponent_GetDrawCrosshair) == 0x000001, "Wrong size on UASAimAssistComponent_GetDrawCrosshair");
static_assert(offsetof(UASAimAssistComponent_GetDrawCrosshair, ReturnValue) == 0x000000, "Member 'UASAimAssistComponent_GetDrawCrosshair::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.GetDrawSockets
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_GetDrawSockets final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_GetDrawSockets) == 0x000001, "Wrong alignment on UASAimAssistComponent_GetDrawSockets");
static_assert(sizeof(UASAimAssistComponent_GetDrawSockets) == 0x000001, "Wrong size on UASAimAssistComponent_GetDrawSockets");
static_assert(offsetof(UASAimAssistComponent_GetDrawSockets, ReturnValue) == 0x000000, "Member 'UASAimAssistComponent_GetDrawSockets::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.GetDrawWeights
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_GetDrawWeights final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_GetDrawWeights) == 0x000001, "Wrong alignment on UASAimAssistComponent_GetDrawWeights");
static_assert(sizeof(UASAimAssistComponent_GetDrawWeights) == 0x000001, "Wrong size on UASAimAssistComponent_GetDrawWeights");
static_assert(offsetof(UASAimAssistComponent_GetDrawWeights, ReturnValue) == 0x000000, "Member 'UASAimAssistComponent_GetDrawWeights::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.GetEnableAutoAim
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_GetEnableAutoAim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_GetEnableAutoAim) == 0x000001, "Wrong alignment on UASAimAssistComponent_GetEnableAutoAim");
static_assert(sizeof(UASAimAssistComponent_GetEnableAutoAim) == 0x000001, "Wrong size on UASAimAssistComponent_GetEnableAutoAim");
static_assert(offsetof(UASAimAssistComponent_GetEnableAutoAim, ReturnValue) == 0x000000, "Member 'UASAimAssistComponent_GetEnableAutoAim::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.GetEnableMagnetism
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_GetEnableMagnetism final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_GetEnableMagnetism) == 0x000001, "Wrong alignment on UASAimAssistComponent_GetEnableMagnetism");
static_assert(sizeof(UASAimAssistComponent_GetEnableMagnetism) == 0x000001, "Wrong size on UASAimAssistComponent_GetEnableMagnetism");
static_assert(offsetof(UASAimAssistComponent_GetEnableMagnetism, ReturnValue) == 0x000000, "Member 'UASAimAssistComponent_GetEnableMagnetism::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.GetEnableSnapToTarget
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_GetEnableSnapToTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_GetEnableSnapToTarget) == 0x000001, "Wrong alignment on UASAimAssistComponent_GetEnableSnapToTarget");
static_assert(sizeof(UASAimAssistComponent_GetEnableSnapToTarget) == 0x000001, "Wrong size on UASAimAssistComponent_GetEnableSnapToTarget");
static_assert(offsetof(UASAimAssistComponent_GetEnableSnapToTarget, ReturnValue) == 0x000000, "Member 'UASAimAssistComponent_GetEnableSnapToTarget::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.GetEnableStickiness
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_GetEnableStickiness final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_GetEnableStickiness) == 0x000001, "Wrong alignment on UASAimAssistComponent_GetEnableStickiness");
static_assert(sizeof(UASAimAssistComponent_GetEnableStickiness) == 0x000001, "Wrong size on UASAimAssistComponent_GetEnableStickiness");
static_assert(offsetof(UASAimAssistComponent_GetEnableStickiness, ReturnValue) == 0x000000, "Member 'UASAimAssistComponent_GetEnableStickiness::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.GetEnableZoneScaling
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_GetEnableZoneScaling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_GetEnableZoneScaling) == 0x000001, "Wrong alignment on UASAimAssistComponent_GetEnableZoneScaling");
static_assert(sizeof(UASAimAssistComponent_GetEnableZoneScaling) == 0x000001, "Wrong size on UASAimAssistComponent_GetEnableZoneScaling");
static_assert(offsetof(UASAimAssistComponent_GetEnableZoneScaling, ReturnValue) == 0x000000, "Member 'UASAimAssistComponent_GetEnableZoneScaling::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.GetMouseActive
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_GetMouseActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_GetMouseActive) == 0x000001, "Wrong alignment on UASAimAssistComponent_GetMouseActive");
static_assert(sizeof(UASAimAssistComponent_GetMouseActive) == 0x000001, "Wrong size on UASAimAssistComponent_GetMouseActive");
static_assert(offsetof(UASAimAssistComponent_GetMouseActive, ReturnValue) == 0x000000, "Member 'UASAimAssistComponent_GetMouseActive::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.IsAnimationBlocking
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_IsAnimationBlocking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_IsAnimationBlocking) == 0x000001, "Wrong alignment on UASAimAssistComponent_IsAnimationBlocking");
static_assert(sizeof(UASAimAssistComponent_IsAnimationBlocking) == 0x000001, "Wrong size on UASAimAssistComponent_IsAnimationBlocking");
static_assert(offsetof(UASAimAssistComponent_IsAnimationBlocking, ReturnValue) == 0x000000, "Member 'UASAimAssistComponent_IsAnimationBlocking::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.OnTargetDestroyed
// 0x0008 (0x0008 - 0x0000)
struct UASAimAssistComponent_OnTargetDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_OnTargetDestroyed) == 0x000008, "Wrong alignment on UASAimAssistComponent_OnTargetDestroyed");
static_assert(sizeof(UASAimAssistComponent_OnTargetDestroyed) == 0x000008, "Wrong size on UASAimAssistComponent_OnTargetDestroyed");
static_assert(offsetof(UASAimAssistComponent_OnTargetDestroyed, DestroyedActor) == 0x000000, "Member 'UASAimAssistComponent_OnTargetDestroyed::DestroyedActor' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetAimAssistDataAsset
// 0x0008 (0x0008 - 0x0000)
struct UASAimAssistComponent_SetAimAssistDataAsset final
{
public:
	class UUASAimAssistConfigDataAsset*           DataAsset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetAimAssistDataAsset) == 0x000008, "Wrong alignment on UASAimAssistComponent_SetAimAssistDataAsset");
static_assert(sizeof(UASAimAssistComponent_SetAimAssistDataAsset) == 0x000008, "Wrong size on UASAimAssistComponent_SetAimAssistDataAsset");
static_assert(offsetof(UASAimAssistComponent_SetAimAssistDataAsset, DataAsset) == 0x000000, "Member 'UASAimAssistComponent_SetAimAssistDataAsset::DataAsset' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetDrawAimBox
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_SetDrawAimBox final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetDrawAimBox) == 0x000001, "Wrong alignment on UASAimAssistComponent_SetDrawAimBox");
static_assert(sizeof(UASAimAssistComponent_SetDrawAimBox) == 0x000001, "Wrong size on UASAimAssistComponent_SetDrawAimBox");
static_assert(offsetof(UASAimAssistComponent_SetDrawAimBox, Enable) == 0x000000, "Member 'UASAimAssistComponent_SetDrawAimBox::Enable' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetDrawCircles
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_SetDrawCircles final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetDrawCircles) == 0x000001, "Wrong alignment on UASAimAssistComponent_SetDrawCircles");
static_assert(sizeof(UASAimAssistComponent_SetDrawCircles) == 0x000001, "Wrong size on UASAimAssistComponent_SetDrawCircles");
static_assert(offsetof(UASAimAssistComponent_SetDrawCircles, Enable) == 0x000000, "Member 'UASAimAssistComponent_SetDrawCircles::Enable' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetDrawCrosshair
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_SetDrawCrosshair final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetDrawCrosshair) == 0x000001, "Wrong alignment on UASAimAssistComponent_SetDrawCrosshair");
static_assert(sizeof(UASAimAssistComponent_SetDrawCrosshair) == 0x000001, "Wrong size on UASAimAssistComponent_SetDrawCrosshair");
static_assert(offsetof(UASAimAssistComponent_SetDrawCrosshair, Enable) == 0x000000, "Member 'UASAimAssistComponent_SetDrawCrosshair::Enable' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetDrawSockets
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_SetDrawSockets final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetDrawSockets) == 0x000001, "Wrong alignment on UASAimAssistComponent_SetDrawSockets");
static_assert(sizeof(UASAimAssistComponent_SetDrawSockets) == 0x000001, "Wrong size on UASAimAssistComponent_SetDrawSockets");
static_assert(offsetof(UASAimAssistComponent_SetDrawSockets, Enable) == 0x000000, "Member 'UASAimAssistComponent_SetDrawSockets::Enable' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetDrawWeights
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_SetDrawWeights final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetDrawWeights) == 0x000001, "Wrong alignment on UASAimAssistComponent_SetDrawWeights");
static_assert(sizeof(UASAimAssistComponent_SetDrawWeights) == 0x000001, "Wrong size on UASAimAssistComponent_SetDrawWeights");
static_assert(offsetof(UASAimAssistComponent_SetDrawWeights, Enable) == 0x000000, "Member 'UASAimAssistComponent_SetDrawWeights::Enable' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetEnableAutoAim
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_SetEnableAutoAim final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetEnableAutoAim) == 0x000001, "Wrong alignment on UASAimAssistComponent_SetEnableAutoAim");
static_assert(sizeof(UASAimAssistComponent_SetEnableAutoAim) == 0x000001, "Wrong size on UASAimAssistComponent_SetEnableAutoAim");
static_assert(offsetof(UASAimAssistComponent_SetEnableAutoAim, Enable) == 0x000000, "Member 'UASAimAssistComponent_SetEnableAutoAim::Enable' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetEnableMagnetism
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_SetEnableMagnetism final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetEnableMagnetism) == 0x000001, "Wrong alignment on UASAimAssistComponent_SetEnableMagnetism");
static_assert(sizeof(UASAimAssistComponent_SetEnableMagnetism) == 0x000001, "Wrong size on UASAimAssistComponent_SetEnableMagnetism");
static_assert(offsetof(UASAimAssistComponent_SetEnableMagnetism, Enable) == 0x000000, "Member 'UASAimAssistComponent_SetEnableMagnetism::Enable' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetEnableSnapToTarget
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_SetEnableSnapToTarget final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetEnableSnapToTarget) == 0x000001, "Wrong alignment on UASAimAssistComponent_SetEnableSnapToTarget");
static_assert(sizeof(UASAimAssistComponent_SetEnableSnapToTarget) == 0x000001, "Wrong size on UASAimAssistComponent_SetEnableSnapToTarget");
static_assert(offsetof(UASAimAssistComponent_SetEnableSnapToTarget, Enable) == 0x000000, "Member 'UASAimAssistComponent_SetEnableSnapToTarget::Enable' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetEnableStickiness
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_SetEnableStickiness final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetEnableStickiness) == 0x000001, "Wrong alignment on UASAimAssistComponent_SetEnableStickiness");
static_assert(sizeof(UASAimAssistComponent_SetEnableStickiness) == 0x000001, "Wrong size on UASAimAssistComponent_SetEnableStickiness");
static_assert(offsetof(UASAimAssistComponent_SetEnableStickiness, Enable) == 0x000000, "Member 'UASAimAssistComponent_SetEnableStickiness::Enable' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetEnableZoneScaling
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_SetEnableZoneScaling final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetEnableZoneScaling) == 0x000001, "Wrong alignment on UASAimAssistComponent_SetEnableZoneScaling");
static_assert(sizeof(UASAimAssistComponent_SetEnableZoneScaling) == 0x000001, "Wrong size on UASAimAssistComponent_SetEnableZoneScaling");
static_assert(offsetof(UASAimAssistComponent_SetEnableZoneScaling, Enable) == 0x000000, "Member 'UASAimAssistComponent_SetEnableZoneScaling::Enable' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetMouseActive
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistComponent_SetMouseActive final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetMouseActive) == 0x000001, "Wrong alignment on UASAimAssistComponent_SetMouseActive");
static_assert(sizeof(UASAimAssistComponent_SetMouseActive) == 0x000001, "Wrong size on UASAimAssistComponent_SetMouseActive");
static_assert(offsetof(UASAimAssistComponent_SetMouseActive, Enable) == 0x000000, "Member 'UASAimAssistComponent_SetMouseActive::Enable' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetScopeSizeFactor
// 0x0004 (0x0004 - 0x0000)
struct UASAimAssistComponent_SetScopeSizeFactor final
{
public:
	float                                         SizeFactor;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetScopeSizeFactor) == 0x000004, "Wrong alignment on UASAimAssistComponent_SetScopeSizeFactor");
static_assert(sizeof(UASAimAssistComponent_SetScopeSizeFactor) == 0x000004, "Wrong size on UASAimAssistComponent_SetScopeSizeFactor");
static_assert(offsetof(UASAimAssistComponent_SetScopeSizeFactor, SizeFactor) == 0x000000, "Member 'UASAimAssistComponent_SetScopeSizeFactor::SizeFactor' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetWeaponAimPoint
// 0x0010 (0x0010 - 0x0000)
struct UASAimAssistComponent_SetWeaponAimPoint final
{
public:
	struct FVector2D                              AimPoint;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetWeaponAimPoint) == 0x000008, "Wrong alignment on UASAimAssistComponent_SetWeaponAimPoint");
static_assert(sizeof(UASAimAssistComponent_SetWeaponAimPoint) == 0x000010, "Wrong size on UASAimAssistComponent_SetWeaponAimPoint");
static_assert(offsetof(UASAimAssistComponent_SetWeaponAimPoint, AimPoint) == 0x000000, "Member 'UASAimAssistComponent_SetWeaponAimPoint::AimPoint' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.SetWeaponBulletSpawnLocation
// 0x0018 (0x0018 - 0x0000)
struct UASAimAssistComponent_SetWeaponBulletSpawnLocation final
{
public:
	struct FVector                                BulletSpawnLocation;                               // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_SetWeaponBulletSpawnLocation) == 0x000008, "Wrong alignment on UASAimAssistComponent_SetWeaponBulletSpawnLocation");
static_assert(sizeof(UASAimAssistComponent_SetWeaponBulletSpawnLocation) == 0x000018, "Wrong size on UASAimAssistComponent_SetWeaponBulletSpawnLocation");
static_assert(offsetof(UASAimAssistComponent_SetWeaponBulletSpawnLocation, BulletSpawnLocation) == 0x000000, "Member 'UASAimAssistComponent_SetWeaponBulletSpawnLocation::BulletSpawnLocation' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.CalculateSocketDistance
// 0x0014 (0x0014 - 0x0000)
struct UASAimAssistComponent_CalculateSocketDistance final
{
public:
	struct FUASAimAssistTargetData                TargetData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_CalculateSocketDistance) == 0x000004, "Wrong alignment on UASAimAssistComponent_CalculateSocketDistance");
static_assert(sizeof(UASAimAssistComponent_CalculateSocketDistance) == 0x000014, "Wrong size on UASAimAssistComponent_CalculateSocketDistance");
static_assert(offsetof(UASAimAssistComponent_CalculateSocketDistance, TargetData) == 0x000000, "Member 'UASAimAssistComponent_CalculateSocketDistance::TargetData' has a wrong offset!");
static_assert(offsetof(UASAimAssistComponent_CalculateSocketDistance, ReturnValue) == 0x000010, "Member 'UASAimAssistComponent_CalculateSocketDistance::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.CalculateSocketWeight
// 0x0014 (0x0014 - 0x0000)
struct UASAimAssistComponent_CalculateSocketWeight final
{
public:
	struct FUASAimAssistTargetData                TargetData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_CalculateSocketWeight) == 0x000004, "Wrong alignment on UASAimAssistComponent_CalculateSocketWeight");
static_assert(sizeof(UASAimAssistComponent_CalculateSocketWeight) == 0x000014, "Wrong size on UASAimAssistComponent_CalculateSocketWeight");
static_assert(offsetof(UASAimAssistComponent_CalculateSocketWeight, TargetData) == 0x000000, "Member 'UASAimAssistComponent_CalculateSocketWeight::TargetData' has a wrong offset!");
static_assert(offsetof(UASAimAssistComponent_CalculateSocketWeight, ReturnValue) == 0x000010, "Member 'UASAimAssistComponent_CalculateSocketWeight::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.GetControlMultipliers
// 0x0008 (0x0008 - 0x0000)
struct UASAimAssistComponent_GetControlMultipliers final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_GetControlMultipliers) == 0x000004, "Wrong alignment on UASAimAssistComponent_GetControlMultipliers");
static_assert(sizeof(UASAimAssistComponent_GetControlMultipliers) == 0x000008, "Wrong size on UASAimAssistComponent_GetControlMultipliers");
static_assert(offsetof(UASAimAssistComponent_GetControlMultipliers, Pitch) == 0x000000, "Member 'UASAimAssistComponent_GetControlMultipliers::Pitch' has a wrong offset!");
static_assert(offsetof(UASAimAssistComponent_GetControlMultipliers, Yaw) == 0x000004, "Member 'UASAimAssistComponent_GetControlMultipliers::Yaw' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.GetCrosshairPosition
// 0x0010 (0x0010 - 0x0000)
struct UASAimAssistComponent_GetCrosshairPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_GetCrosshairPosition) == 0x000008, "Wrong alignment on UASAimAssistComponent_GetCrosshairPosition");
static_assert(sizeof(UASAimAssistComponent_GetCrosshairPosition) == 0x000010, "Wrong size on UASAimAssistComponent_GetCrosshairPosition");
static_assert(offsetof(UASAimAssistComponent_GetCrosshairPosition, ReturnValue) == 0x000000, "Member 'UASAimAssistComponent_GetCrosshairPosition::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.GetRotationToCrosshairDirection
// 0x0040 (0x0040 - 0x0000)
struct UASAimAssistComponent_GetRotationToCrosshairDirection final
{
public:
	struct FVector                                From;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TraceProfileName;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceToRotateToTarget;                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistComponent_GetRotationToCrosshairDirection) == 0x000008, "Wrong alignment on UASAimAssistComponent_GetRotationToCrosshairDirection");
static_assert(sizeof(UASAimAssistComponent_GetRotationToCrosshairDirection) == 0x000040, "Wrong size on UASAimAssistComponent_GetRotationToCrosshairDirection");
static_assert(offsetof(UASAimAssistComponent_GetRotationToCrosshairDirection, From) == 0x000000, "Member 'UASAimAssistComponent_GetRotationToCrosshairDirection::From' has a wrong offset!");
static_assert(offsetof(UASAimAssistComponent_GetRotationToCrosshairDirection, TraceProfileName) == 0x000018, "Member 'UASAimAssistComponent_GetRotationToCrosshairDirection::TraceProfileName' has a wrong offset!");
static_assert(offsetof(UASAimAssistComponent_GetRotationToCrosshairDirection, MinDistanceToRotateToTarget) == 0x000020, "Member 'UASAimAssistComponent_GetRotationToCrosshairDirection::MinDistanceToRotateToTarget' has a wrong offset!");
static_assert(offsetof(UASAimAssistComponent_GetRotationToCrosshairDirection, Distance) == 0x000024, "Member 'UASAimAssistComponent_GetRotationToCrosshairDirection::Distance' has a wrong offset!");
static_assert(offsetof(UASAimAssistComponent_GetRotationToCrosshairDirection, ReturnValue) == 0x000028, "Member 'UASAimAssistComponent_GetRotationToCrosshairDirection::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistComponent.ShouldSocketBeConsidered
// 0x0014 (0x0014 - 0x0000)
struct UASAimAssistComponent_ShouldSocketBeConsidered final
{
public:
	struct FUASAimAssistTargetData                TargetData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UASAimAssistComponent_ShouldSocketBeConsidered) == 0x000004, "Wrong alignment on UASAimAssistComponent_ShouldSocketBeConsidered");
static_assert(sizeof(UASAimAssistComponent_ShouldSocketBeConsidered) == 0x000014, "Wrong size on UASAimAssistComponent_ShouldSocketBeConsidered");
static_assert(offsetof(UASAimAssistComponent_ShouldSocketBeConsidered, TargetData) == 0x000000, "Member 'UASAimAssistComponent_ShouldSocketBeConsidered::TargetData' has a wrong offset!");
static_assert(offsetof(UASAimAssistComponent_ShouldSocketBeConsidered, ReturnValue) == 0x000010, "Member 'UASAimAssistComponent_ShouldSocketBeConsidered::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistTargetComponent.GetMoveSpeed
// 0x0004 (0x0004 - 0x0000)
struct UASAimAssistTargetComponent_GetMoveSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistTargetComponent_GetMoveSpeed) == 0x000004, "Wrong alignment on UASAimAssistTargetComponent_GetMoveSpeed");
static_assert(sizeof(UASAimAssistTargetComponent_GetMoveSpeed) == 0x000004, "Wrong size on UASAimAssistTargetComponent_GetMoveSpeed");
static_assert(offsetof(UASAimAssistTargetComponent_GetMoveSpeed, ReturnValue) == 0x000000, "Member 'UASAimAssistTargetComponent_GetMoveSpeed::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistTargetComponent.GetWeightByState
// 0x0004 (0x0004 - 0x0000)
struct UASAimAssistTargetComponent_GetWeightByState final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistTargetComponent_GetWeightByState) == 0x000004, "Wrong alignment on UASAimAssistTargetComponent_GetWeightByState");
static_assert(sizeof(UASAimAssistTargetComponent_GetWeightByState) == 0x000004, "Wrong size on UASAimAssistTargetComponent_GetWeightByState");
static_assert(offsetof(UASAimAssistTargetComponent_GetWeightByState, ReturnValue) == 0x000000, "Member 'UASAimAssistTargetComponent_GetWeightByState::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistTargetComponent.GetWeightLabel
// 0x0010 (0x0010 - 0x0000)
struct UASAimAssistTargetComponent_GetWeightLabel final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistTargetComponent_GetWeightLabel) == 0x000008, "Wrong alignment on UASAimAssistTargetComponent_GetWeightLabel");
static_assert(sizeof(UASAimAssistTargetComponent_GetWeightLabel) == 0x000010, "Wrong size on UASAimAssistTargetComponent_GetWeightLabel");
static_assert(offsetof(UASAimAssistTargetComponent_GetWeightLabel, ReturnValue) == 0x000000, "Member 'UASAimAssistTargetComponent_GetWeightLabel::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistTargetComponent.Init
// 0x0008 (0x0008 - 0x0000)
struct UASAimAssistTargetComponent_Init final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistTargetComponent_Init) == 0x000008, "Wrong alignment on UASAimAssistTargetComponent_Init");
static_assert(sizeof(UASAimAssistTargetComponent_Init) == 0x000008, "Wrong size on UASAimAssistTargetComponent_Init");
static_assert(offsetof(UASAimAssistTargetComponent_Init, Mesh) == 0x000000, "Member 'UASAimAssistTargetComponent_Init::Mesh' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistTargetComponent.ShouldAlwaysBlockTrace
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistTargetComponent_ShouldAlwaysBlockTrace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistTargetComponent_ShouldAlwaysBlockTrace) == 0x000001, "Wrong alignment on UASAimAssistTargetComponent_ShouldAlwaysBlockTrace");
static_assert(sizeof(UASAimAssistTargetComponent_ShouldAlwaysBlockTrace) == 0x000001, "Wrong size on UASAimAssistTargetComponent_ShouldAlwaysBlockTrace");
static_assert(offsetof(UASAimAssistTargetComponent_ShouldAlwaysBlockTrace, ReturnValue) == 0x000000, "Member 'UASAimAssistTargetComponent_ShouldAlwaysBlockTrace::ReturnValue' has a wrong offset!");

// Function AimAssistSystem.UASAimAssistTargetComponent.ShouldConsiderWeight
// 0x0001 (0x0001 - 0x0000)
struct UASAimAssistTargetComponent_ShouldConsiderWeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UASAimAssistTargetComponent_ShouldConsiderWeight) == 0x000001, "Wrong alignment on UASAimAssistTargetComponent_ShouldConsiderWeight");
static_assert(sizeof(UASAimAssistTargetComponent_ShouldConsiderWeight) == 0x000001, "Wrong size on UASAimAssistTargetComponent_ShouldConsiderWeight");
static_assert(offsetof(UASAimAssistTargetComponent_ShouldConsiderWeight, ReturnValue) == 0x000000, "Member 'UASAimAssistTargetComponent_ShouldConsiderWeight::ReturnValue' has a wrong offset!");

}

