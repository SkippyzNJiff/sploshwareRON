#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_Tablet_MapMarker

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"
#include "st_PreMissionMarkers_structs.hpp"


namespace SDK::Params
{

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.ExecuteUbergraph_W_PreMission_Tablet_MapMarker
// 0x0118 (0x0118 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NewParam;                       // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_NewParam2;                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct Fst_PreMissionMarkers                  CallFunc_GetDataTableRowFromName_OutRow;           // 0x0018(0x0080)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotPlayerState*                 CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue; // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasRotation_Rotates;                      // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasRotation_Rotates_1;                    // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotPlayerState*                 CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue_1; // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x00C4(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasDrawPermission_ReturnValue;            // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_Rotation_ImplicitCast;          // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Rotation_ImplicitCast_1;        // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker) == 0x000118, "Wrong size on W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, EntryPoint) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, K2Node_CustomEvent_NewParam) == 0x000004, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::K2Node_CustomEvent_NewParam' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, K2Node_CustomEvent_NewParam2) == 0x000010, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::K2Node_CustomEvent_NewParam2' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_GetDataTableRowFromName_OutRow) == 0x000018, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000098, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, K2Node_Event_IsDesignTime) == 0x000099, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue) == 0x0000A0, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_IsValid_ReturnValue) == 0x0000A8, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_HasRotation_Rotates) == 0x0000A9, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_HasRotation_Rotates' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_HasRotation_Rotates_1) == 0x0000AA, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_HasRotation_Rotates_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_GetOwningPlayer_ReturnValue) == 0x0000B0, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue_1) == 0x0000B8, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000C0, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, K2Node_Event_MyGeometry) == 0x0000C4, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, K2Node_Event_InDeltaTime) == 0x0000FC, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_HasDrawPermission_ReturnValue) == 0x000100, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_HasDrawPermission_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, K2Node_VariableSet_Rotation_ImplicitCast) == 0x000108, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::K2Node_VariableSet_Rotation_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, K2Node_VariableSet_Rotation_ImplicitCast_1) == 0x000110, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::K2Node_VariableSet_Rotation_ImplicitCast_1' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.GetPlayerPlanningNumber
// 0x0004 (0x0004 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_GetPlayerPlanningNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_GetPlayerPlanningNumber) == 0x000004, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_GetPlayerPlanningNumber");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_GetPlayerPlanningNumber) == 0x000004, "Wrong size on W_PreMission_Tablet_MapMarker_C_GetPlayerPlanningNumber");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_GetPlayerPlanningNumber, ReturnValue) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_GetPlayerPlanningNumber::ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.HasAngleChanged
// 0x0002 (0x0002 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_HasAngleChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_HasAngleChanged) == 0x000001, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_HasAngleChanged");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_HasAngleChanged) == 0x000002, "Wrong size on W_PreMission_Tablet_MapMarker_C_HasAngleChanged");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_HasAngleChanged, ReturnValue) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_HasAngleChanged::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_HasAngleChanged, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000001, "Member 'W_PreMission_Tablet_MapMarker_C_HasAngleChanged::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.HasRotation
// 0x0002 (0x0002 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_HasRotation final
{
public:
	bool                                          Rotates_0;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_HasRotation) == 0x000001, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_HasRotation");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_HasRotation) == 0x000002, "Wrong size on W_PreMission_Tablet_MapMarker_C_HasRotation");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_HasRotation, Rotates_0) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_HasRotation::Rotates_0' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_HasRotation, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'W_PreMission_Tablet_MapMarker_C_HasRotation::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.OnMouseButtonDown
// 0x03A8 (0x03A8 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue; // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0180(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0238(0x00B8)()
	struct FEventReply                            CallFunc_CaptureMouse_ReturnValue;                 // 0x02F0(0x00B8)()
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown) == 0x0003A8, "Wrong size on W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, ReturnValue) == 0x0000B0, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x000168, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue) == 0x000178, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, CallFunc_Unhandled_ReturnValue) == 0x000180, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000238, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, CallFunc_CaptureMouse_ReturnValue) == 0x0002F0, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::CallFunc_CaptureMouse_ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.OnMouseButtonUp
// 0x0470 (0x0470 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0168(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0188(0x00B8)()
	struct FEventReply                            CallFunc_ReleaseMouseCapture_ReturnValue;          // 0x0240(0x00B8)()
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x02F8(0x00B8)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x03B8(0x00B8)()
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp) == 0x000470, "Wrong size on W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, MouseEvent) == 0x000038, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, ReturnValue) == 0x0000B0, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000168, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000180, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000181, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue) == 0x000188, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_ReleaseMouseCapture_ReturnValue) == 0x000240, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_ReleaseMouseCapture_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_Unhandled_ReturnValue) == 0x0002F8, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_IsValid_ReturnValue) == 0x0003B0, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue_1) == 0x0003B8, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue_1' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.OnMouseMove
// 0x0370 (0x0370 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_OnMouseMove final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FVector2D                              CallFunc_GetNormalizedClick_ReturnValue;           // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x01C8(0x00B8)()
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0280(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x02A8(0x00B8)()
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_OnMouseMove) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_OnMouseMove");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_OnMouseMove) == 0x000370, "Wrong size on W_PreMission_Tablet_MapMarker_C_OnMouseMove");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, MyGeometry) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, MouseEvent) == 0x000038, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, ReturnValue) == 0x0000B0, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_GetNormalizedClick_ReturnValue) == 0x000168, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_GetNormalizedClick_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_BreakVector2D_X) == 0x000178, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_BreakVector2D_Y) == 0x000180, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_BreakVector2D_X_1) == 0x000188, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_BreakVector2D_Y_1) == 0x000190, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_MakeVector_ReturnValue) == 0x000198, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_MakeVector_ReturnValue_1) == 0x0001B0, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_Unhandled_ReturnValue) == 0x0001C8, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_FindLookAtRotation_ReturnValue) == 0x000280, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_BreakRotator_Roll) == 0x000298, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_BreakRotator_Pitch) == 0x00029C, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_BreakRotator_Yaw) == 0x0002A0, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_Handled_ReturnValue) == 0x0002A8, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000360, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000368, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_PreConstruct) == 0x000001, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_PreConstruct");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_PreConstruct) == 0x000001, "Wrong size on W_PreMission_Tablet_MapMarker_C_PreConstruct");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.SetRotation
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_SetRotation final
{
public:
	double                                        NewRotation;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_SetRotation) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_SetRotation");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_SetRotation) == 0x000010, "Wrong size on W_PreMission_Tablet_MapMarker_C_SetRotation");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetRotation, NewRotation) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_SetRotation::NewRotation' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetRotation, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'W_PreMission_Tablet_MapMarker_C_SetRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetRotation, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x00000C, "Member 'W_PreMission_Tablet_MapMarker_C_SetRotation::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.SetStyle
// 0x00D0 (0x00D0 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_SetStyle final
{
public:
	class FName                                   MarkerName_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct Fst_PreMissionMarkers                  CallFunc_GetDataTableRowFromName_OutRow;           // 0x0008(0x0080)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B[0x1];                                       // 0x008B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlanningPlayerNumber_ReturnValue;      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      CallFunc_Create_ReturnValue;                       // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default;                             // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_SetStyle) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_SetStyle");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_SetStyle) == 0x0000D0, "Wrong size on W_PreMission_Tablet_MapMarker_C_SetStyle");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, MarkerName_0) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::MarkerName_0' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_GetDataTableRowFromName_OutRow) == 0x000008, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000088, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_Not_PreBool_ReturnValue) == 0x000089, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_IsValid_ReturnValue) == 0x00008A, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_GetPlanningPlayerNumber_ReturnValue) == 0x00008C, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_GetPlanningPlayerNumber_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_Create_ReturnValue) == 0x000090, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000098, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_IsValid_ReturnValue_1) == 0x0000A0, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_BooleanAND_ReturnValue) == 0x0000A1, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000A2, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_IsValid_ReturnValue_2) == 0x0000A3, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x0000A8, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_BooleanAND_ReturnValue_1) == 0x0000B0, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_BooleanAND_ReturnValue_2) == 0x0000B1, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, Temp_bool_Variable) == 0x0000B2, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_BooleanOR_ReturnValue) == 0x0000B3, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, K2Node_Select_Default) == 0x0000B8, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, Temp_bool_Variable_1) == 0x0000C0, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, K2Node_Select_Default_1) == 0x0000C8, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::K2Node_Select_Default_1' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.SetupMarker
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_SetupMarker final
{
public:
	class FName                                   NewParam;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewParam2;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_SetupMarker) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_SetupMarker");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_SetupMarker) == 0x000010, "Wrong size on W_PreMission_Tablet_MapMarker_C_SetupMarker");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetupMarker, NewParam) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_SetupMarker::NewParam' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetupMarker, NewParam2) == 0x000008, "Member 'W_PreMission_Tablet_MapMarker_C_SetupMarker::NewParam2' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_Tick) == 0x000004, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_Tick");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_Tick) == 0x00003C, "Wrong size on W_PreMission_Tablet_MapMarker_C_Tick");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_Tick, MyGeometry) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_Tick, InDeltaTime) == 0x000038, "Member 'W_PreMission_Tablet_MapMarker_C_Tick::InDeltaTime' has a wrong offset!");

}

