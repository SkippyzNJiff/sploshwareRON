#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PoseSearch

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PoseSearch_structs.hpp"
#include "StructUtils_structs.hpp"


namespace SDK
{

// Class PoseSearch.MotionMatchingAnimNodeLibrary
// 0x0000 (0x0028 - 0x0028)
class UMotionMatchingAnimNodeLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FMotionMatchingAnimNodeReference ConvertToMotionMatchingNode(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result);
	static void ConvertToMotionMatchingNodePure(const struct FAnimNodeReference& Node, struct FMotionMatchingAnimNodeReference* MotionMatchingNode, bool* Result);
	static void ForceInterruptNextUpdate(const struct FMotionMatchingAnimNodeReference& MotionMatchingNode);
	static void ResetDatabasesToSearch(const struct FMotionMatchingAnimNodeReference& MotionMatchingNode, bool bForceInterrupt);
	static void SetDatabasesToSearch(const struct FMotionMatchingAnimNodeReference& MotionMatchingNode, const TArray<class UPoseSearchDatabase*>& Databases, bool bForceInterruptIfNew);
	static void SetDatabaseToSearch(const struct FMotionMatchingAnimNodeReference& MotionMatchingNode, class UPoseSearchDatabase* Database, bool bForceInterruptIfNew);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MotionMatchingAnimNodeLibrary">();
	}
	static class UMotionMatchingAnimNodeLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMotionMatchingAnimNodeLibrary>();
	}
};
static_assert(alignof(UMotionMatchingAnimNodeLibrary) == 0x000008, "Wrong alignment on UMotionMatchingAnimNodeLibrary");
static_assert(sizeof(UMotionMatchingAnimNodeLibrary) == 0x000028, "Wrong size on UMotionMatchingAnimNodeLibrary");

// Class PoseSearch.PoseSearchDatabase
// 0x00E8 (0x0118 - 0x0030)
class UPoseSearchDatabase final : public UDataAsset
{
public:
	class UPoseSearchSchema*                      Schema;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoseSearchExcludeFromDatabaseParameters ExcludeFromDatabaseParameters;                   // 0x0038(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FInstancedStruct>               AnimationAssets;                                   // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EPoseSearchMode                               PoseSearchMode;                                    // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPrincipalComponents;                       // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KDTreeMaxLeafSize;                                 // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KDTreeQueryNumNeighbors;                           // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipSearchIfPossible;                             // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xB7];                                      // 0x0061(0x00B7)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchDatabase">();
	}
	static class UPoseSearchDatabase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchDatabase>();
	}
};
static_assert(alignof(UPoseSearchDatabase) == 0x000008, "Wrong alignment on UPoseSearchDatabase");
static_assert(sizeof(UPoseSearchDatabase) == 0x000118, "Wrong size on UPoseSearchDatabase");
static_assert(offsetof(UPoseSearchDatabase, Schema) == 0x000030, "Member 'UPoseSearchDatabase::Schema' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, ExcludeFromDatabaseParameters) == 0x000038, "Member 'UPoseSearchDatabase::ExcludeFromDatabaseParameters' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, AnimationAssets) == 0x000040, "Member 'UPoseSearchDatabase::AnimationAssets' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, PoseSearchMode) == 0x000050, "Member 'UPoseSearchDatabase::PoseSearchMode' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, NumberOfPrincipalComponents) == 0x000054, "Member 'UPoseSearchDatabase::NumberOfPrincipalComponents' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, KDTreeMaxLeafSize) == 0x000058, "Member 'UPoseSearchDatabase::KDTreeMaxLeafSize' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, KDTreeQueryNumNeighbors) == 0x00005C, "Member 'UPoseSearchDatabase::KDTreeQueryNumNeighbors' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, bSkipSearchIfPossible) == 0x000060, "Member 'UPoseSearchDatabase::bSkipSearchIfPossible' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel
// 0x0018 (0x0040 - 0x0028)
class UPoseSearchFeatureChannel : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChannelDataOffset;                                 // 0x0038(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ChannelCardinality;                                // 0x003C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel">();
	}
	static class UPoseSearchFeatureChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel");
static_assert(sizeof(UPoseSearchFeatureChannel) == 0x000040, "Wrong size on UPoseSearchFeatureChannel");
static_assert(offsetof(UPoseSearchFeatureChannel, ChannelDataOffset) == 0x000038, "Member 'UPoseSearchFeatureChannel::ChannelDataOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel, ChannelCardinality) == 0x00003C, "Member 'UPoseSearchFeatureChannel::ChannelCardinality' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_FilterCrashingLegs
// 0x0050 (0x0090 - 0x0040)
class UPoseSearchFeatureChannel_FilterCrashingLegs final : public UPoseSearchFeatureChannel
{
public:
	struct FBoneReference                         LeftThigh;                                         // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightThigh;                                        // 0x0050(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftFoot;                                          // 0x0060(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightFoot;                                         // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          LeftThighIdx;                                      // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          RightThighIdx;                                     // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          LeftFootIdx;                                       // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          RightFootIdx;                                      // 0x0087(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AllowedTolerance;                                  // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_FilterCrashingLegs">();
	}
	static class UPoseSearchFeatureChannel_FilterCrashingLegs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_FilterCrashingLegs>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_FilterCrashingLegs) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_FilterCrashingLegs");
static_assert(sizeof(UPoseSearchFeatureChannel_FilterCrashingLegs) == 0x000090, "Wrong size on UPoseSearchFeatureChannel_FilterCrashingLegs");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, LeftThigh) == 0x000040, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::LeftThigh' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, RightThigh) == 0x000050, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::RightThigh' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, LeftFoot) == 0x000060, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::LeftFoot' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, RightFoot) == 0x000070, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::RightFoot' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, Weight) == 0x000080, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, LeftThighIdx) == 0x000084, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::LeftThighIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, RightThighIdx) == 0x000085, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::RightThighIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, LeftFootIdx) == 0x000086, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::LeftFootIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, RightFootIdx) == 0x000087, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::RightFootIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, InputQueryPose) == 0x000088, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::InputQueryPose' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, AllowedTolerance) == 0x00008C, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::AllowedTolerance' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_GroupBase
// 0x0000 (0x0040 - 0x0040)
class UPoseSearchFeatureChannel_GroupBase : public UPoseSearchFeatureChannel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_GroupBase">();
	}
	static class UPoseSearchFeatureChannel_GroupBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_GroupBase>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_GroupBase) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_GroupBase");
static_assert(sizeof(UPoseSearchFeatureChannel_GroupBase) == 0x000040, "Wrong size on UPoseSearchFeatureChannel_GroupBase");

// Class PoseSearch.PoseSearchFeatureChannel_Group
// 0x0010 (0x0050 - 0x0040)
class UPoseSearchFeatureChannel_Group final : public UPoseSearchFeatureChannel_GroupBase
{
public:
	TArray<class UPoseSearchFeatureChannel*>      SubChannels;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Group">();
	}
	static class UPoseSearchFeatureChannel_Group* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Group>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Group) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Group");
static_assert(sizeof(UPoseSearchFeatureChannel_Group) == 0x000050, "Wrong size on UPoseSearchFeatureChannel_Group");
static_assert(offsetof(UPoseSearchFeatureChannel_Group, SubChannels) == 0x000040, "Member 'UPoseSearchFeatureChannel_Group::SubChannels' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Heading
// 0x0030 (0x0070 - 0x0040)
class UPoseSearchFeatureChannel_Heading final : public UPoseSearchFeatureChannel
{
public:
	struct FBoneReference                         bone;                                              // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleTimeOffset;                                  // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeadingAxis                                  HeadingAxis;                                       // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SchemaBoneIdx;                                     // 0x0059(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DebugColor;                                        // 0x005C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentStrippingVector                     ComponentStripping;                                // 0x006D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Heading">();
	}
	static class UPoseSearchFeatureChannel_Heading* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Heading>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Heading) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Heading");
static_assert(sizeof(UPoseSearchFeatureChannel_Heading) == 0x000070, "Wrong size on UPoseSearchFeatureChannel_Heading");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, bone) == 0x000040, "Member 'UPoseSearchFeatureChannel_Heading::bone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, Weight) == 0x000050, "Member 'UPoseSearchFeatureChannel_Heading::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, SampleTimeOffset) == 0x000054, "Member 'UPoseSearchFeatureChannel_Heading::SampleTimeOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, HeadingAxis) == 0x000058, "Member 'UPoseSearchFeatureChannel_Heading::HeadingAxis' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, SchemaBoneIdx) == 0x000059, "Member 'UPoseSearchFeatureChannel_Heading::SchemaBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, DebugColor) == 0x00005C, "Member 'UPoseSearchFeatureChannel_Heading::DebugColor' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, InputQueryPose) == 0x00006C, "Member 'UPoseSearchFeatureChannel_Heading::InputQueryPose' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, ComponentStripping) == 0x00006D, "Member 'UPoseSearchFeatureChannel_Heading::ComponentStripping' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Padding
// 0x0008 (0x0048 - 0x0040)
class UPoseSearchFeatureChannel_Padding final : public UPoseSearchFeatureChannel
{
public:
	int32                                         PaddingSize;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Padding">();
	}
	static class UPoseSearchFeatureChannel_Padding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Padding>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Padding) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Padding");
static_assert(sizeof(UPoseSearchFeatureChannel_Padding) == 0x000048, "Wrong size on UPoseSearchFeatureChannel_Padding");
static_assert(offsetof(UPoseSearchFeatureChannel_Padding, PaddingSize) == 0x000040, "Member 'UPoseSearchFeatureChannel_Padding::PaddingSize' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_PermutationTime
// 0x0008 (0x0048 - 0x0040)
class UPoseSearchFeatureChannel_PermutationTime final : public UPoseSearchFeatureChannel
{
public:
	float                                         Weight;                                            // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_PermutationTime">();
	}
	static class UPoseSearchFeatureChannel_PermutationTime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_PermutationTime>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_PermutationTime) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_PermutationTime");
static_assert(sizeof(UPoseSearchFeatureChannel_PermutationTime) == 0x000048, "Wrong size on UPoseSearchFeatureChannel_PermutationTime");
static_assert(offsetof(UPoseSearchFeatureChannel_PermutationTime, Weight) == 0x000040, "Member 'UPoseSearchFeatureChannel_PermutationTime::Weight' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Phase
// 0x0030 (0x0070 - 0x0040)
class UPoseSearchFeatureChannel_Phase final : public UPoseSearchFeatureChannel
{
public:
	struct FBoneReference                         bone;                                              // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SchemaBoneIdx;                                     // 0x0054(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DebugColor;                                        // 0x0058(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Phase">();
	}
	static class UPoseSearchFeatureChannel_Phase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Phase>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Phase) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Phase");
static_assert(sizeof(UPoseSearchFeatureChannel_Phase) == 0x000070, "Wrong size on UPoseSearchFeatureChannel_Phase");
static_assert(offsetof(UPoseSearchFeatureChannel_Phase, bone) == 0x000040, "Member 'UPoseSearchFeatureChannel_Phase::bone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Phase, Weight) == 0x000050, "Member 'UPoseSearchFeatureChannel_Phase::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Phase, SchemaBoneIdx) == 0x000054, "Member 'UPoseSearchFeatureChannel_Phase::SchemaBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Phase, DebugColor) == 0x000058, "Member 'UPoseSearchFeatureChannel_Phase::DebugColor' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Phase, InputQueryPose) == 0x000068, "Member 'UPoseSearchFeatureChannel_Phase::InputQueryPose' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Pose
// 0x0040 (0x0080 - 0x0040)
class UPoseSearchFeatureChannel_Pose final : public UPoseSearchFeatureChannel_GroupBase
{
public:
	float                                         Weight;                                            // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPoseSearchBone>                SampledBones;                                      // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int8>                                  SchemaBoneIdx;                                     // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCharacterSpaceVelocities;                      // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPoseSearchFeatureChannel*>      SubChannels;                                       // 0x0070(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Pose">();
	}
	static class UPoseSearchFeatureChannel_Pose* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Pose>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Pose) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Pose");
static_assert(sizeof(UPoseSearchFeatureChannel_Pose) == 0x000080, "Wrong size on UPoseSearchFeatureChannel_Pose");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, Weight) == 0x000040, "Member 'UPoseSearchFeatureChannel_Pose::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, SampledBones) == 0x000048, "Member 'UPoseSearchFeatureChannel_Pose::SampledBones' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, SchemaBoneIdx) == 0x000058, "Member 'UPoseSearchFeatureChannel_Pose::SchemaBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, InputQueryPose) == 0x000068, "Member 'UPoseSearchFeatureChannel_Pose::InputQueryPose' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, bUseCharacterSpaceVelocities) == 0x000069, "Member 'UPoseSearchFeatureChannel_Pose::bUseCharacterSpaceVelocities' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, SubChannels) == 0x000070, "Member 'UPoseSearchFeatureChannel_Pose::SubChannels' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Position
// 0x0040 (0x0080 - 0x0040)
class UPoseSearchFeatureChannel_Position final : public UPoseSearchFeatureChannel
{
public:
	struct FBoneReference                         bone;                                              // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         OriginBone;                                        // 0x0050(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleTimeOffset;                                  // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SchemaBoneIdx;                                     // 0x0068(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SchemaOriginBoneIdx;                               // 0x0069(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DebugColor;                                        // 0x006C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentStrippingVector                     ComponentStripping;                                // 0x007D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPermutationTimeType                          PermutationTimeType;                               // 0x007E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7F[0x1];                                       // 0x007F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Position">();
	}
	static class UPoseSearchFeatureChannel_Position* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Position>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Position) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Position");
static_assert(sizeof(UPoseSearchFeatureChannel_Position) == 0x000080, "Wrong size on UPoseSearchFeatureChannel_Position");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, bone) == 0x000040, "Member 'UPoseSearchFeatureChannel_Position::bone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, OriginBone) == 0x000050, "Member 'UPoseSearchFeatureChannel_Position::OriginBone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, Weight) == 0x000060, "Member 'UPoseSearchFeatureChannel_Position::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, SampleTimeOffset) == 0x000064, "Member 'UPoseSearchFeatureChannel_Position::SampleTimeOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, SchemaBoneIdx) == 0x000068, "Member 'UPoseSearchFeatureChannel_Position::SchemaBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, SchemaOriginBoneIdx) == 0x000069, "Member 'UPoseSearchFeatureChannel_Position::SchemaOriginBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, DebugColor) == 0x00006C, "Member 'UPoseSearchFeatureChannel_Position::DebugColor' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, InputQueryPose) == 0x00007C, "Member 'UPoseSearchFeatureChannel_Position::InputQueryPose' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, ComponentStripping) == 0x00007D, "Member 'UPoseSearchFeatureChannel_Position::ComponentStripping' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, PermutationTimeType) == 0x00007E, "Member 'UPoseSearchFeatureChannel_Position::PermutationTimeType' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_SamplingTime
// 0x0008 (0x0048 - 0x0040)
class UPoseSearchFeatureChannel_SamplingTime final : public UPoseSearchFeatureChannel
{
public:
	float                                         Weight;                                            // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToMatch;                                       // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_SamplingTime">();
	}
	static class UPoseSearchFeatureChannel_SamplingTime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_SamplingTime>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_SamplingTime) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_SamplingTime");
static_assert(sizeof(UPoseSearchFeatureChannel_SamplingTime) == 0x000048, "Wrong size on UPoseSearchFeatureChannel_SamplingTime");
static_assert(offsetof(UPoseSearchFeatureChannel_SamplingTime, Weight) == 0x000040, "Member 'UPoseSearchFeatureChannel_SamplingTime::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_SamplingTime, TimeToMatch) == 0x000044, "Member 'UPoseSearchFeatureChannel_SamplingTime::TimeToMatch' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Trajectory
// 0x0028 (0x0068 - 0x0040)
class UPoseSearchFeatureChannel_Trajectory final : public UPoseSearchFeatureChannel_GroupBase
{
public:
	float                                         Weight;                                            // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPoseSearchTrajectorySample>    Samples;                                           // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPoseSearchFeatureChannel*>      SubChannels;                                       // 0x0058(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Trajectory">();
	}
	static class UPoseSearchFeatureChannel_Trajectory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Trajectory>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Trajectory) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Trajectory");
static_assert(sizeof(UPoseSearchFeatureChannel_Trajectory) == 0x000068, "Wrong size on UPoseSearchFeatureChannel_Trajectory");
static_assert(offsetof(UPoseSearchFeatureChannel_Trajectory, Weight) == 0x000040, "Member 'UPoseSearchFeatureChannel_Trajectory::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Trajectory, Samples) == 0x000048, "Member 'UPoseSearchFeatureChannel_Trajectory::Samples' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Trajectory, SubChannels) == 0x000058, "Member 'UPoseSearchFeatureChannel_Trajectory::SubChannels' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Velocity
// 0x0030 (0x0070 - 0x0040)
class UPoseSearchFeatureChannel_Velocity final : public UPoseSearchFeatureChannel
{
public:
	struct FBoneReference                         bone;                                              // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleTimeOffset;                                  // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SchemaBoneIdx;                                     // 0x0058(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DebugColor;                                        // 0x005C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCharacterSpaceVelocities;                      // 0x006D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNormalize;                                        // 0x006E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentStrippingVector                     ComponentStripping;                                // 0x006F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Velocity">();
	}
	static class UPoseSearchFeatureChannel_Velocity* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Velocity>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Velocity) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Velocity");
static_assert(sizeof(UPoseSearchFeatureChannel_Velocity) == 0x000070, "Wrong size on UPoseSearchFeatureChannel_Velocity");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, bone) == 0x000040, "Member 'UPoseSearchFeatureChannel_Velocity::bone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, Weight) == 0x000050, "Member 'UPoseSearchFeatureChannel_Velocity::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, SampleTimeOffset) == 0x000054, "Member 'UPoseSearchFeatureChannel_Velocity::SampleTimeOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, SchemaBoneIdx) == 0x000058, "Member 'UPoseSearchFeatureChannel_Velocity::SchemaBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, DebugColor) == 0x00005C, "Member 'UPoseSearchFeatureChannel_Velocity::DebugColor' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, InputQueryPose) == 0x00006C, "Member 'UPoseSearchFeatureChannel_Velocity::InputQueryPose' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, bUseCharacterSpaceVelocities) == 0x00006D, "Member 'UPoseSearchFeatureChannel_Velocity::bUseCharacterSpaceVelocities' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, bNormalize) == 0x00006E, "Member 'UPoseSearchFeatureChannel_Velocity::bNormalize' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, ComponentStripping) == 0x00006F, "Member 'UPoseSearchFeatureChannel_Velocity::ComponentStripping' has a wrong offset!");

// Class PoseSearch.PoseSearchNormalizationSet
// 0x0010 (0x0040 - 0x0030)
class UPoseSearchNormalizationSet final : public UDataAsset
{
public:
	TArray<class UPoseSearchDatabase*>            Databases;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchNormalizationSet">();
	}
	static class UPoseSearchNormalizationSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchNormalizationSet>();
	}
};
static_assert(alignof(UPoseSearchNormalizationSet) == 0x000008, "Wrong alignment on UPoseSearchNormalizationSet");
static_assert(sizeof(UPoseSearchNormalizationSet) == 0x000040, "Wrong size on UPoseSearchNormalizationSet");
static_assert(offsetof(UPoseSearchNormalizationSet, Databases) == 0x000030, "Member 'UPoseSearchNormalizationSet::Databases' has a wrong offset!");

// Class PoseSearch.PoseSearchSchema
// 0x0088 (0x00B8 - 0x0030)
class UPoseSearchSchema final : public UDataAsset
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeleton*                              Skeleton;                                          // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPoseSearchFeatureChannel*>      Channels;                                          // 0x0048(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UPoseSearchFeatureChannel*>      FinalizedChannels;                                 // 0x0058(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UMirrorDataTable*                       MirrorDataTable;                                   // 0x0068(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPoseSearchDataPreprocessor                   DataPreprocessor;                                  // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SchemaCardinality;                                 // 0x0074(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 BoneReferences;                                    // 0x0078(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<uint16>                                BoneIndicesWithParents;                            // 0x0088(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                         ContinuingPoseCostBias;                            // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseCostBias;                                      // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopingCostBias;                                   // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPermutations;                              // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PermutationsSampleRate;                            // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PermutationsTimeOffset;                            // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddDataPadding;                                   // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInjectAdditionalDebugChannels;                    // 0x00B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchSchema">();
	}
	static class UPoseSearchSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchSchema>();
	}
};
static_assert(alignof(UPoseSearchSchema) == 0x000008, "Wrong alignment on UPoseSearchSchema");
static_assert(sizeof(UPoseSearchSchema) == 0x0000B8, "Wrong size on UPoseSearchSchema");
static_assert(offsetof(UPoseSearchSchema, Skeleton) == 0x000038, "Member 'UPoseSearchSchema::Skeleton' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, SampleRate) == 0x000040, "Member 'UPoseSearchSchema::SampleRate' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, Channels) == 0x000048, "Member 'UPoseSearchSchema::Channels' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, FinalizedChannels) == 0x000058, "Member 'UPoseSearchSchema::FinalizedChannels' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, MirrorDataTable) == 0x000068, "Member 'UPoseSearchSchema::MirrorDataTable' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, DataPreprocessor) == 0x000070, "Member 'UPoseSearchSchema::DataPreprocessor' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, SchemaCardinality) == 0x000074, "Member 'UPoseSearchSchema::SchemaCardinality' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, BoneReferences) == 0x000078, "Member 'UPoseSearchSchema::BoneReferences' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, BoneIndicesWithParents) == 0x000088, "Member 'UPoseSearchSchema::BoneIndicesWithParents' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, ContinuingPoseCostBias) == 0x000098, "Member 'UPoseSearchSchema::ContinuingPoseCostBias' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, BaseCostBias) == 0x00009C, "Member 'UPoseSearchSchema::BaseCostBias' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, LoopingCostBias) == 0x0000A0, "Member 'UPoseSearchSchema::LoopingCostBias' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, NumberOfPermutations) == 0x0000A4, "Member 'UPoseSearchSchema::NumberOfPermutations' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, PermutationsSampleRate) == 0x0000A8, "Member 'UPoseSearchSchema::PermutationsSampleRate' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, PermutationsTimeOffset) == 0x0000AC, "Member 'UPoseSearchSchema::PermutationsTimeOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, bAddDataPadding) == 0x0000B0, "Member 'UPoseSearchSchema::bAddDataPadding' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, bInjectAdditionalDebugChannels) == 0x0000B1, "Member 'UPoseSearchSchema::bInjectAdditionalDebugChannels' has a wrong offset!");

// Class PoseSearch.AnimNotifyState_PoseSearchBase
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_PoseSearchBase : public UAnimNotifyState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchBase">();
	}
	static class UAnimNotifyState_PoseSearchBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchBase>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchBase) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchBase");
static_assert(sizeof(UAnimNotifyState_PoseSearchBase) == 0x000030, "Wrong size on UAnimNotifyState_PoseSearchBase");

// Class PoseSearch.AnimNotifyState_PoseSearchExcludeFromDatabase
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_PoseSearchExcludeFromDatabase final : public UAnimNotifyState_PoseSearchBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchExcludeFromDatabase">();
	}
	static class UAnimNotifyState_PoseSearchExcludeFromDatabase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchExcludeFromDatabase>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchExcludeFromDatabase) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchExcludeFromDatabase");
static_assert(sizeof(UAnimNotifyState_PoseSearchExcludeFromDatabase) == 0x000030, "Wrong size on UAnimNotifyState_PoseSearchExcludeFromDatabase");

// Class PoseSearch.AnimNotifyState_PoseSearchBlockTransition
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_PoseSearchBlockTransition final : public UAnimNotifyState_PoseSearchBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchBlockTransition">();
	}
	static class UAnimNotifyState_PoseSearchBlockTransition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchBlockTransition>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchBlockTransition) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchBlockTransition");
static_assert(sizeof(UAnimNotifyState_PoseSearchBlockTransition) == 0x000030, "Wrong size on UAnimNotifyState_PoseSearchBlockTransition");

// Class PoseSearch.AnimNotifyState_PoseSearchModifyCost
// 0x0008 (0x0038 - 0x0030)
class UAnimNotifyState_PoseSearchModifyCost final : public UAnimNotifyState_PoseSearchBase
{
public:
	float                                         CostAddend;                                        // 0x0030(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchModifyCost">();
	}
	static class UAnimNotifyState_PoseSearchModifyCost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchModifyCost>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchModifyCost) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchModifyCost");
static_assert(sizeof(UAnimNotifyState_PoseSearchModifyCost) == 0x000038, "Wrong size on UAnimNotifyState_PoseSearchModifyCost");
static_assert(offsetof(UAnimNotifyState_PoseSearchModifyCost, CostAddend) == 0x000030, "Member 'UAnimNotifyState_PoseSearchModifyCost::CostAddend' has a wrong offset!");

// Class PoseSearch.AnimNotifyState_PoseSearchOverrideContinuingPoseCostBias
// 0x0008 (0x0038 - 0x0030)
class UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias final : public UAnimNotifyState_PoseSearchBase
{
public:
	float                                         CostAddend;                                        // 0x0030(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchOverrideContinuingPoseCostBias">();
	}
	static class UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias");
static_assert(sizeof(UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias) == 0x000038, "Wrong size on UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias");
static_assert(offsetof(UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias, CostAddend) == 0x000030, "Member 'UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias::CostAddend' has a wrong offset!");

// Class PoseSearch.PoseSearchLibrary
// 0x0000 (0x0028 - 0x0028)
class UPoseSearchLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void MotionMatch(class UAnimInstance* AnimInstance, const class UPoseSearchDatabase* Database, const struct FPoseSearchQueryTrajectory& Trajectory, float TrajectorySpeedMultiplier, const class FName PoseHistoryName, class UAnimationAsset** SelectedAnimation, float* SelectedTime, bool* bLoop, bool* bIsMirrored, struct FVector* BlendParameters, float* SearchCost, const class UAnimationAsset* FutureAnimation, float FutureAnimationStartTime, float TimeToFutureAnimationStart, const int32 DebugSessionUniqueIdentifier);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchLibrary">();
	}
	static class UPoseSearchLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchLibrary>();
	}
};
static_assert(alignof(UPoseSearchLibrary) == 0x000008, "Wrong alignment on UPoseSearchLibrary");
static_assert(sizeof(UPoseSearchLibrary) == 0x000028, "Wrong size on UPoseSearchLibrary");

}

