#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_PlanningMap_Level

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "Slate_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.CheckForUGCPolicyChange
// 0x0058 (0x0058 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasDrawPermission_ReturnValue;            // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           CallFunc_Map_Find_Value_1;                         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange) == 0x000058, "Wrong size on W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, DeltaTime) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::DeltaTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, Temp_int_Array_Index_Variable) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, CallFunc_Map_Keys_Keys) == 0x000018, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, CallFunc_Array_Get_Item) == 0x000028, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, CallFunc_Less_DoubleDouble_ReturnValue) == 0x00002C, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, CallFunc_Map_Find_Value) == 0x000030, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, CallFunc_Map_Find_ReturnValue) == 0x000034, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, CallFunc_HasDrawPermission_ReturnValue) == 0x000035, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::CallFunc_HasDrawPermission_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, CallFunc_Map_Find_Value_1) == 0x000038, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, CallFunc_Map_Find_ReturnValue_1) == 0x000040, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000050, "Member 'W_PreMission_PlanningMap_Level_C_CheckForUGCPolicyChange::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.ConfirmHoveredIdOwnership
// 0x0038 (0x0038 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership final
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       CallFunc_Map_Find_Value;                           // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_GetPlayerState_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value_1;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotPlayerState*                 K2Node_DynamicCast_AsReady_or_Not_Player_State;    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlanningPlayerNumber_ReturnValue;      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership) == 0x000038, "Wrong size on W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership, CallFunc_Map_Find_Value) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership, CallFunc_Map_Find_ReturnValue) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership, CallFunc_GetPlayerState_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership::CallFunc_GetPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership, CallFunc_Map_Find_Value_1) == 0x000018, "Member 'W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership, CallFunc_Map_Find_ReturnValue_1) == 0x00001C, "Member 'W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership, K2Node_DynamicCast_AsReady_or_Not_Player_State) == 0x000020, "Member 'W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership::K2Node_DynamicCast_AsReady_or_Not_Player_State' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership, CallFunc_Not_PreBool_ReturnValue_1) == 0x000029, "Member 'W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00002A, "Member 'W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership, CallFunc_GetPlanningPlayerNumber_ReturnValue) == 0x00002C, "Member 'W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership::CallFunc_GetPlanningPlayerNumber_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership, CallFunc_BooleanOR_ReturnValue) == 0x000030, "Member 'W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000031, "Member 'W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership, CallFunc_BooleanOR_ReturnValue_1) == 0x000032, "Member 'W_PreMission_PlanningMap_Level_C_ConfirmHoveredIdOwnership::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.DrawLine
// 0x0248 (0x0248 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_DrawLine final
{
public:
	int32                                         LineID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlanningLine                          LineData;                                          // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AReadyOrNotPlayerState*                 LineOwner;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_PlanningMap_Line_C*       Line;                                              // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          LastNode;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        EndOffset;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartOffset;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PreviousPoint;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Coordinates;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                NodeWidget;                                        // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstNode;                                         // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_PlayerNode_C*      CallFunc_Create_ReturnValue;                       // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotPlayerState*                 CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue; // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_OfficerMarker_C*                     CallFunc_Create_ReturnValue_1;                     // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Array_Get_Item;                           // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_PlanningMap_Line_C*       CallFunc_Create_ReturnValue_2;                     // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_OfficerMarker_C* TriggeringMarker)> K2Node_CreateDelegate_OutputDelegate; // 0x00D8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x00F0(0x0020)(NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnchorData                            K2Node_MakeStruct_AnchorData;                      // 0x0118(0x0040)(NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLineAngle_Angle;                       // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLineLength_Length;                     // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors_1;                       // 0x0170(0x0020)(NoDestructor)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData_1;                    // 0x0190(0x0040)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue_1;           // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           CallFunc_SpawnObject_ReturnValue;                  // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors_2;                       // 0x01E0(0x0020)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue_2;           // 0x0200(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData_2;                    // 0x0208(0x0040)(NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_DrawLine) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_DrawLine");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_DrawLine) == 0x000248, "Wrong size on W_PreMission_PlanningMap_Level_C_DrawLine");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, LineID) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::LineID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, LineData) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::LineData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, LineOwner) == 0x000030, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::LineOwner' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, Canvas) == 0x000038, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::Canvas' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, Line) == 0x000040, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::Line' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, LastNode) == 0x000048, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::LastNode' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, EndOffset) == 0x000050, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::EndOffset' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, StartOffset) == 0x000058, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::StartOffset' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, PreviousPoint) == 0x000060, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::PreviousPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, Coordinates) == 0x000070, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, NodeWidget) == 0x000080, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::NodeWidget' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, FirstNode) == 0x000088, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::FirstNode' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Create_ReturnValue) == 0x000090, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Array_LastIndex_ReturnValue) == 0x00009C, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue) == 0x0000A0, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, Temp_int_Array_Index_Variable) == 0x0000A8, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Create_ReturnValue_1) == 0x0000B0, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Array_Get_Item) == 0x0000B8, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000C8, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000C9, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Create_ReturnValue_2) == 0x0000D0, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, K2Node_CreateDelegate_OutputDelegate) == 0x0000D8, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_AddChildToCanvas_ReturnValue) == 0x0000E8, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, K2Node_MakeStruct_Anchors) == 0x0000F0, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, Temp_int_Loop_Counter_Variable) == 0x000110, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, K2Node_MakeStruct_AnchorData) == 0x000118, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::K2Node_MakeStruct_AnchorData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Less_IntInt_ReturnValue) == 0x000158, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Add_IntInt_ReturnValue) == 0x00015C, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_GetLineAngle_Angle) == 0x000160, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_GetLineAngle_Angle' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_GetLineLength_Length) == 0x000168, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_GetLineLength_Length' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, K2Node_MakeStruct_Anchors_1) == 0x000170, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::K2Node_MakeStruct_Anchors_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, K2Node_MakeStruct_AnchorData_1) == 0x000190, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::K2Node_MakeStruct_AnchorData_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_AddChildToCanvas_ReturnValue_1) == 0x0001D0, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_AddChildToCanvas_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_SpawnObject_ReturnValue) == 0x0001D8, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, K2Node_MakeStruct_Anchors_2) == 0x0001E0, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::K2Node_MakeStruct_Anchors_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_AddChildToCanvas_ReturnValue_2) == 0x000200, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_AddChildToCanvas_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, K2Node_MakeStruct_AnchorData_2) == 0x000208, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::K2Node_MakeStruct_AnchorData_2' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.DrawMarker
// 0x0080 (0x0080 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_DrawMarker final
{
public:
	int32                                         MarkerID;                                          // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlanningMarker                        MarkerData;                                        // 0x0008(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UW_PreMission_Tablet_MapMarker_C*       Marker;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker, double Rotation)> K2Node_CreateDelegate_OutputDelegate; // 0x0040(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0050(0x0020)(NoDestructor)
	class UW_PreMission_Tablet_MapMarker_C*       CallFunc_Create_ReturnValue;                       // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_DrawMarker) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_DrawMarker");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_DrawMarker) == 0x000080, "Wrong size on W_PreMission_PlanningMap_Level_C_DrawMarker");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawMarker, MarkerID) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_DrawMarker::MarkerID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawMarker, MarkerData) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_DrawMarker::MarkerData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawMarker, Marker) == 0x000038, "Member 'W_PreMission_PlanningMap_Level_C_DrawMarker::Marker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawMarker, K2Node_CreateDelegate_OutputDelegate) == 0x000040, "Member 'W_PreMission_PlanningMap_Level_C_DrawMarker::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawMarker, K2Node_MakeStruct_Anchors) == 0x000050, "Member 'W_PreMission_PlanningMap_Level_C_DrawMarker::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawMarker, CallFunc_Create_ReturnValue) == 0x000070, "Member 'W_PreMission_PlanningMap_Level_C_DrawMarker::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawMarker, CallFunc_AddChildToCanvas_ReturnValue) == 0x000078, "Member 'W_PreMission_PlanningMap_Level_C_DrawMarker::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.EraseIcon
// 0x0018 (0x0018 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_EraseIcon final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_MapMarker_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_EraseIcon) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_EraseIcon");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_EraseIcon) == 0x000018, "Wrong size on W_PreMission_PlanningMap_Level_C_EraseIcon");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseIcon, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_EraseIcon::ID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseIcon, CallFunc_Map_Remove_ReturnValue) == 0x000004, "Member 'W_PreMission_PlanningMap_Level_C_EraseIcon::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseIcon, CallFunc_Map_Find_Value) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_EraseIcon::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseIcon, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_EraseIcon::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.EraseLine
// 0x0018 (0x0018 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_EraseLine final
{
public:
	int32                                         LineID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_EraseLine) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_EraseLine");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_EraseLine) == 0x000018, "Wrong size on W_PreMission_PlanningMap_Level_C_EraseLine");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseLine, LineID) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_EraseLine::LineID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseLine, CallFunc_Map_Remove_ReturnValue) == 0x000004, "Member 'W_PreMission_PlanningMap_Level_C_EraseLine::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseLine, CallFunc_Map_Find_Value) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_EraseLine::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseLine, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_EraseLine::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.EraseMarkerAndLine
// 0x0018 (0x0018 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_OfficerMarker_C*                     CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue_1;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine) == 0x000018, "Wrong size on W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine, Key) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine::Key' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine, CallFunc_Map_Remove_ReturnValue) == 0x000004, "Member 'W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine, CallFunc_Map_Find_Value) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine, CallFunc_Map_Remove_ReturnValue_1) == 0x000011, "Member 'W_PreMission_PlanningMap_Level_C_EraseMarkerAndLine::CallFunc_Map_Remove_ReturnValue_1' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.ExecuteUbergraph_W_PreMission_PlanningMap_Level
// 0x01E0 (0x01E0 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0034(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0070(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            CallFunc_MakeBrushFromTexture_ReturnValue;         // 0x00D0(0x00D0)()
	struct FMissionPlanLineColors                 CallFunc_GetPlanLineColors_Colors;                 // 0x01A0(0x0030)(NoDestructor)
	double                                        CallFunc_CheckForUGCPolicyChange_DeltaTime_ImplicitCast; // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level) == 0x000010, "Wrong alignment on W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level) == 0x0001E0, "Wrong size on W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, EntryPoint) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, K2Node_CustomEvent_Loaded) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, Temp_object_Variable) == 0x000020, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, K2Node_DynamicCast_AsTexture_2D) == 0x000028, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, K2Node_Event_MyGeometry) == 0x000034, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, K2Node_Event_InDeltaTime) == 0x00006C, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, CallFunc_GetCachedGeometry_ReturnValue) == 0x000070, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, CallFunc_GetLocalSize_ReturnValue) == 0x0000A8, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, CallFunc_BreakVector2D_X) == 0x0000B8, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, CallFunc_BreakVector2D_Y) == 0x0000C0, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, CallFunc_FTrunc_ReturnValue) == 0x0000C8, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, CallFunc_FTrunc_ReturnValue_1) == 0x0000CC, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, CallFunc_MakeBrushFromTexture_ReturnValue) == 0x0000D0, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::CallFunc_MakeBrushFromTexture_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, CallFunc_GetPlanLineColors_Colors) == 0x0001A0, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::CallFunc_GetPlanLineColors_Colors' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, CallFunc_CheckForUGCPolicyChange_DeltaTime_ImplicitCast) == 0x0001D0, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::CallFunc_CheckForUGCPolicyChange_DeltaTime_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.GamepadHover
// 0x0098 (0x0098 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_GamepadHover final
{
public:
	int32                                         PreviousIcon;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviousLine;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_MapMarker_C*       CallFunc_Map_Find_Value;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Hovered_By_Gamepad_IsHovered;          // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_2;            // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Keys_Keys_1;                          // 0x0060(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Map_Find_Value_1;                         // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Hovered_By_Gamepad_IsHovered_1;        // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_GamepadHover) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_GamepadHover");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_GamepadHover) == 0x000098, "Wrong size on W_PreMission_PlanningMap_Level_C_GamepadHover");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, PreviousIcon) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::PreviousIcon' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, PreviousLine) == 0x000004, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::PreviousLine' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, Temp_bool_True_if_break_was_hit_Variable) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, Temp_bool_True_if_break_was_hit_Variable_1) == 0x00001C, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, Temp_int_Array_Index_Variable_1) == 0x000020, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Not_PreBool_ReturnValue_1) == 0x000024, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000025, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000026, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, Temp_int_Loop_Counter_Variable_1) == 0x000028, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Add_IntInt_ReturnValue_1) == 0x00002C, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Map_Keys_Keys) == 0x000030, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Array_Get_Item) == 0x000040, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Map_Find_Value) == 0x000050, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Map_Find_ReturnValue) == 0x000058, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_BooleanAND_ReturnValue) == 0x000059, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Is_Hovered_By_Gamepad_IsHovered) == 0x00005A, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Is_Hovered_By_Gamepad_IsHovered' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_NotEqual_IntInt_ReturnValue_2) == 0x00005B, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_NotEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Map_Keys_Keys_1) == 0x000060, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Map_Keys_Keys_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Array_Length_ReturnValue_1) == 0x000070, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Array_Get_Item_1) == 0x000074, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Less_IntInt_ReturnValue_1) == 0x000078, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_BooleanAND_ReturnValue_1) == 0x000079, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Map_Find_Value_1) == 0x000080, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Map_Find_ReturnValue_1) == 0x000090, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GamepadHover, CallFunc_Is_Hovered_By_Gamepad_IsHovered_1) == 0x000091, "Member 'W_PreMission_PlanningMap_Level_C_GamepadHover::CallFunc_Is_Hovered_By_Gamepad_IsHovered_1' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.GetLineAngle
// 0x00C8 (0x00C8 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_GetLineAngle final
{
public:
	struct FVector2D                              PointA;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PointB;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PointA_X;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PointA_Y;                                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PointB_X;                                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PointB_Y;                                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_Angle_ImplicitCast;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_GetLineAngle) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_GetLineAngle");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_GetLineAngle) == 0x0000C8, "Wrong size on W_PreMission_PlanningMap_Level_C_GetLineAngle");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, PointA) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::PointA' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, PointB) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::PointB' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, PointA_X) == 0x000020, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::PointA_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, PointA_Y) == 0x000028, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::PointA_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, PointB_X) == 0x000030, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::PointB_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, PointB_Y) == 0x000038, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::PointB_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, Angle) == 0x000040, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::Angle' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_BreakVector2D_X) == 0x000048, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_BreakVector2D_Y) == 0x000050, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_BreakVector2D_X_1) == 0x000058, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_BreakVector2D_Y_1) == 0x000060, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_MakeVector_ReturnValue) == 0x000068, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_MakeVector_ReturnValue_1) == 0x000080, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_FindLookAtRotation_ReturnValue) == 0x000098, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_BreakRotator_Roll) == 0x0000B0, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_BreakRotator_Pitch) == 0x0000B4, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_BreakRotator_Yaw) == 0x0000B8, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, K2Node_FunctionResult_Angle_ImplicitCast) == 0x0000C0, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::K2Node_FunctionResult_Angle_ImplicitCast' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.GetLineLength
// 0x0068 (0x0068 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_GetLineLength final
{
public:
	struct FVector2D                              PointA;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PointB;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Length;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWidgetSize_Absolute_ReturnValue;       // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue_1;  // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Distance2D_ReturnValue;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_GetLineLength) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_GetLineLength");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_GetLineLength) == 0x000068, "Wrong size on W_PreMission_PlanningMap_Level_C_GetLineLength");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, PointA) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::PointA' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, PointB) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::PointB' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, Length) == 0x000020, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::Length' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, CallFunc_GetWidgetSize_Absolute_ReturnValue) == 0x000028, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::CallFunc_GetWidgetSize_Absolute_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x000038, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, CallFunc_Multiply_Vector2DVector2D_ReturnValue_1) == 0x000048, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::CallFunc_Multiply_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, CallFunc_Distance2D_ReturnValue) == 0x000058, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::CallFunc_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000060, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.Is Hovered By Gamepad
// 0x0070 (0x0070 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad final
{
public:
	struct FVector2D                              Coordinates;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHovered_0;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreviouslyHovered;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadMidPoint_Coordinates;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad) == 0x000070, "Wrong size on W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad, Coordinates) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad::Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad, IsHovered_0) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad::IsHovered_0' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad, PreviouslyHovered) == 0x000014, "Member 'W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad::PreviouslyHovered' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad, CallFunc_GetGamepadMidPoint_Coordinates) == 0x000018, "Member 'W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad::CallFunc_GetGamepadMidPoint_Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000028, "Member 'W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad, CallFunc_SafeDivide_ReturnValue) == 0x000038, "Member 'W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000040, "Member 'W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000058, "Member 'W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad, CallFunc_VSize_ReturnValue) == 0x000060, "Member 'W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000068, "Member 'W_PreMission_PlanningMap_Level_C_Is_Hovered_By_Gamepad::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.Line Start Node Selected
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_Line_Start_Node_Selected final
{
public:
	class UW_OfficerMarker_C*                     OfficerMarker;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_Line_Start_Node_Selected) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_Line_Start_Node_Selected");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_Line_Start_Node_Selected) == 0x000008, "Wrong size on W_PreMission_PlanningMap_Level_C_Line_Start_Node_Selected");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Line_Start_Node_Selected, OfficerMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_Line_Start_Node_Selected::OfficerMarker' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.MarkerRotated
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_MarkerRotated final
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       TriggeringMarker;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Rotation;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_MarkerRotated) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_MarkerRotated");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_MarkerRotated) == 0x000010, "Wrong size on W_PreMission_PlanningMap_Level_C_MarkerRotated");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_MarkerRotated, TriggeringMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_MarkerRotated::TriggeringMarker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_MarkerRotated, Rotation) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_MarkerRotated::Rotation' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.OnLoaded_705E207A4CED22445B404F937107DCF3
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_OnLoaded_705E207A4CED22445B404F937107DCF3 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_OnLoaded_705E207A4CED22445B404F937107DCF3) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_OnLoaded_705E207A4CED22445B404F937107DCF3");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_OnLoaded_705E207A4CED22445B404F937107DCF3) == 0x000008, "Wrong size on W_PreMission_PlanningMap_Level_C_OnLoaded_705E207A4CED22445B404F937107DCF3");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_OnLoaded_705E207A4CED22445B404F937107DCF3, Loaded) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_OnLoaded_705E207A4CED22445B404F937107DCF3::Loaded' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.Set Icon Marker Hover Status
// 0x0028 (0x0028 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hover;                                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_MapMarker_C*       CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status) == 0x000028, "Wrong size on W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status::ID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status, Hover) == 0x000004, "Member 'W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status::Hover' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status, CallFunc_Map_Find_Value) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status, CallFunc_PlayAnimation_ReturnValue_1) == 0x000020, "Member 'W_PreMission_PlanningMap_Level_C_Set_Icon_Marker_Hover_Status::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.SetMarkerHoverStatus
// 0x0028 (0x0028 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hover;                                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_OfficerMarker_C*                     CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus) == 0x000028, "Wrong size on W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus::ID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus, Hover) == 0x000004, "Member 'W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus::Hover' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus, CallFunc_Map_Find_Value) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus, CallFunc_PlayAnimation_ReturnValue_1) == 0x000020, "Member 'W_PreMission_PlanningMap_Level_C_SetMarkerHoverStatus::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_PreMission_PlanningMap_Level_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_Tick) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_Level_C_Tick");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_Tick) == 0x00003C, "Wrong size on W_PreMission_PlanningMap_Level_C_Tick");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Tick, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_Tick, InDeltaTime) == 0x000038, "Member 'W_PreMission_PlanningMap_Level_C_Tick::InDeltaTime' has a wrong offset!");

}

