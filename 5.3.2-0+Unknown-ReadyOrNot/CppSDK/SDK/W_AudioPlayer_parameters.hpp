#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_AudioPlayer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "FMODStudio_structs.hpp"
#include "E_Briefing_Audio_PlayStates_structs.hpp"


namespace SDK::Params
{

// Function W_AudioPlayer.W_AudioPlayer_C.AudioPlayerVisible
// 0x0010 (0x0010 - 0x0000)
struct W_AudioPlayer_C_AudioPlayerVisible final
{
public:
	class UW_AudioPlayer_C*                       PlayerWidget;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerVisible;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_AudioPlayerVisible) == 0x000008, "Wrong alignment on W_AudioPlayer_C_AudioPlayerVisible");
static_assert(sizeof(W_AudioPlayer_C_AudioPlayerVisible) == 0x000010, "Wrong size on W_AudioPlayer_C_AudioPlayerVisible");
static_assert(offsetof(W_AudioPlayer_C_AudioPlayerVisible, PlayerWidget) == 0x000000, "Member 'W_AudioPlayer_C_AudioPlayerVisible::PlayerWidget' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_AudioPlayerVisible, PlayerVisible) == 0x000008, "Member 'W_AudioPlayer_C_AudioPlayerVisible::PlayerVisible' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_AudioPlayer_C_BackPage final
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_BackPage) == 0x000001, "Wrong alignment on W_AudioPlayer_C_BackPage");
static_assert(sizeof(W_AudioPlayer_C_BackPage) == 0x000001, "Wrong size on W_AudioPlayer_C_BackPage");
static_assert(offsetof(W_AudioPlayer_C_BackPage, Handled) == 0x000000, "Member 'W_AudioPlayer_C_BackPage::Handled' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_FastForward_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'W_AudioPlayer_C_BndEvt__W_AudioPlayer_btn_Rewind_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.BndEvt__W_Briefing_AudioControls_btn_Loop_K2Node_ComponentBoundEvent_14_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Loop_K2Node_ComponentBoundEvent_14_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Loop_K2Node_ComponentBoundEvent_14_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Loop_K2Node_ComponentBoundEvent_14_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Loop_K2Node_ComponentBoundEvent_14_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Loop_K2Node_ComponentBoundEvent_14_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Loop_K2Node_ComponentBoundEvent_14_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Loop_K2Node_ComponentBoundEvent_14_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.BndEvt__W_Briefing_AudioControls_btn_Play_K2Node_ComponentBoundEvent_4_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Play_K2Node_ComponentBoundEvent_4_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Play_K2Node_ComponentBoundEvent_4_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Play_K2Node_ComponentBoundEvent_4_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Play_K2Node_ComponentBoundEvent_4_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Play_K2Node_ComponentBoundEvent_4_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Play_K2Node_ComponentBoundEvent_4_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Play_K2Node_ComponentBoundEvent_4_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.BndEvt__W_Briefing_AudioControls_btn_Restart_K2Node_ComponentBoundEvent_13_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Restart_K2Node_ComponentBoundEvent_13_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Restart_K2Node_ComponentBoundEvent_13_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Restart_K2Node_ComponentBoundEvent_13_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Restart_K2Node_ComponentBoundEvent_13_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Restart_K2Node_ComponentBoundEvent_13_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Restart_K2Node_ComponentBoundEvent_13_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Restart_K2Node_ComponentBoundEvent_13_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.BndEvt__W_Briefing_AudioControls_btn_Stop_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Stop_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Stop_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Stop_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Stop_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Stop_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Stop_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'W_AudioPlayer_C_BndEvt__W_Briefing_AudioControls_btn_Stop_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_AudioPlayer_C_ChangePage final
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_ChangePage) == 0x000004, "Wrong alignment on W_AudioPlayer_C_ChangePage");
static_assert(sizeof(W_AudioPlayer_C_ChangePage) == 0x000008, "Wrong size on W_AudioPlayer_C_ChangePage");
static_assert(offsetof(W_AudioPlayer_C_ChangePage, PageName) == 0x000000, "Member 'W_AudioPlayer_C_ChangePage::PageName' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.ExecuteUbergraph_W_AudioPlayer
// 0x0138 (0x0138 - 0x0000)
struct W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAwake;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_AudioPlayer_C*                       K2Node_Event_PlayerWidget;                         // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PlayerVisible;                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Delay_1;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Delay;                                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsGamepad;                            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_PageName;                             // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0048(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_9;               // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_8;               // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_7;               // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_6;               // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTimelinePosition_ReturnValue;          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF[0x1];                                       // 0x00AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODAudioComponent*                    K2Node_CustomEvent_NewFMODComponent;               // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_AutoPlay;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_UseDarkTheme;                         // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            CallFunc_GetTextThemeColor_SlateColor;             // 0x00C0(0x0014)()
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UW_AudioPlayer_Button_C*>        CallFunc_WidgetGetChildrenOfClass_ChildWidgets;    // 0x00D8(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UW_AudioPlayer_Button_C*                CallFunc_Array_Get_Item;                           // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_5;               // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_4;               // 0x0100(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_3;               // 0x0108(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_2;               // 0x0110(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_1;               // 0x0118(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button;                 // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_1;            // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer) == 0x000008, "Wrong alignment on W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer");
static_assert(sizeof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer) == 0x000138, "Wrong size on W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, EntryPoint) == 0x000000, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, Temp_int_Array_Index_Variable) == 0x000004, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_IsPlaying_ReturnValue) == 0x000011, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_Event_IsAwake) == 0x000012, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_Event_IsAwake' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_Event_PlayerWidget) == 0x000018, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_Event_PlayerWidget' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_Event_PlayerVisible) == 0x000020, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_Event_PlayerVisible' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_Event_Delay_1) == 0x000028, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_Event_Delay) == 0x000030, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_Event_Collapse) == 0x000038, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_Event_IsGamepad) == 0x000039, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_Event_PageName) == 0x00003C, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_Event_IsDesignTime) == 0x000044, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_Event_MyGeometry) == 0x000048, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_Event_InDeltaTime) == 0x000080, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_ComponentBoundEvent_Button_9) == 0x000088, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_ComponentBoundEvent_Button_9' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_ComponentBoundEvent_Button_8) == 0x000090, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_ComponentBoundEvent_Button_8' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_ComponentBoundEvent_Button_7) == 0x000098, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_ComponentBoundEvent_Button_7' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_ComponentBoundEvent_Button_6) == 0x0000A0, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_ComponentBoundEvent_Button_6' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_GetTimelinePosition_ReturnValue) == 0x0000A8, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_GetTimelinePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_BooleanOR_ReturnValue) == 0x0000AC, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_Not_PreBool_ReturnValue) == 0x0000AD, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000AE, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_CustomEvent_NewFMODComponent) == 0x0000B0, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_CustomEvent_NewFMODComponent' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_CustomEvent_AutoPlay) == 0x0000B8, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_CustomEvent_AutoPlay' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000B9, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_IsValid_ReturnValue_1) == 0x0000BA, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_BooleanAND_ReturnValue) == 0x0000BB, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_Event_UseDarkTheme) == 0x0000BC, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_Event_UseDarkTheme' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_GetTextThemeColor_SlateColor) == 0x0000C0, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_GetTextThemeColor_SlateColor' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_WidgetGetChildrenOfClass_ChildWidgets) == 0x0000D8, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_WidgetGetChildrenOfClass_ChildWidgets' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_Array_Get_Item) == 0x0000E8, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_Array_Length_ReturnValue) == 0x0000F0, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_Less_IntInt_ReturnValue) == 0x0000F4, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_ComponentBoundEvent_Button_5) == 0x0000F8, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_ComponentBoundEvent_Button_5' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_ComponentBoundEvent_Button_4) == 0x000100, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_ComponentBoundEvent_Button_4' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_ComponentBoundEvent_Button_3) == 0x000108, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_ComponentBoundEvent_Button_3' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_ComponentBoundEvent_Button_2) == 0x000110, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_ComponentBoundEvent_Button_2' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_ComponentBoundEvent_Button_1) == 0x000118, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, K2Node_ComponentBoundEvent_Button) == 0x000120, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_IsValid_ReturnValue_2) == 0x000128, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_Delay_Duration_ImplicitCast) == 0x00012C, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer, CallFunc_Delay_Duration_ImplicitCast_1) == 0x000130, "Member 'W_AudioPlayer_C_ExecuteUbergraph_W_AudioPlayer::CallFunc_Delay_Duration_ImplicitCast_1' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.Expand
// 0x0001 (0x0001 - 0x0000)
struct W_AudioPlayer_C_Expand final
{
public:
	bool                                          AutoPlay;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_Expand) == 0x000001, "Wrong alignment on W_AudioPlayer_C_Expand");
static_assert(sizeof(W_AudioPlayer_C_Expand) == 0x000001, "Wrong size on W_AudioPlayer_C_Expand");
static_assert(offsetof(W_AudioPlayer_C_Expand, AutoPlay) == 0x000000, "Member 'W_AudioPlayer_C_Expand::AutoPlay' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.Get Timer Text
// 0x0148 (0x0148 - 0x0000)
struct W_AudioPlayer_C_Get_Timer_Text final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimerText;                                         // 0x0008(0x0018)(Parm, OutParm)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_FromMilliseconds_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Days;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Hours;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Minutes;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Seconds;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Milliseconds;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0048(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0060(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0078(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00C8(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0118(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0128(0x0018)()
	float                                         CallFunc_FromMilliseconds_Milliseconds_ImplicitCast; // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_Get_Timer_Text) == 0x000008, "Wrong alignment on W_AudioPlayer_C_Get_Timer_Text");
static_assert(sizeof(W_AudioPlayer_C_Get_Timer_Text) == 0x000148, "Wrong size on W_AudioPlayer_C_Get_Timer_Text");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, Time) == 0x000000, "Member 'W_AudioPlayer_C_Get_Timer_Text::Time' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, TimerText) == 0x000008, "Member 'W_AudioPlayer_C_Get_Timer_Text::TimerText' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000020, "Member 'W_AudioPlayer_C_Get_Timer_Text::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, CallFunc_FromMilliseconds_ReturnValue) == 0x000028, "Member 'W_AudioPlayer_C_Get_Timer_Text::CallFunc_FromMilliseconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, CallFunc_BreakTimespan_Days) == 0x000030, "Member 'W_AudioPlayer_C_Get_Timer_Text::CallFunc_BreakTimespan_Days' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, CallFunc_BreakTimespan_Hours) == 0x000034, "Member 'W_AudioPlayer_C_Get_Timer_Text::CallFunc_BreakTimespan_Hours' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, CallFunc_BreakTimespan_Minutes) == 0x000038, "Member 'W_AudioPlayer_C_Get_Timer_Text::CallFunc_BreakTimespan_Minutes' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, CallFunc_BreakTimespan_Seconds) == 0x00003C, "Member 'W_AudioPlayer_C_Get_Timer_Text::CallFunc_BreakTimespan_Seconds' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, CallFunc_BreakTimespan_Milliseconds) == 0x000040, "Member 'W_AudioPlayer_C_Get_Timer_Text::CallFunc_BreakTimespan_Milliseconds' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, CallFunc_Conv_IntToText_ReturnValue) == 0x000048, "Member 'W_AudioPlayer_C_Get_Timer_Text::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000060, "Member 'W_AudioPlayer_C_Get_Timer_Text::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, K2Node_MakeStruct_FormatArgumentData) == 0x000078, "Member 'W_AudioPlayer_C_Get_Timer_Text::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000C8, "Member 'W_AudioPlayer_C_Get_Timer_Text::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, K2Node_MakeArray_Array) == 0x000118, "Member 'W_AudioPlayer_C_Get_Timer_Text::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, CallFunc_Format_ReturnValue) == 0x000128, "Member 'W_AudioPlayer_C_Get_Timer_Text::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Get_Timer_Text, CallFunc_FromMilliseconds_Milliseconds_ImplicitCast) == 0x000140, "Member 'W_AudioPlayer_C_Get_Timer_Text::CallFunc_FromMilliseconds_Milliseconds_ImplicitCast' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.GetScrubbedTime
// 0x0018 (0x0018 - 0x0000)
struct W_AudioPlayer_C_GetScrubbedTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_GetScrubbedTime) == 0x000004, "Wrong alignment on W_AudioPlayer_C_GetScrubbedTime");
static_assert(sizeof(W_AudioPlayer_C_GetScrubbedTime) == 0x000018, "Wrong size on W_AudioPlayer_C_GetScrubbedTime");
static_assert(offsetof(W_AudioPlayer_C_GetScrubbedTime, ReturnValue) == 0x000000, "Member 'W_AudioPlayer_C_GetScrubbedTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_GetScrubbedTime, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'W_AudioPlayer_C_GetScrubbedTime::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_GetScrubbedTime, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000008, "Member 'W_AudioPlayer_C_GetScrubbedTime::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_GetScrubbedTime, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'W_AudioPlayer_C_GetScrubbedTime::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_GetScrubbedTime, CallFunc_SelectInt_ReturnValue) == 0x000010, "Member 'W_AudioPlayer_C_GetScrubbedTime::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_GetScrubbedTime, CallFunc_Clamp_ReturnValue) == 0x000014, "Member 'W_AudioPlayer_C_GetScrubbedTime::CallFunc_Clamp_ReturnValue' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.GetTextThemeColor
// 0x0074 (0x0074 - 0x0000)
struct W_AudioPlayer_C_GetTextThemeColor final
{
public:
	struct FSlateColor                            SlateColor;                                        // 0x0000(0x0014)(Parm, OutParm)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor;                // 0x0028(0x0014)()
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor_1;             // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor_1;              // 0x004C(0x0014)()
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0060(0x0014)()
};
static_assert(alignof(W_AudioPlayer_C_GetTextThemeColor) == 0x000004, "Wrong alignment on W_AudioPlayer_C_GetTextThemeColor");
static_assert(sizeof(W_AudioPlayer_C_GetTextThemeColor) == 0x000074, "Wrong size on W_AudioPlayer_C_GetTextThemeColor");
static_assert(offsetof(W_AudioPlayer_C_GetTextThemeColor, SlateColor) == 0x000000, "Member 'W_AudioPlayer_C_GetTextThemeColor::SlateColor' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_GetTextThemeColor, Temp_bool_Variable) == 0x000014, "Member 'W_AudioPlayer_C_GetTextThemeColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_GetTextThemeColor, CallFunc_GetColorByName_LinearColor) == 0x000018, "Member 'W_AudioPlayer_C_GetTextThemeColor::CallFunc_GetColorByName_LinearColor' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_GetTextThemeColor, CallFunc_GetColorByName_SlateColor) == 0x000028, "Member 'W_AudioPlayer_C_GetTextThemeColor::CallFunc_GetColorByName_SlateColor' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_GetTextThemeColor, CallFunc_GetColorByName_LinearColor_1) == 0x00003C, "Member 'W_AudioPlayer_C_GetTextThemeColor::CallFunc_GetColorByName_LinearColor_1' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_GetTextThemeColor, CallFunc_GetColorByName_SlateColor_1) == 0x00004C, "Member 'W_AudioPlayer_C_GetTextThemeColor::CallFunc_GetColorByName_SlateColor_1' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_GetTextThemeColor, K2Node_Select_Default) == 0x000060, "Member 'W_AudioPlayer_C_GetTextThemeColor::K2Node_Select_Default' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.Hide
// 0x0010 (0x0010 - 0x0000)
struct W_AudioPlayer_C_Hide final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse_0;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_Hide) == 0x000008, "Wrong alignment on W_AudioPlayer_C_Hide");
static_assert(sizeof(W_AudioPlayer_C_Hide) == 0x000010, "Wrong size on W_AudioPlayer_C_Hide");
static_assert(offsetof(W_AudioPlayer_C_Hide, Delay) == 0x000000, "Member 'W_AudioPlayer_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Hide, Collapse_0) == 0x000008, "Member 'W_AudioPlayer_C_Hide::Collapse_0' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.InitializeFMODComponent
// 0x0010 (0x0010 - 0x0000)
struct W_AudioPlayer_C_InitializeFMODComponent final
{
public:
	class UFMODAudioComponent*                    NewFMODComponent;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoPlay;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_InitializeFMODComponent) == 0x000008, "Wrong alignment on W_AudioPlayer_C_InitializeFMODComponent");
static_assert(sizeof(W_AudioPlayer_C_InitializeFMODComponent) == 0x000010, "Wrong size on W_AudioPlayer_C_InitializeFMODComponent");
static_assert(offsetof(W_AudioPlayer_C_InitializeFMODComponent, NewFMODComponent) == 0x000000, "Member 'W_AudioPlayer_C_InitializeFMODComponent::NewFMODComponent' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_InitializeFMODComponent, AutoPlay) == 0x000008, "Member 'W_AudioPlayer_C_InitializeFMODComponent::AutoPlay' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.InitializeWithFMODEvent
// 0x0018 (0x0018 - 0x0000)
struct W_AudioPlayer_C_InitializeWithFMODEvent final
{
public:
	class UFMODEvent*                             FMODEvent_0;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoPlay;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFMODEventInstance                     CallFunc_PlayEvent2D_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_AudioPlayer_C_InitializeWithFMODEvent) == 0x000008, "Wrong alignment on W_AudioPlayer_C_InitializeWithFMODEvent");
static_assert(sizeof(W_AudioPlayer_C_InitializeWithFMODEvent) == 0x000018, "Wrong size on W_AudioPlayer_C_InitializeWithFMODEvent");
static_assert(offsetof(W_AudioPlayer_C_InitializeWithFMODEvent, FMODEvent_0) == 0x000000, "Member 'W_AudioPlayer_C_InitializeWithFMODEvent::FMODEvent_0' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_InitializeWithFMODEvent, bAutoPlay) == 0x000008, "Member 'W_AudioPlayer_C_InitializeWithFMODEvent::bAutoPlay' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_InitializeWithFMODEvent, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'W_AudioPlayer_C_InitializeWithFMODEvent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_InitializeWithFMODEvent, CallFunc_PlayEvent2D_ReturnValue) == 0x000010, "Member 'W_AudioPlayer_C_InitializeWithFMODEvent::CallFunc_PlayEvent2D_ReturnValue' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.IsPlaying
// 0x0006 (0x0006 - 0x0000)
struct W_AudioPlayer_C_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPaused_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_IsPlaying) == 0x000001, "Wrong alignment on W_AudioPlayer_C_IsPlaying");
static_assert(sizeof(W_AudioPlayer_C_IsPlaying) == 0x000006, "Wrong size on W_AudioPlayer_C_IsPlaying");
static_assert(offsetof(W_AudioPlayer_C_IsPlaying, ReturnValue) == 0x000000, "Member 'W_AudioPlayer_C_IsPlaying::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_IsPlaying, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'W_AudioPlayer_C_IsPlaying::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_IsPlaying, CallFunc_GetPaused_ReturnValue) == 0x000002, "Member 'W_AudioPlayer_C_IsPlaying::CallFunc_GetPaused_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_IsPlaying, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'W_AudioPlayer_C_IsPlaying::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_IsPlaying, CallFunc_IsPlaying_ReturnValue) == 0x000004, "Member 'W_AudioPlayer_C_IsPlaying::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_IsPlaying, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'W_AudioPlayer_C_IsPlaying::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.Pause
// 0x0010 (0x0010 - 0x0000)
struct W_AudioPlayer_C_Pause final
{
public:
	float                                         Temp_real_Variable;                                // 0x0000(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0004(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_Pause) == 0x000004, "Wrong alignment on W_AudioPlayer_C_Pause");
static_assert(sizeof(W_AudioPlayer_C_Pause) == 0x000010, "Wrong size on W_AudioPlayer_C_Pause");
static_assert(offsetof(W_AudioPlayer_C_Pause, Temp_real_Variable) == 0x000000, "Member 'W_AudioPlayer_C_Pause::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Pause, Temp_name_Variable) == 0x000004, "Member 'W_AudioPlayer_C_Pause::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Pause, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'W_AudioPlayer_C_Pause::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Pause, CallFunc_IsPlaying_ReturnValue) == 0x00000D, "Member 'W_AudioPlayer_C_Pause::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.Play
// 0x0050 (0x0050 - 0x0000)
struct W_AudioPlayer_C_Play final
{
public:
	class FText                                   CallFunc_Get_Timer_Text_TimerText;                 // 0x0000(0x0018)()
	class FText                                   CallFunc_Get_Timer_Text_TimerText_1;               // 0x0018(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0034(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetLength_ReturnValue;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetLength_ReturnValue_1;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_Play) == 0x000008, "Wrong alignment on W_AudioPlayer_C_Play");
static_assert(sizeof(W_AudioPlayer_C_Play) == 0x000050, "Wrong size on W_AudioPlayer_C_Play");
static_assert(offsetof(W_AudioPlayer_C_Play, CallFunc_Get_Timer_Text_TimerText) == 0x000000, "Member 'W_AudioPlayer_C_Play::CallFunc_Get_Timer_Text_TimerText' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Play, CallFunc_Get_Timer_Text_TimerText_1) == 0x000018, "Member 'W_AudioPlayer_C_Play::CallFunc_Get_Timer_Text_TimerText_1' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Play, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'W_AudioPlayer_C_Play::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Play, Temp_name_Variable) == 0x000034, "Member 'W_AudioPlayer_C_Play::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Play, CallFunc_Map_Remove_ReturnValue) == 0x00003C, "Member 'W_AudioPlayer_C_Play::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Play, CallFunc_GetLength_ReturnValue) == 0x000040, "Member 'W_AudioPlayer_C_Play::CallFunc_GetLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Play, CallFunc_IsPlaying_ReturnValue) == 0x000044, "Member 'W_AudioPlayer_C_Play::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Play, CallFunc_GetLength_ReturnValue_1) == 0x000048, "Member 'W_AudioPlayer_C_Play::CallFunc_GetLength_ReturnValue_1' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_AudioPlayer_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_PreConstruct) == 0x000001, "Wrong alignment on W_AudioPlayer_C_PreConstruct");
static_assert(sizeof(W_AudioPlayer_C_PreConstruct) == 0x000001, "Wrong size on W_AudioPlayer_C_PreConstruct");
static_assert(offsetof(W_AudioPlayer_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_AudioPlayer_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.ResetAudioPlayer
// 0x0001 (0x0001 - 0x0000)
struct W_AudioPlayer_C_ResetAudioPlayer final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_ResetAudioPlayer) == 0x000001, "Wrong alignment on W_AudioPlayer_C_ResetAudioPlayer");
static_assert(sizeof(W_AudioPlayer_C_ResetAudioPlayer) == 0x000001, "Wrong size on W_AudioPlayer_C_ResetAudioPlayer");
static_assert(offsetof(W_AudioPlayer_C_ResetAudioPlayer, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_AudioPlayer_C_ResetAudioPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.Restart
// 0x0001 (0x0001 - 0x0000)
struct W_AudioPlayer_C_Restart final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_Restart) == 0x000001, "Wrong alignment on W_AudioPlayer_C_Restart");
static_assert(sizeof(W_AudioPlayer_C_Restart) == 0x000001, "Wrong size on W_AudioPlayer_C_Restart");
static_assert(offsetof(W_AudioPlayer_C_Restart, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_AudioPlayer_C_Restart::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.Reveal
// 0x0008 (0x0008 - 0x0000)
struct W_AudioPlayer_C_Reveal final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_Reveal) == 0x000008, "Wrong alignment on W_AudioPlayer_C_Reveal");
static_assert(sizeof(W_AudioPlayer_C_Reveal) == 0x000008, "Wrong size on W_AudioPlayer_C_Reveal");
static_assert(offsetof(W_AudioPlayer_C_Reveal, Delay) == 0x000000, "Member 'W_AudioPlayer_C_Reveal::Delay' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.ScrubTime
// 0x0008 (0x0008 - 0x0000)
struct W_AudioPlayer_C_ScrubTime final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetScrubbedTime_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_ScrubTime) == 0x000004, "Wrong alignment on W_AudioPlayer_C_ScrubTime");
static_assert(sizeof(W_AudioPlayer_C_ScrubTime) == 0x000008, "Wrong size on W_AudioPlayer_C_ScrubTime");
static_assert(offsetof(W_AudioPlayer_C_ScrubTime, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_AudioPlayer_C_ScrubTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ScrubTime, CallFunc_GetScrubbedTime_ReturnValue) == 0x000004, "Member 'W_AudioPlayer_C_ScrubTime::CallFunc_GetScrubbedTime_ReturnValue' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.Set Current Audio Text
// 0x00E8 (0x00E8 - 0x0000)
struct W_AudioPlayer_C_Set_Current_Audio_Text final
{
public:
	int32                                         CurrentTime;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_Timer_Text_TimerText;                 // 0x0008(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0070(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00D0(0x0018)()
};
static_assert(alignof(W_AudioPlayer_C_Set_Current_Audio_Text) == 0x000008, "Wrong alignment on W_AudioPlayer_C_Set_Current_Audio_Text");
static_assert(sizeof(W_AudioPlayer_C_Set_Current_Audio_Text) == 0x0000E8, "Wrong size on W_AudioPlayer_C_Set_Current_Audio_Text");
static_assert(offsetof(W_AudioPlayer_C_Set_Current_Audio_Text, CurrentTime) == 0x000000, "Member 'W_AudioPlayer_C_Set_Current_Audio_Text::CurrentTime' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Set_Current_Audio_Text, CallFunc_Get_Timer_Text_TimerText) == 0x000008, "Member 'W_AudioPlayer_C_Set_Current_Audio_Text::CallFunc_Get_Timer_Text_TimerText' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Set_Current_Audio_Text, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'W_AudioPlayer_C_Set_Current_Audio_Text::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Set_Current_Audio_Text, K2Node_MakeStruct_FormatArgumentData_1) == 0x000070, "Member 'W_AudioPlayer_C_Set_Current_Audio_Text::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Set_Current_Audio_Text, K2Node_MakeArray_Array) == 0x0000C0, "Member 'W_AudioPlayer_C_Set_Current_Audio_Text::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Set_Current_Audio_Text, CallFunc_Format_ReturnValue) == 0x0000D0, "Member 'W_AudioPlayer_C_Set_Current_Audio_Text::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.SetExpandable
// 0x0002 (0x0002 - 0x0000)
struct W_AudioPlayer_C_SetExpandable final
{
public:
	bool                                          Expandable;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartCollapsed;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_SetExpandable) == 0x000001, "Wrong alignment on W_AudioPlayer_C_SetExpandable");
static_assert(sizeof(W_AudioPlayer_C_SetExpandable) == 0x000002, "Wrong size on W_AudioPlayer_C_SetExpandable");
static_assert(offsetof(W_AudioPlayer_C_SetExpandable, Expandable) == 0x000000, "Member 'W_AudioPlayer_C_SetExpandable::Expandable' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_SetExpandable, StartCollapsed) == 0x000001, "Member 'W_AudioPlayer_C_SetExpandable::StartCollapsed' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.SetFMODEvent
// 0x0010 (0x0010 - 0x0000)
struct W_AudioPlayer_C_SetFMODEvent final
{
public:
	class UFMODEvent*                             NewEvent;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoPlay;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_SetFMODEvent) == 0x000008, "Wrong alignment on W_AudioPlayer_C_SetFMODEvent");
static_assert(sizeof(W_AudioPlayer_C_SetFMODEvent) == 0x000010, "Wrong size on W_AudioPlayer_C_SetFMODEvent");
static_assert(offsetof(W_AudioPlayer_C_SetFMODEvent, NewEvent) == 0x000000, "Member 'W_AudioPlayer_C_SetFMODEvent::NewEvent' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_SetFMODEvent, AutoPlay) == 0x000008, "Member 'W_AudioPlayer_C_SetFMODEvent::AutoPlay' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_SetFMODEvent, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'W_AudioPlayer_C_SetFMODEvent::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_AudioPlayer_C_SetInputMode final
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_SetInputMode) == 0x000001, "Wrong alignment on W_AudioPlayer_C_SetInputMode");
static_assert(sizeof(W_AudioPlayer_C_SetInputMode) == 0x000001, "Wrong size on W_AudioPlayer_C_SetInputMode");
static_assert(offsetof(W_AudioPlayer_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_AudioPlayer_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.SetLabelText
// 0x0018 (0x0018 - 0x0000)
struct W_AudioPlayer_C_SetLabelText final
{
public:
	class FText                                   LabelText;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_AudioPlayer_C_SetLabelText) == 0x000008, "Wrong alignment on W_AudioPlayer_C_SetLabelText");
static_assert(sizeof(W_AudioPlayer_C_SetLabelText) == 0x000018, "Wrong size on W_AudioPlayer_C_SetLabelText");
static_assert(offsetof(W_AudioPlayer_C_SetLabelText, LabelText) == 0x000000, "Member 'W_AudioPlayer_C_SetLabelText::LabelText' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.SetLooping
// 0x0001 (0x0001 - 0x0000)
struct W_AudioPlayer_C_SetLooping final
{
public:
	bool                                          IsLooping;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_SetLooping) == 0x000001, "Wrong alignment on W_AudioPlayer_C_SetLooping");
static_assert(sizeof(W_AudioPlayer_C_SetLooping) == 0x000001, "Wrong size on W_AudioPlayer_C_SetLooping");
static_assert(offsetof(W_AudioPlayer_C_SetLooping, IsLooping) == 0x000000, "Member 'W_AudioPlayer_C_SetLooping::IsLooping' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.SetScrubbing
// 0x0018 (0x0018 - 0x0000)
struct W_AudioPlayer_C_SetScrubbing final
{
public:
	class UW_AudioPlayer_Button_C*                ClickedButton;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_AudioPlayer_Button_C*                OtherButton;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_SetScrubbing) == 0x000008, "Wrong alignment on W_AudioPlayer_C_SetScrubbing");
static_assert(sizeof(W_AudioPlayer_C_SetScrubbing) == 0x000018, "Wrong size on W_AudioPlayer_C_SetScrubbing");
static_assert(offsetof(W_AudioPlayer_C_SetScrubbing, ClickedButton) == 0x000000, "Member 'W_AudioPlayer_C_SetScrubbing::ClickedButton' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_SetScrubbing, OtherButton) == 0x000008, "Member 'W_AudioPlayer_C_SetScrubbing::OtherButton' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_SetScrubbing, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'W_AudioPlayer_C_SetScrubbing::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_SetScrubbing, CallFunc_Not_PreBool_ReturnValue_1) == 0x000011, "Member 'W_AudioPlayer_C_SetScrubbing::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_SetScrubbing, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000012, "Member 'W_AudioPlayer_C_SetScrubbing::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_SetScrubbing, CallFunc_BooleanOR_ReturnValue) == 0x000013, "Member 'W_AudioPlayer_C_SetScrubbing::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_SetScrubbing, CallFunc_Not_PreBool_ReturnValue_2) == 0x000014, "Member 'W_AudioPlayer_C_SetScrubbing::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_SetScrubbing, CallFunc_BooleanOR_ReturnValue_1) == 0x000015, "Member 'W_AudioPlayer_C_SetScrubbing::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_SetScrubbing, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000016, "Member 'W_AudioPlayer_C_SetScrubbing::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.SetState
// 0x0002 (0x0002 - 0x0000)
struct W_AudioPlayer_C_SetState final
{
public:
	E_Briefing_Audio_PlayStates                   AudioPlayState;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_SetState) == 0x000001, "Wrong alignment on W_AudioPlayer_C_SetState");
static_assert(sizeof(W_AudioPlayer_C_SetState) == 0x000002, "Wrong size on W_AudioPlayer_C_SetState");
static_assert(offsetof(W_AudioPlayer_C_SetState, AudioPlayState) == 0x000000, "Member 'W_AudioPlayer_C_SetState::AudioPlayState' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_SetState, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'W_AudioPlayer_C_SetState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.SetTabletState
// 0x0001 (0x0001 - 0x0000)
struct W_AudioPlayer_C_SetTabletState final
{
public:
	bool                                          IsAwake;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_SetTabletState) == 0x000001, "Wrong alignment on W_AudioPlayer_C_SetTabletState");
static_assert(sizeof(W_AudioPlayer_C_SetTabletState) == 0x000001, "Wrong size on W_AudioPlayer_C_SetTabletState");
static_assert(offsetof(W_AudioPlayer_C_SetTabletState, IsAwake) == 0x000000, "Member 'W_AudioPlayer_C_SetTabletState::IsAwake' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.SetVisualTheme
// 0x0001 (0x0001 - 0x0000)
struct W_AudioPlayer_C_SetVisualTheme final
{
public:
	bool                                          UseDarkTheme;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_SetVisualTheme) == 0x000001, "Wrong alignment on W_AudioPlayer_C_SetVisualTheme");
static_assert(sizeof(W_AudioPlayer_C_SetVisualTheme) == 0x000001, "Wrong size on W_AudioPlayer_C_SetVisualTheme");
static_assert(offsetof(W_AudioPlayer_C_SetVisualTheme, UseDarkTheme) == 0x000000, "Member 'W_AudioPlayer_C_SetVisualTheme::UseDarkTheme' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.SetVolume
// 0x0010 (0x0010 - 0x0000)
struct W_AudioPlayer_C_SetVolume final
{
public:
	double                                        Volume_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetVolume_volume_ImplicitCast;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_SetVolume) == 0x000008, "Wrong alignment on W_AudioPlayer_C_SetVolume");
static_assert(sizeof(W_AudioPlayer_C_SetVolume) == 0x000010, "Wrong size on W_AudioPlayer_C_SetVolume");
static_assert(offsetof(W_AudioPlayer_C_SetVolume, Volume_0) == 0x000000, "Member 'W_AudioPlayer_C_SetVolume::Volume_0' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_SetVolume, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'W_AudioPlayer_C_SetVolume::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_SetVolume, CallFunc_SetVolume_volume_ImplicitCast) == 0x00000C, "Member 'W_AudioPlayer_C_SetVolume::CallFunc_SetVolume_volume_ImplicitCast' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.Stop
// 0x0001 (0x0001 - 0x0000)
struct W_AudioPlayer_C_Stop final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_Stop) == 0x000001, "Wrong alignment on W_AudioPlayer_C_Stop");
static_assert(sizeof(W_AudioPlayer_C_Stop) == 0x000001, "Wrong size on W_AudioPlayer_C_Stop");
static_assert(offsetof(W_AudioPlayer_C_Stop, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_AudioPlayer_C_Stop::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_AudioPlayer_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_Tick) == 0x000004, "Wrong alignment on W_AudioPlayer_C_Tick");
static_assert(sizeof(W_AudioPlayer_C_Tick) == 0x00003C, "Wrong size on W_AudioPlayer_C_Tick");
static_assert(offsetof(W_AudioPlayer_C_Tick, MyGeometry) == 0x000000, "Member 'W_AudioPlayer_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_Tick, InDeltaTime) == 0x000038, "Member 'W_AudioPlayer_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.ToggleLooping
// 0x0004 (0x0004 - 0x0000)
struct W_AudioPlayer_C_ToggleLooping final
{
public:
	bool                                          Toggle_Button;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSelected_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_ToggleLooping) == 0x000001, "Wrong alignment on W_AudioPlayer_C_ToggleLooping");
static_assert(sizeof(W_AudioPlayer_C_ToggleLooping) == 0x000004, "Wrong size on W_AudioPlayer_C_ToggleLooping");
static_assert(offsetof(W_AudioPlayer_C_ToggleLooping, Toggle_Button) == 0x000000, "Member 'W_AudioPlayer_C_ToggleLooping::Toggle_Button' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ToggleLooping, CallFunc_GetSelected_ReturnValue) == 0x000001, "Member 'W_AudioPlayer_C_ToggleLooping::CallFunc_GetSelected_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ToggleLooping, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'W_AudioPlayer_C_ToggleLooping::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_AudioPlayer_C_ToggleLooping, CallFunc_Not_PreBool_ReturnValue_1) == 0x000003, "Member 'W_AudioPlayer_C_ToggleLooping::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function W_AudioPlayer.W_AudioPlayer_C.GetFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct W_AudioPlayer_C_GetFocusTarget final
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_AudioPlayer_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_AudioPlayer_C_GetFocusTarget");
static_assert(sizeof(W_AudioPlayer_C_GetFocusTarget) == 0x000008, "Wrong size on W_AudioPlayer_C_GetFocusTarget");
static_assert(offsetof(W_AudioPlayer_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_AudioPlayer_C_GetFocusTarget::Focus' has a wrong offset!");

}

