#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_MunitionsOverviewSlot

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "CommonInput_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_MunitionsOverviewSlot.W_MunitionsOverviewSlot_C
// 0x0128 (0x0498 - 0x0370)
class UW_MunitionsOverviewSlot_C final : public UMunitionsSlot
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       animAutoScrollerFade;                              // 0x0378(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BackgroundGradient;                                // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BottomLine;                                        // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             MunitionListAutoScroller;                          // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            MunitionsButton;                                   // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Separator;                                         // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Sidebar;                                           // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopLine;                                           // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_SlotCount;                                     // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_GamepadDeco;                                    // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MunitionsOverviewSlot_Element_C*     W_MunitionsSlotElement;                            // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSlateColor                            NormalGrey;                                        // 0x03D0(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            HoveredWhite;                                      // 0x03E4(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            SelectedRed;                                       // 0x03F8(0x0014)(Edit, BlueprintVisible)
	bool                                          bHovered;                                          // 0x040C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPressed;                                          // 0x040D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40E[0x2];                                      // 0x040E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonButtonStyle>         ButtonStyle;                                       // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCommonButtonStyle>         GamepadButtonStyle;                                // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          bUseGamepad;                                       // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReverseAutoScroll;                                // 0x0421(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_422[0x6];                                      // 0x0422(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Button_C*                            Parent_Button;                                     // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnClicked;                                         // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnHovered;                                         // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnUnhovered;                                       // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnPressed;                                         // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnReleased;                                        // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        AutoScrollProgress;                                // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AutoScrollSpeed;                                   // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AutoScrollResetDelay;                              // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BindClick(class UW_Button_C* ParentButton);
	void BindDoubleClick(class UW_Button_C* ParentButton);
	void BindHovered(class UW_Button_C* ParentButton);
	void BindPressedState();
	void BindSelectedState(class UW_Button_C* ParentButton);
	void BindToButton(class UW_Button_C* ParentButton, bool BindClicks);
	void BindUnhovered();
	void BndEvt__W_MunitionsSlot_MunitionsButton_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_MunitionsSlot_MunitionsButton_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_MunitionsSlot_MunitionsButton_K2Node_ComponentBoundEvent_2_Unhovered__DelegateSignature();
	void BndEvt__W_MunitionsSlot_MunitionsButton_K2Node_ComponentBoundEvent_3_Pressed__DelegateSignature();
	void BndEvt__W_MunitionsSlot_MunitionsButton_K2Node_ComponentBoundEvent_4_Released__DelegateSignature();
	void Construct();
	void CreateElement(class UTexture2D* Icon, int32 Amount, bool bIsAmmoElement, const class FText& AmmoType);
	void CreateSeparator(bool bShouldCreateSeparator);
	void ExecuteUbergraph_W_MunitionsOverviewSlot(int32 EntryPoint);
	void Finished_350F6A894C1DB263F37D5A903B9DF3B3();
	void Finished_E56C9B394D35DA873E40859FDFD06587();
	void GetAmmoOverrideIcon(const class FText& AmmoType, class UTexture2D** OverrideIcon);
	struct FSlateColor GetNormalColorByState();
	void InputMethodChanged(ECommonInputType bNewInputType);
	void SetVisualState(bool Hovered, bool Pressed);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UnbindFromButton();
	void UpdateSlotText(int32 CurrentSlots, int32 MaxSlots);
	void UpdateStyle(bool bUseGamepad_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_MunitionsOverviewSlot_C">();
	}
	static class UW_MunitionsOverviewSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_MunitionsOverviewSlot_C>();
	}
};
static_assert(alignof(UW_MunitionsOverviewSlot_C) == 0x000008, "Wrong alignment on UW_MunitionsOverviewSlot_C");
static_assert(sizeof(UW_MunitionsOverviewSlot_C) == 0x000498, "Wrong size on UW_MunitionsOverviewSlot_C");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, UberGraphFrame) == 0x000370, "Member 'UW_MunitionsOverviewSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, animAutoScrollerFade) == 0x000378, "Member 'UW_MunitionsOverviewSlot_C::animAutoScrollerFade' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, BackgroundGradient) == 0x000380, "Member 'UW_MunitionsOverviewSlot_C::BackgroundGradient' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, BottomLine) == 0x000388, "Member 'UW_MunitionsOverviewSlot_C::BottomLine' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, MunitionListAutoScroller) == 0x000390, "Member 'UW_MunitionsOverviewSlot_C::MunitionListAutoScroller' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, MunitionsButton) == 0x000398, "Member 'UW_MunitionsOverviewSlot_C::MunitionsButton' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, Separator) == 0x0003A0, "Member 'UW_MunitionsOverviewSlot_C::Separator' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, Sidebar) == 0x0003A8, "Member 'UW_MunitionsOverviewSlot_C::Sidebar' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, TopLine) == 0x0003B0, "Member 'UW_MunitionsOverviewSlot_C::TopLine' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, txt_SlotCount) == 0x0003B8, "Member 'UW_MunitionsOverviewSlot_C::txt_SlotCount' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, VB_GamepadDeco) == 0x0003C0, "Member 'UW_MunitionsOverviewSlot_C::VB_GamepadDeco' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, W_MunitionsSlotElement) == 0x0003C8, "Member 'UW_MunitionsOverviewSlot_C::W_MunitionsSlotElement' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, NormalGrey) == 0x0003D0, "Member 'UW_MunitionsOverviewSlot_C::NormalGrey' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, HoveredWhite) == 0x0003E4, "Member 'UW_MunitionsOverviewSlot_C::HoveredWhite' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, SelectedRed) == 0x0003F8, "Member 'UW_MunitionsOverviewSlot_C::SelectedRed' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, bHovered) == 0x00040C, "Member 'UW_MunitionsOverviewSlot_C::bHovered' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, bPressed) == 0x00040D, "Member 'UW_MunitionsOverviewSlot_C::bPressed' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, ButtonStyle) == 0x000410, "Member 'UW_MunitionsOverviewSlot_C::ButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, GamepadButtonStyle) == 0x000418, "Member 'UW_MunitionsOverviewSlot_C::GamepadButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, bUseGamepad) == 0x000420, "Member 'UW_MunitionsOverviewSlot_C::bUseGamepad' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, bReverseAutoScroll) == 0x000421, "Member 'UW_MunitionsOverviewSlot_C::bReverseAutoScroll' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, Parent_Button) == 0x000428, "Member 'UW_MunitionsOverviewSlot_C::Parent_Button' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, OnClicked) == 0x000430, "Member 'UW_MunitionsOverviewSlot_C::OnClicked' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, OnHovered) == 0x000440, "Member 'UW_MunitionsOverviewSlot_C::OnHovered' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, OnUnhovered) == 0x000450, "Member 'UW_MunitionsOverviewSlot_C::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, OnPressed) == 0x000460, "Member 'UW_MunitionsOverviewSlot_C::OnPressed' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, OnReleased) == 0x000470, "Member 'UW_MunitionsOverviewSlot_C::OnReleased' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, AutoScrollProgress) == 0x000480, "Member 'UW_MunitionsOverviewSlot_C::AutoScrollProgress' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, AutoScrollSpeed) == 0x000488, "Member 'UW_MunitionsOverviewSlot_C::AutoScrollSpeed' has a wrong offset!");
static_assert(offsetof(UW_MunitionsOverviewSlot_C, AutoScrollResetDelay) == 0x000490, "Member 'UW_MunitionsOverviewSlot_C::AutoScrollResetDelay' has a wrong offset!");

}

