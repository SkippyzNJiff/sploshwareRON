#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Stats_Playtime

#include "Basic.hpp"

#include "ReadyOrNot_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Stats_Playtime.W_Stats_Playtime_C
// 0x0330 (0x0618 - 0x02E8)
class UW_Stats_Playtime_C final : public UStatViewerWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_62;                                          // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_div;                                           // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_MultiplayerColor;                              // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_PlaytimeGraph;                                 // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_PlaytimeGraph_Compare;                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_SingleplayerColor;                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       lbl_Multiplayer;                                   // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       lbl_Singleplayer;                                  // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_MultiplayerTotal;                              // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_MultiplayerTotal_Compare;                      // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_ScorePerMin;                                   // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_ScorePerMin_Compare;                           // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_SingleplayerTotal;                             // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_SingleplayerTotal_Compare;                     // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_TotalPlaytime;                                 // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_TotalPlaytime_Compare;                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_CompareTotal;                                   // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Stats_List_C*                        W_Stat_List;                                       // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FDataTableRowHandle                    Singleplayer;                                      // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    Commander;                                         // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    Practice;                                          // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    Multiplayer;                                       // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FLinearColor                           ColSingleplayer;                                   // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ColMultiplayer;                                    // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynMatGraph;                                       // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynMatGraph_Compare;                               // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bCompare;                                          // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SingleplayerValue;                                 // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MultiplayerValue;                                  // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TotalValue;                                        // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SingleplayerPercent;                               // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScorePerMinute;                                    // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SingleplayerValue_Compare;                         // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MultiplayerValue_Compare;                          // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TotalValue_Compare;                                // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SingleplayerPercent_Compare;                       // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScorePerMinute_Compare;                            // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFriend                                CompareFriend;                                     // 0x0448(0x01C8)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          NoPlaytime;                                        // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoComparePlaytime;                                 // 0x0611(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BackPage(bool* Handled);
	void CancelCompare();
	void ChangePage(class FName PageName);
	void CompareWithFriend(const struct FFriend& Friend);
	void Construct();
	void ExecuteUbergraph_W_Stats_Playtime(int32 EntryPoint);
	void FormatPlaytime(double Time__in_seconds_, class FText* Result);
	double GetGraphNotchValue(double NotchSize, bool ForCompare);
	double GetSingleplayerPercent(bool IsCompare);
	void Hide(double Delay, bool Collapse);
	void InitializeMaterials();
	void InitializeStyle();
	void OnInitialized();
	void OnStatChanged(const class FString& StatID);
	void PopulateDemoValues();
	void PreConstruct(bool IsDesignTime);
	void Reveal(double Delay);
	void SetInputMode(bool IsGamepad);
	void StatsLoaded();
	void UpdateStats();
	void UpdateStyle();

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Stats_Playtime_C">();
	}
	static class UW_Stats_Playtime_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Stats_Playtime_C>();
	}
};
static_assert(alignof(UW_Stats_Playtime_C) == 0x000008, "Wrong alignment on UW_Stats_Playtime_C");
static_assert(sizeof(UW_Stats_Playtime_C) == 0x000618, "Wrong size on UW_Stats_Playtime_C");
static_assert(offsetof(UW_Stats_Playtime_C, UberGraphFrame) == 0x0002E8, "Member 'UW_Stats_Playtime_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, Image_62) == 0x0002F0, "Member 'UW_Stats_Playtime_C::Image_62' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, img_div) == 0x0002F8, "Member 'UW_Stats_Playtime_C::img_div' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, img_MultiplayerColor) == 0x000300, "Member 'UW_Stats_Playtime_C::img_MultiplayerColor' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, img_PlaytimeGraph) == 0x000308, "Member 'UW_Stats_Playtime_C::img_PlaytimeGraph' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, img_PlaytimeGraph_Compare) == 0x000310, "Member 'UW_Stats_Playtime_C::img_PlaytimeGraph_Compare' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, img_SingleplayerColor) == 0x000318, "Member 'UW_Stats_Playtime_C::img_SingleplayerColor' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, lbl_Multiplayer) == 0x000320, "Member 'UW_Stats_Playtime_C::lbl_Multiplayer' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, lbl_Singleplayer) == 0x000328, "Member 'UW_Stats_Playtime_C::lbl_Singleplayer' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, txt_MultiplayerTotal) == 0x000330, "Member 'UW_Stats_Playtime_C::txt_MultiplayerTotal' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, txt_MultiplayerTotal_Compare) == 0x000338, "Member 'UW_Stats_Playtime_C::txt_MultiplayerTotal_Compare' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, txt_ScorePerMin) == 0x000340, "Member 'UW_Stats_Playtime_C::txt_ScorePerMin' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, txt_ScorePerMin_Compare) == 0x000348, "Member 'UW_Stats_Playtime_C::txt_ScorePerMin_Compare' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, txt_SingleplayerTotal) == 0x000350, "Member 'UW_Stats_Playtime_C::txt_SingleplayerTotal' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, txt_SingleplayerTotal_Compare) == 0x000358, "Member 'UW_Stats_Playtime_C::txt_SingleplayerTotal_Compare' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, txt_TotalPlaytime) == 0x000360, "Member 'UW_Stats_Playtime_C::txt_TotalPlaytime' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, txt_TotalPlaytime_Compare) == 0x000368, "Member 'UW_Stats_Playtime_C::txt_TotalPlaytime_Compare' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, VB_CompareTotal) == 0x000370, "Member 'UW_Stats_Playtime_C::VB_CompareTotal' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, W_Stat_List) == 0x000378, "Member 'UW_Stats_Playtime_C::W_Stat_List' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, Singleplayer) == 0x000380, "Member 'UW_Stats_Playtime_C::Singleplayer' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, Commander) == 0x000390, "Member 'UW_Stats_Playtime_C::Commander' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, Practice) == 0x0003A0, "Member 'UW_Stats_Playtime_C::Practice' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, Multiplayer) == 0x0003B0, "Member 'UW_Stats_Playtime_C::Multiplayer' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, ColSingleplayer) == 0x0003C0, "Member 'UW_Stats_Playtime_C::ColSingleplayer' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, ColMultiplayer) == 0x0003D0, "Member 'UW_Stats_Playtime_C::ColMultiplayer' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, DynMatGraph) == 0x0003E0, "Member 'UW_Stats_Playtime_C::DynMatGraph' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, DynMatGraph_Compare) == 0x0003E8, "Member 'UW_Stats_Playtime_C::DynMatGraph_Compare' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, bCompare) == 0x0003F0, "Member 'UW_Stats_Playtime_C::bCompare' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, SingleplayerValue) == 0x0003F8, "Member 'UW_Stats_Playtime_C::SingleplayerValue' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, MultiplayerValue) == 0x000400, "Member 'UW_Stats_Playtime_C::MultiplayerValue' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, TotalValue) == 0x000408, "Member 'UW_Stats_Playtime_C::TotalValue' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, SingleplayerPercent) == 0x000410, "Member 'UW_Stats_Playtime_C::SingleplayerPercent' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, ScorePerMinute) == 0x000418, "Member 'UW_Stats_Playtime_C::ScorePerMinute' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, SingleplayerValue_Compare) == 0x000420, "Member 'UW_Stats_Playtime_C::SingleplayerValue_Compare' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, MultiplayerValue_Compare) == 0x000428, "Member 'UW_Stats_Playtime_C::MultiplayerValue_Compare' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, TotalValue_Compare) == 0x000430, "Member 'UW_Stats_Playtime_C::TotalValue_Compare' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, SingleplayerPercent_Compare) == 0x000438, "Member 'UW_Stats_Playtime_C::SingleplayerPercent_Compare' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, ScorePerMinute_Compare) == 0x000440, "Member 'UW_Stats_Playtime_C::ScorePerMinute_Compare' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, CompareFriend) == 0x000448, "Member 'UW_Stats_Playtime_C::CompareFriend' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, NoPlaytime) == 0x000610, "Member 'UW_Stats_Playtime_C::NoPlaytime' has a wrong offset!");
static_assert(offsetof(UW_Stats_Playtime_C, NoComparePlaytime) == 0x000611, "Member 'UW_Stats_Playtime_C::NoComparePlaytime' has a wrong offset!");

}

