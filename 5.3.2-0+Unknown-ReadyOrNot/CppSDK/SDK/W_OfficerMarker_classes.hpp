#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_OfficerMarker

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_OfficerMarker.W_OfficerMarker_C
// 0x00A8 (0x0368 - 0x02C0)
class UW_OfficerMarker_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Hover;                                             // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                Border_0;                                          // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 icn_Circle;                                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBox_0;                                        // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Number;                                        // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         PlayerNumber;                                      // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PlayerColor;                                       // 0x02F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Solid;                                             // 0x0304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UW_OfficerMarker_C* TriggeringMarker)> OnClicked;            // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_OfficerMarker_C* TriggeringMarker)> OnHovered;            // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_OfficerMarker_C* TriggeringMarker)> OnUnhovered;          // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         ID;                                                // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UW_OfficerMarker_C* TriggeringMarker)> OnRightClicked;       // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IgnoreInheritedScale;                              // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotPlayerState*                 PlayerState;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCharacterProxy*                        CharacterProxy;                                    // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_W_OfficerMarker(int32 EntryPoint);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OnPlanningTeamUpdated(EPlanningLineTeam Team);
	void PreConstruct(bool IsDesignTime);
	void SetByPlayerState(class AReadyOrNotPlayerState* PlayerState_0);
	void SetByProxy(class UCharacterProxy* Character);
	void UpdateData(int32 Number, const struct FLinearColor& Color);
	void UpdateStyle();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_OfficerMarker_C">();
	}
	static class UW_OfficerMarker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_OfficerMarker_C>();
	}
};
static_assert(alignof(UW_OfficerMarker_C) == 0x000008, "Wrong alignment on UW_OfficerMarker_C");
static_assert(sizeof(UW_OfficerMarker_C) == 0x000368, "Wrong size on UW_OfficerMarker_C");
static_assert(offsetof(UW_OfficerMarker_C, UberGraphFrame) == 0x0002C0, "Member 'UW_OfficerMarker_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, Hover) == 0x0002C8, "Member 'UW_OfficerMarker_C::Hover' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, Border_0) == 0x0002D0, "Member 'UW_OfficerMarker_C::Border_0' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, icn_Circle) == 0x0002D8, "Member 'UW_OfficerMarker_C::icn_Circle' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, ScaleBox_0) == 0x0002E0, "Member 'UW_OfficerMarker_C::ScaleBox_0' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, txt_Number) == 0x0002E8, "Member 'UW_OfficerMarker_C::txt_Number' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, PlayerNumber) == 0x0002F0, "Member 'UW_OfficerMarker_C::PlayerNumber' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, PlayerColor) == 0x0002F4, "Member 'UW_OfficerMarker_C::PlayerColor' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, Solid) == 0x000304, "Member 'UW_OfficerMarker_C::Solid' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, OnClicked) == 0x000308, "Member 'UW_OfficerMarker_C::OnClicked' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, OnHovered) == 0x000318, "Member 'UW_OfficerMarker_C::OnHovered' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, OnUnhovered) == 0x000328, "Member 'UW_OfficerMarker_C::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, ID) == 0x000338, "Member 'UW_OfficerMarker_C::ID' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, OnRightClicked) == 0x000340, "Member 'UW_OfficerMarker_C::OnRightClicked' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, IgnoreInheritedScale) == 0x000350, "Member 'UW_OfficerMarker_C::IgnoreInheritedScale' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, PlayerState) == 0x000358, "Member 'UW_OfficerMarker_C::PlayerState' has a wrong offset!");
static_assert(offsetof(UW_OfficerMarker_C, CharacterProxy) == 0x000360, "Member 'UW_OfficerMarker_C::CharacterProxy' has a wrong offset!");

}

