#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Text

#include "Basic.hpp"

#include "ST_Style_Text_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "E_TextStyles_structs.hpp"
#include "Slate_structs.hpp"
#include "UMG_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Text.W_Text_C
// 0x02E0 (0x0618 - 0x0338)
class UW_Text_C : public UTextWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0338(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	E_TextStyles                                  SelectTextStyle;                                   // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0348(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FST_Style_Text                         TextStyleOld;                                      // 0x0360(0x00C8)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ShadowOffset;                                      // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ShadowColor;                                       // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoWrapText;                                      // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Substring;                                         // 0x0459(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SingleWord;                                        // 0x045A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45B[0x1];                                      // 0x045B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LetterSpacing;                                     // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Truncate;                                          // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_461[0x3];                                      // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharacterLimit;                                    // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class FString                                 TruncationCharacters;                              // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	double                                        CalculatedSpacing;                                 // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextJustify                                  Justification;                                     // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CalculatedWidth;                                   // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentLetterSpacing;                              // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CharacterCount;                                    // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         CharacterArray;                                    // 0x0498(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, class UW_Text_C*>                 SpacedCharacterElements;                           // 0x04A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UWrapBoxSlot*, class UW_Text_C*>   WordElements;                                      // 0x04F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         WordCount;                                         // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBox*                         HB_Substring;                                      // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_SingleLine;                                     // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETextTransformPolicy                          TransformPolicy;                                   // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_561[0x7];                                      // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             TextStyleDataTable;                                // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRichText;                                       // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_571[0x7];                                      // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFontOutlineSettings                   Outline_Settings;                                  // 0x0578(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   Typeface;                                          // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FontSize;                                          // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A4[0x4];                                      // 0x05A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetTransform                       TextRenderTransform;                               // 0x05A8(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FLinearColor                           TextColor;                                         // 0x05E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TextStyles                                  CurrentTextStyle;                                  // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_5F1[0x3];                                      // 0x05F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorOverride;                                     // 0x05F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FontSizeOverride;                                  // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TextStyle;                                         // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         In_Wrap_Text_At;                                   // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_W_Text(int32 EntryPoint);
	void GetText(class FText* CurrentText_0);
	void PreConstruct(bool IsDesignTime);
	void SetFont(const struct FSlateFontInfo& Font);
	void SetFontSize(int32 FontSize_0);
	void SetOutline(const struct FFontOutlineSettings& FontOutlineSettings);
	void SetStyle(const struct FST_Style_Text& TextStyle_0);
	void SetText(const class FText& Text_0);
	void SetTextColor(const struct FLinearColor& Color_0);
	void SetTextJustification(ETextJustify Justification_0);
	void SetTextLetterSpacing(int32 LetterSpacing_0);
	void SetTextShadow(const struct FVector2D& ShadowOffset_0, const struct FLinearColor& ShadowColor_0);
	void SetTextTransform(ETextTransformPolicy TextTransform);
	void TruncateText(bool Truncate_0, int32 CharacterLimit_0, const class FString& TruncationCharacters_0, class FText* TruncatedText);
	void UpdateFont(const struct FSlateFontInfo& Font);
	void UpdateText(const class FText& Text_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Text_C">();
	}
	static class UW_Text_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Text_C>();
	}
};
static_assert(alignof(UW_Text_C) == 0x000008, "Wrong alignment on UW_Text_C");
static_assert(sizeof(UW_Text_C) == 0x000618, "Wrong size on UW_Text_C");
static_assert(offsetof(UW_Text_C, UberGraphFrame) == 0x000338, "Member 'UW_Text_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Text_C, SelectTextStyle) == 0x000340, "Member 'UW_Text_C::SelectTextStyle' has a wrong offset!");
static_assert(offsetof(UW_Text_C, Text) == 0x000348, "Member 'UW_Text_C::Text' has a wrong offset!");
static_assert(offsetof(UW_Text_C, TextStyleOld) == 0x000360, "Member 'UW_Text_C::TextStyleOld' has a wrong offset!");
static_assert(offsetof(UW_Text_C, Color) == 0x000428, "Member 'UW_Text_C::Color' has a wrong offset!");
static_assert(offsetof(UW_Text_C, ShadowOffset) == 0x000438, "Member 'UW_Text_C::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UW_Text_C, ShadowColor) == 0x000448, "Member 'UW_Text_C::ShadowColor' has a wrong offset!");
static_assert(offsetof(UW_Text_C, AutoWrapText) == 0x000458, "Member 'UW_Text_C::AutoWrapText' has a wrong offset!");
static_assert(offsetof(UW_Text_C, Substring) == 0x000459, "Member 'UW_Text_C::Substring' has a wrong offset!");
static_assert(offsetof(UW_Text_C, SingleWord) == 0x00045A, "Member 'UW_Text_C::SingleWord' has a wrong offset!");
static_assert(offsetof(UW_Text_C, LetterSpacing) == 0x00045C, "Member 'UW_Text_C::LetterSpacing' has a wrong offset!");
static_assert(offsetof(UW_Text_C, Truncate) == 0x000460, "Member 'UW_Text_C::Truncate' has a wrong offset!");
static_assert(offsetof(UW_Text_C, CharacterLimit) == 0x000464, "Member 'UW_Text_C::CharacterLimit' has a wrong offset!");
static_assert(offsetof(UW_Text_C, TruncationCharacters) == 0x000468, "Member 'UW_Text_C::TruncationCharacters' has a wrong offset!");
static_assert(offsetof(UW_Text_C, CalculatedSpacing) == 0x000478, "Member 'UW_Text_C::CalculatedSpacing' has a wrong offset!");
static_assert(offsetof(UW_Text_C, Justification) == 0x000480, "Member 'UW_Text_C::Justification' has a wrong offset!");
static_assert(offsetof(UW_Text_C, CalculatedWidth) == 0x000488, "Member 'UW_Text_C::CalculatedWidth' has a wrong offset!");
static_assert(offsetof(UW_Text_C, CurrentLetterSpacing) == 0x000490, "Member 'UW_Text_C::CurrentLetterSpacing' has a wrong offset!");
static_assert(offsetof(UW_Text_C, CharacterCount) == 0x000494, "Member 'UW_Text_C::CharacterCount' has a wrong offset!");
static_assert(offsetof(UW_Text_C, CharacterArray) == 0x000498, "Member 'UW_Text_C::CharacterArray' has a wrong offset!");
static_assert(offsetof(UW_Text_C, SpacedCharacterElements) == 0x0004A8, "Member 'UW_Text_C::SpacedCharacterElements' has a wrong offset!");
static_assert(offsetof(UW_Text_C, WordElements) == 0x0004F8, "Member 'UW_Text_C::WordElements' has a wrong offset!");
static_assert(offsetof(UW_Text_C, WordCount) == 0x000548, "Member 'UW_Text_C::WordCount' has a wrong offset!");
static_assert(offsetof(UW_Text_C, HB_Substring) == 0x000550, "Member 'UW_Text_C::HB_Substring' has a wrong offset!");
static_assert(offsetof(UW_Text_C, HB_SingleLine) == 0x000558, "Member 'UW_Text_C::HB_SingleLine' has a wrong offset!");
static_assert(offsetof(UW_Text_C, TransformPolicy) == 0x000560, "Member 'UW_Text_C::TransformPolicy' has a wrong offset!");
static_assert(offsetof(UW_Text_C, TextStyleDataTable) == 0x000568, "Member 'UW_Text_C::TextStyleDataTable' has a wrong offset!");
static_assert(offsetof(UW_Text_C, UseRichText) == 0x000570, "Member 'UW_Text_C::UseRichText' has a wrong offset!");
static_assert(offsetof(UW_Text_C, Outline_Settings) == 0x000578, "Member 'UW_Text_C::Outline_Settings' has a wrong offset!");
static_assert(offsetof(UW_Text_C, Typeface) == 0x000598, "Member 'UW_Text_C::Typeface' has a wrong offset!");
static_assert(offsetof(UW_Text_C, FontSize) == 0x0005A0, "Member 'UW_Text_C::FontSize' has a wrong offset!");
static_assert(offsetof(UW_Text_C, TextRenderTransform) == 0x0005A8, "Member 'UW_Text_C::TextRenderTransform' has a wrong offset!");
static_assert(offsetof(UW_Text_C, TextColor) == 0x0005E0, "Member 'UW_Text_C::TextColor' has a wrong offset!");
static_assert(offsetof(UW_Text_C, CurrentTextStyle) == 0x0005F0, "Member 'UW_Text_C::CurrentTextStyle' has a wrong offset!");
static_assert(offsetof(UW_Text_C, ColorOverride) == 0x0005F4, "Member 'UW_Text_C::ColorOverride' has a wrong offset!");
static_assert(offsetof(UW_Text_C, FontSizeOverride) == 0x000604, "Member 'UW_Text_C::FontSizeOverride' has a wrong offset!");
static_assert(offsetof(UW_Text_C, TextStyle) == 0x000608, "Member 'UW_Text_C::TextStyle' has a wrong offset!");
static_assert(offsetof(UW_Text_C, In_Wrap_Text_At) == 0x000610, "Member 'UW_Text_C::In_Wrap_Text_At' has a wrong offset!");

}

