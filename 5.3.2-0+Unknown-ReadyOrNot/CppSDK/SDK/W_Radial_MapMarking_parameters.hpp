#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Radial_MapMarking

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CommonInput_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"
#include "Slate_structs.hpp"
#include "st_PreMissionMarker_Categories_structs.hpp"
#include "st_PreMissionMarkers_structs.hpp"


namespace SDK::Params
{

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.AddCategory
// 0x0038 (0x0038 - 0x0000)
struct W_Radial_MapMarking_C_AddCategory final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UTexture2D*                             IconImage;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          HasSubCommands;                                    // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Radial_MapMarking_C_AddCategory) == 0x000008, "Wrong alignment on W_Radial_MapMarking_C_AddCategory");
static_assert(sizeof(W_Radial_MapMarking_C_AddCategory) == 0x000038, "Wrong size on W_Radial_MapMarking_C_AddCategory");
static_assert(offsetof(W_Radial_MapMarking_C_AddCategory, ID) == 0x000000, "Member 'W_Radial_MapMarking_C_AddCategory::ID' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_AddCategory, DisplayName) == 0x000010, "Member 'W_Radial_MapMarking_C_AddCategory::DisplayName' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_AddCategory, IconImage) == 0x000028, "Member 'W_Radial_MapMarking_C_AddCategory::IconImage' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_AddCategory, HasSubCommands) == 0x000030, "Member 'W_Radial_MapMarking_C_AddCategory::HasSubCommands' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_0_SelectionChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_0_SelectionChanged__DelegateSignature final
{
public:
	int32                                         NewSelection;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OldSelection;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_0_SelectionChanged__DelegateSignature) == 0x000004, "Wrong alignment on W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_0_SelectionChanged__DelegateSignature");
static_assert(sizeof(W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_0_SelectionChanged__DelegateSignature) == 0x000008, "Wrong size on W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_0_SelectionChanged__DelegateSignature");
static_assert(offsetof(W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_0_SelectionChanged__DelegateSignature, NewSelection) == 0x000000, "Member 'W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_0_SelectionChanged__DelegateSignature::NewSelection' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_0_SelectionChanged__DelegateSignature, OldSelection) == 0x000004, "Member 'W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_InnerRadial_K2Node_ComponentBoundEvent_0_SelectionChanged__DelegateSignature::OldSelection' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_3_SelectionChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_3_SelectionChanged__DelegateSignature final
{
public:
	int32                                         NewSelection;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OldSelection;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_3_SelectionChanged__DelegateSignature) == 0x000004, "Wrong alignment on W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_3_SelectionChanged__DelegateSignature");
static_assert(sizeof(W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_3_SelectionChanged__DelegateSignature) == 0x000008, "Wrong size on W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_3_SelectionChanged__DelegateSignature");
static_assert(offsetof(W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_3_SelectionChanged__DelegateSignature, NewSelection) == 0x000000, "Member 'W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_3_SelectionChanged__DelegateSignature::NewSelection' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_3_SelectionChanged__DelegateSignature, OldSelection) == 0x000004, "Member 'W_Radial_MapMarking_C_BndEvt__W_Radial_MapMarking_OutterRadial_K2Node_ComponentBoundEvent_3_SelectionChanged__DelegateSignature::OldSelection' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.ExecuteUbergraph_W_Radial_MapMarking
// 0x02C8 (0x02C8 - 0x0000)
struct W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_RadialIcon_MapMarking_C*             CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0020(0x0010)(ReferenceParm)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0038(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_ID;                             // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   K2Node_CustomEvent_DisplayName;                    // 0x0090(0x0018)()
	class UTexture2D*                             K2Node_CustomEvent_IconImage;                      // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_HasSubCommands;                 // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_RadialIcon_MapMarking_C*             CallFunc_Create_ReturnValue_1;                     // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddChildToRadialMenu_Success;             // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00DC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct Fst_PreMissionMarker_Categories        CallFunc_GetDataTableRowFromName_OutRow;           // 0x00E8(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fst_PreMissionMarkers                  CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0140(0x0080)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddChildToRadialMenu_Success_1;           // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C2[0x6];                                      // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x01C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetChild_Output;                          // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetChild_Success;                         // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_CreatePlayAnimationProxyObject_Result;    // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimationPlayCallbackProxy*      CallFunc_CreatePlayAnimationProxyObject_ReturnValue; // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_RadialIcon_MapMarking_C*             K2Node_DynamicCast_AsW_Radial_Icon_Map_Marking;    // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_NewSelection_1;         // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OldSelection_1;         // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetChild_Output_1;                        // 0x0218(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetChild_Success_1;                       // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_222[0x6];                                      // 0x0222(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_RadialIcon_MapMarking_C*             K2Node_DynamicCast_AsW_Radial_Icon_Map_Marking_1;  // 0x0228(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_NewSelection;           // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OldSelection;           // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetChild_Output_2;                        // 0x0240(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetChild_Success_2;                       // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_RadialIcon_MapMarking_C*             K2Node_DynamicCast_AsW_Radial_Icon_Map_Marking_2;  // 0x0250(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25A[0x6];                                      // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_1;       // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x0268(0x0008)(NoDestructor)
	ECommonInputType                              K2Node_CustomEvent_bNewInputType;                  // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0272(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_273[0x1];                                      // 0x0273(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_1;                         // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct Fst_PreMissionMarker_Categories        CallFunc_GetDataTableRowFromName_OutRow_2;         // 0x0280(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_2;    // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x02B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking) == 0x000008, "Wrong alignment on W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking");
static_assert(sizeof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking) == 0x0002C8, "Wrong size on W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, EntryPoint) == 0x000000, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_Create_ReturnValue) == 0x000008, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000020, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_Event_IsDesignTime) == 0x000030, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_Event_MyGeometry) == 0x000038, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_Event_InDeltaTime) == 0x000070, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_GetOwningPlayer_ReturnValue) == 0x000078, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_CustomEvent_ID) == 0x000080, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_CustomEvent_ID' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_CustomEvent_DisplayName) == 0x000090, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_CustomEvent_DisplayName' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_CustomEvent_IconImage) == 0x0000A8, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_CustomEvent_IconImage' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_CustomEvent_HasSubCommands) == 0x0000B0, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_CustomEvent_HasSubCommands' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_Create_ReturnValue_1) == 0x0000B8, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_PlayAnimation_ReturnValue) == 0x0000C0, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, Temp_int_Loop_Counter_Variable) == 0x0000C8, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_Less_IntInt_ReturnValue) == 0x0000CC, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_Add_IntInt_ReturnValue) == 0x0000D0, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, Temp_int_Array_Index_Variable) == 0x0000D4, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_AddChildToRadialMenu_Success) == 0x0000D8, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_AddChildToRadialMenu_Success' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_IsValid_ReturnValue) == 0x0000D9, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_Conv_StringToName_ReturnValue) == 0x0000DC, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, Temp_int_Loop_Counter_Variable_1) == 0x0000E4, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000E8, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000118, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_Add_IntInt_ReturnValue_1) == 0x00011C, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_Array_Get_Item) == 0x000120, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_Conv_NameToString_ReturnValue) == 0x000128, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_Array_Length_ReturnValue_1) == 0x000138, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_Less_IntInt_ReturnValue_1) == 0x00013C, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000140, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x0001C0, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_AddChildToRadialMenu_Success_1) == 0x0001C1, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_AddChildToRadialMenu_Success_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_PlayAnimationReverse_ReturnValue) == 0x0001C8, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_GetChild_Output) == 0x0001D0, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_GetChild_Output' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_GetChild_Success) == 0x0001D8, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_GetChild_Success' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_CreatePlayAnimationProxyObject_Result) == 0x0001E0, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_CreatePlayAnimationProxyObject_Result' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_CreatePlayAnimationProxyObject_ReturnValue) == 0x0001E8, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_CreatePlayAnimationProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_IsValid_ReturnValue_1) == 0x0001F0, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_DynamicCast_AsW_Radial_Icon_Map_Marking) == 0x0001F8, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_DynamicCast_AsW_Radial_Icon_Map_Marking' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_DynamicCast_bSuccess) == 0x000200, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_PlayAnimationForward_ReturnValue) == 0x000208, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_ComponentBoundEvent_NewSelection_1) == 0x000210, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_ComponentBoundEvent_NewSelection_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_ComponentBoundEvent_OldSelection_1) == 0x000214, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_ComponentBoundEvent_OldSelection_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_GetChild_Output_1) == 0x000218, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_GetChild_Output_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_GetChild_Success_1) == 0x000220, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_GetChild_Success_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000221, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_DynamicCast_AsW_Radial_Icon_Map_Marking_1) == 0x000228, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_DynamicCast_AsW_Radial_Icon_Map_Marking_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_DynamicCast_bSuccess_1) == 0x000230, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_ComponentBoundEvent_NewSelection) == 0x000234, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_ComponentBoundEvent_NewSelection' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_ComponentBoundEvent_OldSelection) == 0x000238, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_ComponentBoundEvent_OldSelection' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_GetChild_Output_2) == 0x000240, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_GetChild_Output_2' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_GetChild_Success_2) == 0x000248, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_GetChild_Success_2' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_DynamicCast_AsW_Radial_Icon_Map_Marking_2) == 0x000250, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_DynamicCast_AsW_Radial_Icon_Map_Marking_2' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_DynamicCast_bSuccess_2) == 0x000258, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000259, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_PlayAnimationReverse_ReturnValue_1) == 0x000260, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_PlayAnimationReverse_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_Event_InFocusEvent) == 0x000268, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, K2Node_CustomEvent_bNewInputType) == 0x000270, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::K2Node_CustomEvent_bNewInputType' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000271, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_IsValid_ReturnValue_2) == 0x000272, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, Temp_int_Array_Index_Variable_1) == 0x000274, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_Array_Get_Item_1) == 0x000278, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_GetDataTableRowFromName_OutRow_2) == 0x000280, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_GetDataTableRowFromName_OutRow_2' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_GetDataTableRowFromName_ReturnValue_2) == 0x0002B0, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_GetDataTableRowFromName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking, CallFunc_Conv_NameToString_ReturnValue_1) == 0x0002B8, "Member 'W_Radial_MapMarking_C_ExecuteUbergraph_W_Radial_MapMarking::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.Give Focus To Map
// 0x0001 (0x0001 - 0x0000)
struct W_Radial_MapMarking_C_Give_Focus_To_Map final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Radial_MapMarking_C_Give_Focus_To_Map) == 0x000001, "Wrong alignment on W_Radial_MapMarking_C_Give_Focus_To_Map");
static_assert(sizeof(W_Radial_MapMarking_C_Give_Focus_To_Map) == 0x000001, "Wrong size on W_Radial_MapMarking_C_Give_Focus_To_Map");
static_assert(offsetof(W_Radial_MapMarking_C_Give_Focus_To_Map, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_Radial_MapMarking_C_Give_Focus_To_Map::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.HandleGamepad
// 0x0028 (0x0028 - 0x0000)
struct W_Radial_MapMarking_C_HandleGamepad final
{
public:
	class UUMG_RadialMenu_C*                      UMGRadial;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize2D_ReturnValue;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Radial_MapMarking_C_HandleGamepad) == 0x000008, "Wrong alignment on W_Radial_MapMarking_C_HandleGamepad");
static_assert(sizeof(W_Radial_MapMarking_C_HandleGamepad) == 0x000028, "Wrong size on W_Radial_MapMarking_C_HandleGamepad");
static_assert(offsetof(W_Radial_MapMarking_C_HandleGamepad, UMGRadial) == 0x000000, "Member 'W_Radial_MapMarking_C_HandleGamepad::UMGRadial' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_HandleGamepad, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'W_Radial_MapMarking_C_HandleGamepad::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_HandleGamepad, CallFunc_Conv_StringToName_ReturnValue) == 0x00000C, "Member 'W_Radial_MapMarking_C_HandleGamepad::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_HandleGamepad, CallFunc_VSize2D_ReturnValue) == 0x000018, "Member 'W_Radial_MapMarking_C_HandleGamepad::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_HandleGamepad, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000020, "Member 'W_Radial_MapMarking_C_HandleGamepad::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.InitGamepadSupport
// 0x0020 (0x0020 - 0x0000)
struct W_Radial_MapMarking_C_InitGamepadSupport final
{
public:
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate;            // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Radial_MapMarking_C_InitGamepadSupport) == 0x000008, "Wrong alignment on W_Radial_MapMarking_C_InitGamepadSupport");
static_assert(sizeof(W_Radial_MapMarking_C_InitGamepadSupport) == 0x000020, "Wrong size on W_Radial_MapMarking_C_InitGamepadSupport");
static_assert(offsetof(W_Radial_MapMarking_C_InitGamepadSupport, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000000, "Member 'W_Radial_MapMarking_C_InitGamepadSupport::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_InitGamepadSupport, CallFunc_GetCurrentInputType_ReturnValue) == 0x000008, "Member 'W_Radial_MapMarking_C_InitGamepadSupport::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_InitGamepadSupport, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'W_Radial_MapMarking_C_InitGamepadSupport::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_InitGamepadSupport, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001C, "Member 'W_Radial_MapMarking_C_InitGamepadSupport::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.InputChange
// 0x0001 (0x0001 - 0x0000)
struct W_Radial_MapMarking_C_InputChange final
{
public:
	ECommonInputType                              bNewInputType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Radial_MapMarking_C_InputChange) == 0x000001, "Wrong alignment on W_Radial_MapMarking_C_InputChange");
static_assert(sizeof(W_Radial_MapMarking_C_InputChange) == 0x000001, "Wrong size on W_Radial_MapMarking_C_InputChange");
static_assert(offsetof(W_Radial_MapMarking_C_InputChange, bNewInputType) == 0x000000, "Member 'W_Radial_MapMarking_C_InputChange::bNewInputType' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.OnAnalogValueChanged
// 0x0398 (0x0398 - 0x0000)
struct W_Radial_MapMarking_C_OnAnalogValueChanged final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FAnalogInputEvent                      InAnalogInputEvent;                                // 0x0038(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0080(0x00B8)(Parm, OutParm, ReturnParm)
	float                                         CallFunc_GetAnalogValue_ReturnValue;               // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnalogValue_ReturnValue_1;             // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeyEvent                              CallFunc_GetKeyEventFromAnalogInputEvent_ReturnValue; // 0x0180(0x0040)()
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x01C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x01D0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EA[0x6];                                      // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x01F0(0x00B8)()
	double                                        Temp_real_Variable;                                // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x02B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnalogValue_ReturnValue_0;             // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x02C8(0x00B8)()
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSetRef_Target_ImplicitCast;         // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector2D_X_ImplicitCast;              // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Radial_MapMarking_C_OnAnalogValueChanged) == 0x000008, "Wrong alignment on W_Radial_MapMarking_C_OnAnalogValueChanged");
static_assert(sizeof(W_Radial_MapMarking_C_OnAnalogValueChanged) == 0x000398, "Wrong size on W_Radial_MapMarking_C_OnAnalogValueChanged");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, MyGeometry) == 0x000000, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, InAnalogInputEvent) == 0x000038, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::InAnalogInputEvent' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, ReturnValue) == 0x000080, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_GetAnalogValue_ReturnValue) == 0x000138, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_GetAnalogValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000140, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000158, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_BreakVector_X) == 0x000160, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_BreakVector_Y) == 0x000168, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_BreakVector_Z) == 0x000170, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_GetAnalogValue_ReturnValue_1) == 0x000178, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_GetAnalogValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_GetKeyEventFromAnalogInputEvent_ReturnValue) == 0x000180, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_GetKeyEventFromAnalogInputEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_MakeVector2D_ReturnValue) == 0x0001C0, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_GetKey_ReturnValue) == 0x0001D0, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x0001E8, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x0001E9, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_Unhandled_ReturnValue) == 0x0001F0, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, Temp_real_Variable) == 0x0002A8, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_MakeVector2D_ReturnValue_1) == 0x0002B0, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_GetAnalogValue_ReturnValue_0) == 0x0002C0, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_GetAnalogValue_ReturnValue_0' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_Handled_ReturnValue) == 0x0002C8, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000380, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, K2Node_VariableSetRef_Target_ImplicitCast) == 0x000388, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::K2Node_VariableSetRef_Target_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnAnalogValueChanged, CallFunc_MakeVector2D_X_ImplicitCast) == 0x000390, "Member 'W_Radial_MapMarking_C_OnAnalogValueChanged::CallFunc_MakeVector2D_X_ImplicitCast' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.OnFocusLost
// 0x0008 (0x0008 - 0x0000)
struct W_Radial_MapMarking_C_OnFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(W_Radial_MapMarking_C_OnFocusLost) == 0x000004, "Wrong alignment on W_Radial_MapMarking_C_OnFocusLost");
static_assert(sizeof(W_Radial_MapMarking_C_OnFocusLost) == 0x000008, "Wrong size on W_Radial_MapMarking_C_OnFocusLost");
static_assert(offsetof(W_Radial_MapMarking_C_OnFocusLost, InFocusEvent) == 0x000000, "Member 'W_Radial_MapMarking_C_OnFocusLost::InFocusEvent' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.OnKeyDown
// 0x02C8 (0x02C8 - 0x0000)
struct W_Radial_MapMarking_C_OnKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x0130(0x0018)(HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0148(0x00B8)()
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0208(0x00B8)()
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Radial_MapMarking_C_OnKeyDown) == 0x000008, "Wrong alignment on W_Radial_MapMarking_C_OnKeyDown");
static_assert(sizeof(W_Radial_MapMarking_C_OnKeyDown) == 0x0002C8, "Wrong size on W_Radial_MapMarking_C_OnKeyDown");
static_assert(offsetof(W_Radial_MapMarking_C_OnKeyDown, MyGeometry) == 0x000000, "Member 'W_Radial_MapMarking_C_OnKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnKeyDown, InKeyEvent) == 0x000038, "Member 'W_Radial_MapMarking_C_OnKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnKeyDown, ReturnValue) == 0x000078, "Member 'W_Radial_MapMarking_C_OnKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnKeyDown, CallFunc_GetKey_ReturnValue) == 0x000130, "Member 'W_Radial_MapMarking_C_OnKeyDown::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnKeyDown, CallFunc_Unhandled_ReturnValue) == 0x000148, "Member 'W_Radial_MapMarking_C_OnKeyDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnKeyDown, CallFunc_Array_Contains_ReturnValue) == 0x000200, "Member 'W_Radial_MapMarking_C_OnKeyDown::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnKeyDown, CallFunc_Handled_ReturnValue) == 0x000208, "Member 'W_Radial_MapMarking_C_OnKeyDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnKeyDown, CallFunc_Array_Contains_ReturnValue_1) == 0x0002C0, "Member 'W_Radial_MapMarking_C_OnKeyDown::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.OnMouseButtonDown
// 0x02E0 (0x02E0 - 0x0000)
struct W_Radial_MapMarking_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue; // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue_1; // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0170(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0228(0x00B8)()
};
static_assert(alignof(W_Radial_MapMarking_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on W_Radial_MapMarking_C_OnMouseButtonDown");
static_assert(sizeof(W_Radial_MapMarking_C_OnMouseButtonDown) == 0x0002E0, "Wrong size on W_Radial_MapMarking_C_OnMouseButtonDown");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'W_Radial_MapMarking_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'W_Radial_MapMarking_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonDown, ReturnValue) == 0x0000B0, "Member 'W_Radial_MapMarking_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonDown, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue) == 0x000168, "Member 'W_Radial_MapMarking_C_OnMouseButtonDown::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonDown, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue_1) == 0x000169, "Member 'W_Radial_MapMarking_C_OnMouseButtonDown::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonDown, CallFunc_Unhandled_ReturnValue) == 0x000170, "Member 'W_Radial_MapMarking_C_OnMouseButtonDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000228, "Member 'W_Radial_MapMarking_C_OnMouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.OnMouseButtonUp
// 0x03B8 (0x03B8 - 0x0000)
struct W_Radial_MapMarking_C_OnMouseButtonUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0168(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_182[0x2];                                      // 0x0182(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0184(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0190(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0248(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x0300(0x00B8)()
};
static_assert(alignof(W_Radial_MapMarking_C_OnMouseButtonUp) == 0x000008, "Wrong alignment on W_Radial_MapMarking_C_OnMouseButtonUp");
static_assert(sizeof(W_Radial_MapMarking_C_OnMouseButtonUp) == 0x0003B8, "Wrong size on W_Radial_MapMarking_C_OnMouseButtonUp");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'W_Radial_MapMarking_C_OnMouseButtonUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonUp, MouseEvent) == 0x000038, "Member 'W_Radial_MapMarking_C_OnMouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonUp, ReturnValue) == 0x0000B0, "Member 'W_Radial_MapMarking_C_OnMouseButtonUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonUp, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000168, "Member 'W_Radial_MapMarking_C_OnMouseButtonUp::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonUp, CallFunc_IsValid_ReturnValue) == 0x000180, "Member 'W_Radial_MapMarking_C_OnMouseButtonUp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonUp, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000181, "Member 'W_Radial_MapMarking_C_OnMouseButtonUp::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonUp, CallFunc_Conv_StringToName_ReturnValue) == 0x000184, "Member 'W_Radial_MapMarking_C_OnMouseButtonUp::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonUp, CallFunc_Unhandled_ReturnValue) == 0x000190, "Member 'W_Radial_MapMarking_C_OnMouseButtonUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue) == 0x000248, "Member 'W_Radial_MapMarking_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue_1) == 0x000300, "Member 'W_Radial_MapMarking_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue_1' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_Radial_MapMarking_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Radial_MapMarking_C_PreConstruct) == 0x000001, "Wrong alignment on W_Radial_MapMarking_C_PreConstruct");
static_assert(sizeof(W_Radial_MapMarking_C_PreConstruct) == 0x000001, "Wrong size on W_Radial_MapMarking_C_PreConstruct");
static_assert(offsetof(W_Radial_MapMarking_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_Radial_MapMarking_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.SetGamepadInputDirection
// 0x0018 (0x0018 - 0x0000)
struct W_Radial_MapMarking_C_SetGamepadInputDirection final
{
public:
	class UUMG_RadialMenu_C*                      UMGRadial;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize2D_ReturnValue;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Radial_MapMarking_C_SetGamepadInputDirection) == 0x000008, "Wrong alignment on W_Radial_MapMarking_C_SetGamepadInputDirection");
static_assert(sizeof(W_Radial_MapMarking_C_SetGamepadInputDirection) == 0x000018, "Wrong size on W_Radial_MapMarking_C_SetGamepadInputDirection");
static_assert(offsetof(W_Radial_MapMarking_C_SetGamepadInputDirection, UMGRadial) == 0x000000, "Member 'W_Radial_MapMarking_C_SetGamepadInputDirection::UMGRadial' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_SetGamepadInputDirection, CallFunc_VSize2D_ReturnValue) == 0x000008, "Member 'W_Radial_MapMarking_C_SetGamepadInputDirection::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_SetGamepadInputDirection, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000010, "Member 'W_Radial_MapMarking_C_SetGamepadInputDirection::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_Radial_MapMarking_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Radial_MapMarking_C_Tick) == 0x000004, "Wrong alignment on W_Radial_MapMarking_C_Tick");
static_assert(sizeof(W_Radial_MapMarking_C_Tick) == 0x00003C, "Wrong size on W_Radial_MapMarking_C_Tick");
static_assert(offsetof(W_Radial_MapMarking_C_Tick, MyGeometry) == 0x000000, "Member 'W_Radial_MapMarking_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_Tick, InDeltaTime) == 0x000038, "Member 'W_Radial_MapMarking_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_Radial_MapMarking.W_Radial_MapMarking_C.Update Position
// 0x0048 (0x0048 - 0x0000)
struct W_Radial_MapMarking_C_Update_Position final
{
public:
	struct FVector2D                              Coordinates;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RawCoordinates;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0020(0x0020)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Radial_MapMarking_C_Update_Position) == 0x000008, "Wrong alignment on W_Radial_MapMarking_C_Update_Position");
static_assert(sizeof(W_Radial_MapMarking_C_Update_Position) == 0x000048, "Wrong size on W_Radial_MapMarking_C_Update_Position");
static_assert(offsetof(W_Radial_MapMarking_C_Update_Position, Coordinates) == 0x000000, "Member 'W_Radial_MapMarking_C_Update_Position::Coordinates' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_Update_Position, RawCoordinates) == 0x000010, "Member 'W_Radial_MapMarking_C_Update_Position::RawCoordinates' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_Update_Position, K2Node_MakeStruct_Anchors) == 0x000020, "Member 'W_Radial_MapMarking_C_Update_Position::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(W_Radial_MapMarking_C_Update_Position, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000040, "Member 'W_Radial_MapMarking_C_Update_Position::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");

}

