#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicCoverSystem

#include "Basic.hpp"

#include "DynamicCoverSystem_structs.hpp"
#include "Engine_classes.hpp"
#include "PhysicsCore_structs.hpp"
#include "NavigationSystem_classes.hpp"


namespace SDK
{

// Class DynamicCoverSystem.CoverGenOverrideVolume
// 0x0050 (0x0320 - 0x02D0)
class ACoverGenOverrideVolume final : public AVolume
{
public:
	struct FCoverGenSettings                      CoverGenSettings;                                  // 0x02D0(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumCoverPoints;                                    // 0x0300(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoverGenTime;                                      // 0x0304(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_308[0x18];                                     // 0x0308(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GenerateCoverPoints();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoverGenOverrideVolume">();
	}
	static class ACoverGenOverrideVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACoverGenOverrideVolume>();
	}
};
static_assert(alignof(ACoverGenOverrideVolume) == 0x000008, "Wrong alignment on ACoverGenOverrideVolume");
static_assert(sizeof(ACoverGenOverrideVolume) == 0x000320, "Wrong size on ACoverGenOverrideVolume");
static_assert(offsetof(ACoverGenOverrideVolume, CoverGenSettings) == 0x0002D0, "Member 'ACoverGenOverrideVolume::CoverGenSettings' has a wrong offset!");
static_assert(offsetof(ACoverGenOverrideVolume, NumCoverPoints) == 0x000300, "Member 'ACoverGenOverrideVolume::NumCoverPoints' has a wrong offset!");
static_assert(offsetof(ACoverGenOverrideVolume, CoverGenTime) == 0x000304, "Member 'ACoverGenOverrideVolume::CoverGenTime' has a wrong offset!");

// Class DynamicCoverSystem.CoverPoint
// 0x00D0 (0x0368 - 0x0298)
class ACoverPoint final : public AActor
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  CoverActor;                                        // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCoverRail                             CoverRail;                                         // 0x02A8(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FCoverDirection                        StandCoverDirection;                               // 0x0300(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCoverDirection                        CrouchCoverDirection;                              // 0x0330(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0360(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsCrouchOnlyCover : 1;                            // 0x0364(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideCoverType : 1;                            // 0x0364(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	EStandCoverType                               StandCoverType;                                    // 0x0365(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECrouchCoverType                              CrouchCoverType;                                   // 0x0366(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_367[0x1];                                      // 0x0367(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PreviewCoverAnim();
	void ResetCoverTypes();
	void SetCrouchCoverType(const ECrouchCoverType& NewCoverType);
	void SetStandCoverType(const EStandCoverType& NewCoverType);
	void StopPreviewCoverAnim();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoverPoint">();
	}
	static class ACoverPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACoverPoint>();
	}
};
static_assert(alignof(ACoverPoint) == 0x000008, "Wrong alignment on ACoverPoint");
static_assert(sizeof(ACoverPoint) == 0x000368, "Wrong size on ACoverPoint");
static_assert(offsetof(ACoverPoint, SceneComponent) == 0x000298, "Member 'ACoverPoint::SceneComponent' has a wrong offset!");
static_assert(offsetof(ACoverPoint, CoverActor) == 0x0002A0, "Member 'ACoverPoint::CoverActor' has a wrong offset!");
static_assert(offsetof(ACoverPoint, CoverRail) == 0x0002A8, "Member 'ACoverPoint::CoverRail' has a wrong offset!");
static_assert(offsetof(ACoverPoint, StandCoverDirection) == 0x000300, "Member 'ACoverPoint::StandCoverDirection' has a wrong offset!");
static_assert(offsetof(ACoverPoint, CrouchCoverDirection) == 0x000330, "Member 'ACoverPoint::CrouchCoverDirection' has a wrong offset!");
static_assert(offsetof(ACoverPoint, Index_0) == 0x000360, "Member 'ACoverPoint::Index_0' has a wrong offset!");
static_assert(offsetof(ACoverPoint, StandCoverType) == 0x000365, "Member 'ACoverPoint::StandCoverType' has a wrong offset!");
static_assert(offsetof(ACoverPoint, CrouchCoverType) == 0x000366, "Member 'ACoverPoint::CrouchCoverType' has a wrong offset!");

// Class DynamicCoverSystem.CoverSystem
// 0x0088 (0x00C8 - 0x0040)
class UCoverSystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_40[0x88];                                      // 0x0040(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool OccupyCover(const struct FVector& InCoverPoint);
	bool ReleaseCover(const struct FVector& InCoverPoint);

	bool IsCoverPointOccupied(const struct FVector& InCoverLocation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoverSystem">();
	}
	static class UCoverSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoverSystem>();
	}
};
static_assert(alignof(UCoverSystem) == 0x000008, "Wrong alignment on UCoverSystem");
static_assert(sizeof(UCoverSystem) == 0x0000C8, "Wrong size on UCoverSystem");

// Class DynamicCoverSystem.NotifyingRecastNavMesh
// 0x00D8 (0x06A0 - 0x05C8)
class ANotifyingRecastNavMesh : public ARecastNavMesh
{
public:
	int32                                         NumCoverPoints;                                    // 0x05C8(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoverGenTimeMs;                                    // 0x05CC(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCoverGenSettings                      CoverGenSettings;                                  // 0x05D0(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinDistanceBetweenCoverPoints;                     // 0x0600(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPhysicalSurface>                      IgnoredPhysicalSurfacesForGeoTest;                 // 0x0608(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EPhysicalSurface>                      IgnoredPhysicalSurfacesForEdgeTests;               // 0x0618(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_628[0x78];                                     // 0x0628(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeleteAllCoverPoints();
	void GenerateCoverPoints();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NotifyingRecastNavMesh">();
	}
	static class ANotifyingRecastNavMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANotifyingRecastNavMesh>();
	}
};
static_assert(alignof(ANotifyingRecastNavMesh) == 0x000008, "Wrong alignment on ANotifyingRecastNavMesh");
static_assert(sizeof(ANotifyingRecastNavMesh) == 0x0006A0, "Wrong size on ANotifyingRecastNavMesh");
static_assert(offsetof(ANotifyingRecastNavMesh, NumCoverPoints) == 0x0005C8, "Member 'ANotifyingRecastNavMesh::NumCoverPoints' has a wrong offset!");
static_assert(offsetof(ANotifyingRecastNavMesh, CoverGenTimeMs) == 0x0005CC, "Member 'ANotifyingRecastNavMesh::CoverGenTimeMs' has a wrong offset!");
static_assert(offsetof(ANotifyingRecastNavMesh, CoverGenSettings) == 0x0005D0, "Member 'ANotifyingRecastNavMesh::CoverGenSettings' has a wrong offset!");
static_assert(offsetof(ANotifyingRecastNavMesh, MinDistanceBetweenCoverPoints) == 0x000600, "Member 'ANotifyingRecastNavMesh::MinDistanceBetweenCoverPoints' has a wrong offset!");
static_assert(offsetof(ANotifyingRecastNavMesh, IgnoredPhysicalSurfacesForGeoTest) == 0x000608, "Member 'ANotifyingRecastNavMesh::IgnoredPhysicalSurfacesForGeoTest' has a wrong offset!");
static_assert(offsetof(ANotifyingRecastNavMesh, IgnoredPhysicalSurfacesForEdgeTests) == 0x000618, "Member 'ANotifyingRecastNavMesh::IgnoredPhysicalSurfacesForEdgeTests' has a wrong offset!");

}

