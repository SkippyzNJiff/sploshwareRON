#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_VotePopUp_gamepad

#include "Basic.hpp"

#include "ReadyOrNot_structs.hpp"
#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CommonInput_structs.hpp"


namespace SDK::Params
{

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.ExecuteUbergraph_W_VotePopUp_gamepad
// 0x00F0 (0x00F0 - 0x0000)
struct W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_CustomEvent_VoteReason;                     // 0x0020(0x0018)()
	class FText                                   K2Node_CustomEvent_VoteQuestion;                   // 0x0038(0x0018)()
	bool                                          K2Node_CustomEvent_bCanVoteNo;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BaseController_C*                   K2Node_DynamicCast_AsBP_Base_Controller;           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              K2Node_CustomEvent_bNewInputType;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate;            // 0x0064(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0074(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bReady;                         // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_VoteReason_ReturnValue;                   // 0x00C0(0x0018)()
	class FText                                   CallFunc_GetVoteQuestion_ReturnValue;              // 0x00D8(0x0018)()
};
static_assert(alignof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad) == 0x000008, "Wrong alignment on W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad");
static_assert(sizeof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad) == 0x0000F0, "Wrong size on W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, EntryPoint) == 0x000000, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000008, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, CallFunc_GetCurrentInputType_ReturnValue) == 0x000010, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, CallFunc_GetOwningPlayer_ReturnValue) == 0x000018, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, K2Node_CustomEvent_VoteReason) == 0x000020, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::K2Node_CustomEvent_VoteReason' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, K2Node_CustomEvent_VoteQuestion) == 0x000038, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::K2Node_CustomEvent_VoteQuestion' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, K2Node_CustomEvent_bCanVoteNo) == 0x000050, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::K2Node_CustomEvent_bCanVoteNo' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, K2Node_DynamicCast_AsBP_Base_Controller) == 0x000058, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::K2Node_DynamicCast_AsBP_Base_Controller' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, K2Node_CustomEvent_bNewInputType) == 0x000061, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::K2Node_CustomEvent_bNewInputType' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000062, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, K2Node_CreateDelegate_OutputDelegate) == 0x000064, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, K2Node_Event_MyGeometry) == 0x000074, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, K2Node_Event_InDeltaTime) == 0x0000AC, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, K2Node_CustomEvent_bReady) == 0x0000B0, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::K2Node_CustomEvent_bReady' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, CallFunc_PlayAnimation_ReturnValue) == 0x0000B8, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, CallFunc_VoteReason_ReturnValue) == 0x0000C0, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::CallFunc_VoteReason_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad, CallFunc_GetVoteQuestion_ReturnValue) == 0x0000D8, "Member 'W_VotePopUp_gamepad_C_ExecuteUbergraph_W_VotePopUp_gamepad::CallFunc_GetVoteQuestion_ReturnValue' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.GetAvailableVotes
// 0x0060 (0x0060 - 0x0000)
struct W_VotePopUp_gamepad_C_GetAvailableVotes final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACoopGS*                                K2Node_DynamicCast_AsCoop_GS;                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AReadyOrNotPlayerState*>         CallFunc_GetPlayersAvailableForVote_ReturnValue;   // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0048(0x0018)()
};
static_assert(alignof(W_VotePopUp_gamepad_C_GetAvailableVotes) == 0x000008, "Wrong alignment on W_VotePopUp_gamepad_C_GetAvailableVotes");
static_assert(sizeof(W_VotePopUp_gamepad_C_GetAvailableVotes) == 0x000060, "Wrong size on W_VotePopUp_gamepad_C_GetAvailableVotes");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetAvailableVotes, ReturnValue) == 0x000000, "Member 'W_VotePopUp_gamepad_C_GetAvailableVotes::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetAvailableVotes, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'W_VotePopUp_gamepad_C_GetAvailableVotes::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetAvailableVotes, K2Node_DynamicCast_AsCoop_GS) == 0x000020, "Member 'W_VotePopUp_gamepad_C_GetAvailableVotes::K2Node_DynamicCast_AsCoop_GS' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetAvailableVotes, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'W_VotePopUp_gamepad_C_GetAvailableVotes::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetAvailableVotes, CallFunc_GetPlayersAvailableForVote_ReturnValue) == 0x000030, "Member 'W_VotePopUp_gamepad_C_GetAvailableVotes::CallFunc_GetPlayersAvailableForVote_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetAvailableVotes, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'W_VotePopUp_gamepad_C_GetAvailableVotes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetAvailableVotes, CallFunc_Conv_IntToText_ReturnValue) == 0x000048, "Member 'W_VotePopUp_gamepad_C_GetAvailableVotes::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.GetbIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct W_VotePopUp_gamepad_C_GetbIsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VotePopUp_gamepad_C_GetbIsEnabled) == 0x000001, "Wrong alignment on W_VotePopUp_gamepad_C_GetbIsEnabled");
static_assert(sizeof(W_VotePopUp_gamepad_C_GetbIsEnabled) == 0x000001, "Wrong size on W_VotePopUp_gamepad_C_GetbIsEnabled");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetbIsEnabled, ReturnValue) == 0x000000, "Member 'W_VotePopUp_gamepad_C_GetbIsEnabled::ReturnValue' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.GetText
// 0x0038 (0x0038 - 0x0000)
struct W_VotePopUp_gamepad_C_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_BaseController_C*                   K2Node_DynamicCast_AsBP_Base_Controller;           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VotePopUp_gamepad_C_GetText) == 0x000008, "Wrong alignment on W_VotePopUp_gamepad_C_GetText");
static_assert(sizeof(W_VotePopUp_gamepad_C_GetText) == 0x000038, "Wrong size on W_VotePopUp_gamepad_C_GetText");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetText, ReturnValue) == 0x000000, "Member 'W_VotePopUp_gamepad_C_GetText::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetText, CallFunc_GetOwningPlayer_ReturnValue) == 0x000018, "Member 'W_VotePopUp_gamepad_C_GetText::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetText, K2Node_DynamicCast_AsBP_Base_Controller) == 0x000020, "Member 'W_VotePopUp_gamepad_C_GetText::K2Node_DynamicCast_AsBP_Base_Controller' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetText, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'W_VotePopUp_gamepad_C_GetText::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetText, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00002C, "Member 'W_VotePopUp_gamepad_C_GetText::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetText, K2Node_SwitchInteger_CmpSuccess) == 0x000030, "Member 'W_VotePopUp_gamepad_C_GetText::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.GetText_4
// 0x0048 (0x0048 - 0x0000)
struct W_VotePopUp_gamepad_C_GetText_4 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACoopGS*                                K2Node_DynamicCast_AsCoop_GS;                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0030(0x0018)()
};
static_assert(alignof(W_VotePopUp_gamepad_C_GetText_4) == 0x000008, "Wrong alignment on W_VotePopUp_gamepad_C_GetText_4");
static_assert(sizeof(W_VotePopUp_gamepad_C_GetText_4) == 0x000048, "Wrong size on W_VotePopUp_gamepad_C_GetText_4");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetText_4, ReturnValue) == 0x000000, "Member 'W_VotePopUp_gamepad_C_GetText_4::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetText_4, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'W_VotePopUp_gamepad_C_GetText_4::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetText_4, K2Node_DynamicCast_AsCoop_GS) == 0x000020, "Member 'W_VotePopUp_gamepad_C_GetText_4::K2Node_DynamicCast_AsCoop_GS' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetText_4, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'W_VotePopUp_gamepad_C_GetText_4::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetText_4, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'W_VotePopUp_gamepad_C_GetText_4::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetText_4, CallFunc_Conv_IntToText_ReturnValue) == 0x000030, "Member 'W_VotePopUp_gamepad_C_GetText_4::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.GetVotesRequired
// 0x0068 (0x0068 - 0x0000)
struct W_VotePopUp_gamepad_C_GetVotesRequired final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACoopGS*                                K2Node_DynamicCast_AsCoop_GS;                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AReadyOrNotPlayerState*>         CallFunc_GetPlayersAvailableForVote_ReturnValue;   // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0050(0x0018)()
};
static_assert(alignof(W_VotePopUp_gamepad_C_GetVotesRequired) == 0x000008, "Wrong alignment on W_VotePopUp_gamepad_C_GetVotesRequired");
static_assert(sizeof(W_VotePopUp_gamepad_C_GetVotesRequired) == 0x000068, "Wrong size on W_VotePopUp_gamepad_C_GetVotesRequired");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVotesRequired, ReturnValue) == 0x000000, "Member 'W_VotePopUp_gamepad_C_GetVotesRequired::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVotesRequired, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'W_VotePopUp_gamepad_C_GetVotesRequired::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVotesRequired, K2Node_DynamicCast_AsCoop_GS) == 0x000020, "Member 'W_VotePopUp_gamepad_C_GetVotesRequired::K2Node_DynamicCast_AsCoop_GS' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVotesRequired, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'W_VotePopUp_gamepad_C_GetVotesRequired::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVotesRequired, CallFunc_GetPlayersAvailableForVote_ReturnValue) == 0x000030, "Member 'W_VotePopUp_gamepad_C_GetVotesRequired::CallFunc_GetPlayersAvailableForVote_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVotesRequired, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'W_VotePopUp_gamepad_C_GetVotesRequired::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVotesRequired, CallFunc_Divide_IntInt_ReturnValue) == 0x000044, "Member 'W_VotePopUp_gamepad_C_GetVotesRequired::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVotesRequired, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'W_VotePopUp_gamepad_C_GetVotesRequired::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVotesRequired, CallFunc_Conv_IntToText_ReturnValue) == 0x000050, "Member 'W_VotePopUp_gamepad_C_GetVotesRequired::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.GetVoteState
// 0x0020 (0x0020 - 0x0000)
struct W_VotePopUp_gamepad_C_GetVoteState final
{
public:
	bool                                          VotedYes;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_BaseController_C*                   K2Node_DynamicCast_AsBP_Base_Controller;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VotePopUp_gamepad_C_GetVoteState) == 0x000008, "Wrong alignment on W_VotePopUp_gamepad_C_GetVoteState");
static_assert(sizeof(W_VotePopUp_gamepad_C_GetVoteState) == 0x000020, "Wrong size on W_VotePopUp_gamepad_C_GetVoteState");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVoteState, VotedYes) == 0x000000, "Member 'W_VotePopUp_gamepad_C_GetVoteState::VotedYes' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVoteState, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'W_VotePopUp_gamepad_C_GetVoteState::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVoteState, K2Node_DynamicCast_AsBP_Base_Controller) == 0x000010, "Member 'W_VotePopUp_gamepad_C_GetVoteState::K2Node_DynamicCast_AsBP_Base_Controller' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVoteState, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'W_VotePopUp_gamepad_C_GetVoteState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVoteState, K2Node_SwitchEnum_CmpSuccess) == 0x000019, "Member 'W_VotePopUp_gamepad_C_GetVoteState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.OnInputChange
// 0x0001 (0x0001 - 0x0000)
struct W_VotePopUp_gamepad_C_OnInputChange final
{
public:
	ECommonInputType                              bNewInputType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VotePopUp_gamepad_C_OnInputChange) == 0x000001, "Wrong alignment on W_VotePopUp_gamepad_C_OnInputChange");
static_assert(sizeof(W_VotePopUp_gamepad_C_OnInputChange) == 0x000001, "Wrong size on W_VotePopUp_gamepad_C_OnInputChange");
static_assert(offsetof(W_VotePopUp_gamepad_C_OnInputChange, bNewInputType) == 0x000000, "Member 'W_VotePopUp_gamepad_C_OnInputChange::bNewInputType' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.OnLocalPlayerReadyChange
// 0x0001 (0x0001 - 0x0000)
struct W_VotePopUp_gamepad_C_OnLocalPlayerReadyChange final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VotePopUp_gamepad_C_OnLocalPlayerReadyChange) == 0x000001, "Wrong alignment on W_VotePopUp_gamepad_C_OnLocalPlayerReadyChange");
static_assert(sizeof(W_VotePopUp_gamepad_C_OnLocalPlayerReadyChange) == 0x000001, "Wrong size on W_VotePopUp_gamepad_C_OnLocalPlayerReadyChange");
static_assert(offsetof(W_VotePopUp_gamepad_C_OnLocalPlayerReadyChange, bReady) == 0x000000, "Member 'W_VotePopUp_gamepad_C_OnLocalPlayerReadyChange::bReady' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.SetVoteResult
// 0x0038 (0x0038 - 0x0000)
struct W_VotePopUp_gamepad_C_SetVoteResult final
{
public:
	struct FVoteData                              VoteResult_0;                                      // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         YesVotes_0;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NoVotes_0;                                         // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VotePopUp_gamepad_C_SetVoteResult) == 0x000008, "Wrong alignment on W_VotePopUp_gamepad_C_SetVoteResult");
static_assert(sizeof(W_VotePopUp_gamepad_C_SetVoteResult) == 0x000038, "Wrong size on W_VotePopUp_gamepad_C_SetVoteResult");
static_assert(offsetof(W_VotePopUp_gamepad_C_SetVoteResult, VoteResult_0) == 0x000000, "Member 'W_VotePopUp_gamepad_C_SetVoteResult::VoteResult_0' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_SetVoteResult, YesVotes_0) == 0x000030, "Member 'W_VotePopUp_gamepad_C_SetVoteResult::YesVotes_0' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_SetVoteResult, NoVotes_0) == 0x000034, "Member 'W_VotePopUp_gamepad_C_SetVoteResult::NoVotes_0' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.ShowWidget
// 0x0028 (0x0028 - 0x0000)
struct W_VotePopUp_gamepad_C_ShowWidget final
{
public:
	bool                                          Show_Widget;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VotePopUp_gamepad_C_ShowWidget) == 0x000008, "Wrong alignment on W_VotePopUp_gamepad_C_ShowWidget");
static_assert(sizeof(W_VotePopUp_gamepad_C_ShowWidget) == 0x000028, "Wrong size on W_VotePopUp_gamepad_C_ShowWidget");
static_assert(offsetof(W_VotePopUp_gamepad_C_ShowWidget, Show_Widget) == 0x000000, "Member 'W_VotePopUp_gamepad_C_ShowWidget::Show_Widget' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ShowWidget, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'W_VotePopUp_gamepad_C_ShowWidget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ShowWidget, CallFunc_PlayAnimationForward_ReturnValue) == 0x000018, "Member 'W_VotePopUp_gamepad_C_ShowWidget::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_ShowWidget, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000020, "Member 'W_VotePopUp_gamepad_C_ShowWidget::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.StartVote
// 0x0038 (0x0038 - 0x0000)
struct W_VotePopUp_gamepad_C_StartVote final
{
public:
	class FText                                   VoteReason_0;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   VoteQuestion;                                      // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          bCanVoteNo;                                        // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VotePopUp_gamepad_C_StartVote) == 0x000008, "Wrong alignment on W_VotePopUp_gamepad_C_StartVote");
static_assert(sizeof(W_VotePopUp_gamepad_C_StartVote) == 0x000038, "Wrong size on W_VotePopUp_gamepad_C_StartVote");
static_assert(offsetof(W_VotePopUp_gamepad_C_StartVote, VoteReason_0) == 0x000000, "Member 'W_VotePopUp_gamepad_C_StartVote::VoteReason_0' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_StartVote, VoteQuestion) == 0x000018, "Member 'W_VotePopUp_gamepad_C_StartVote::VoteQuestion' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_StartVote, bCanVoteNo) == 0x000030, "Member 'W_VotePopUp_gamepad_C_StartVote::bCanVoteNo' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_VotePopUp_gamepad_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VotePopUp_gamepad_C_Tick) == 0x000004, "Wrong alignment on W_VotePopUp_gamepad_C_Tick");
static_assert(sizeof(W_VotePopUp_gamepad_C_Tick) == 0x00003C, "Wrong size on W_VotePopUp_gamepad_C_Tick");
static_assert(offsetof(W_VotePopUp_gamepad_C_Tick, MyGeometry) == 0x000000, "Member 'W_VotePopUp_gamepad_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_Tick, InDeltaTime) == 0x000038, "Member 'W_VotePopUp_gamepad_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.UpdateText
// 0x00C8 (0x00C8 - 0x0000)
struct W_VotePopUp_gamepad_C_UpdateText final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable;                              // 0x0008(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_GetVoteState_VotedYes;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0028(0x0018)()
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_1;            // 0x0040(0x0018)()
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x0060(0x0018)()
	struct FKey                                   CallFunc_GetKeyFromInputActionName_ReturnValue;    // 0x0078(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_Key_IsValid_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_Select_Default_1;                           // 0x0098(0x0018)(HasGetValueTypeHash)
	class FText                                   CallFunc_FormatPlayerActionText_ReturnValue;       // 0x00B0(0x0018)()
};
static_assert(alignof(W_VotePopUp_gamepad_C_UpdateText) == 0x000008, "Wrong alignment on W_VotePopUp_gamepad_C_UpdateText");
static_assert(sizeof(W_VotePopUp_gamepad_C_UpdateText) == 0x0000C8, "Wrong size on W_VotePopUp_gamepad_C_UpdateText");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateText, Temp_bool_Variable) == 0x000000, "Member 'W_VotePopUp_gamepad_C_UpdateText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateText, Temp_bool_Variable_1) == 0x000001, "Member 'W_VotePopUp_gamepad_C_UpdateText::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateText, Temp_struct_Variable) == 0x000008, "Member 'W_VotePopUp_gamepad_C_UpdateText::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateText, CallFunc_GetVoteState_VotedYes) == 0x000020, "Member 'W_VotePopUp_gamepad_C_UpdateText::CallFunc_GetVoteState_VotedYes' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateText, CallFunc_MakeLiteralText_ReturnValue) == 0x000028, "Member 'W_VotePopUp_gamepad_C_UpdateText::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateText, CallFunc_MakeLiteralText_ReturnValue_1) == 0x000040, "Member 'W_VotePopUp_gamepad_C_UpdateText::CallFunc_MakeLiteralText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateText, CallFunc_Conv_StringToName_ReturnValue) == 0x000058, "Member 'W_VotePopUp_gamepad_C_UpdateText::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateText, K2Node_Select_Default) == 0x000060, "Member 'W_VotePopUp_gamepad_C_UpdateText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateText, CallFunc_GetKeyFromInputActionName_ReturnValue) == 0x000078, "Member 'W_VotePopUp_gamepad_C_UpdateText::CallFunc_GetKeyFromInputActionName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateText, CallFunc_Key_IsValid_ReturnValue) == 0x000090, "Member 'W_VotePopUp_gamepad_C_UpdateText::CallFunc_Key_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateText, K2Node_Select_Default_1) == 0x000098, "Member 'W_VotePopUp_gamepad_C_UpdateText::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateText, CallFunc_FormatPlayerActionText_ReturnValue) == 0x0000B0, "Member 'W_VotePopUp_gamepad_C_UpdateText::CallFunc_FormatPlayerActionText_ReturnValue' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.UpdateVote
// 0x0110 (0x0110 - 0x0000)
struct W_VotePopUp_gamepad_C_UpdateVote final
{
public:
	class FText                                   CallFunc_GetVotesRequired_ReturnValue;             // 0x0000(0x0018)()
	class FText                                   CallFunc_GetYesVotes_ReturnValue;                  // 0x0018(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0080(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x00E0(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00F8(0x0018)()
};
static_assert(alignof(W_VotePopUp_gamepad_C_UpdateVote) == 0x000008, "Wrong alignment on W_VotePopUp_gamepad_C_UpdateVote");
static_assert(sizeof(W_VotePopUp_gamepad_C_UpdateVote) == 0x000110, "Wrong size on W_VotePopUp_gamepad_C_UpdateVote");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateVote, CallFunc_GetVotesRequired_ReturnValue) == 0x000000, "Member 'W_VotePopUp_gamepad_C_UpdateVote::CallFunc_GetVotesRequired_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateVote, CallFunc_GetYesVotes_ReturnValue) == 0x000018, "Member 'W_VotePopUp_gamepad_C_UpdateVote::CallFunc_GetYesVotes_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateVote, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'W_VotePopUp_gamepad_C_UpdateVote::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateVote, K2Node_MakeStruct_FormatArgumentData_1) == 0x000080, "Member 'W_VotePopUp_gamepad_C_UpdateVote::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateVote, K2Node_MakeArray_Array) == 0x0000D0, "Member 'W_VotePopUp_gamepad_C_UpdateVote::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateVote, CallFunc_MakeLiteralText_ReturnValue) == 0x0000E0, "Member 'W_VotePopUp_gamepad_C_UpdateVote::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_UpdateVote, CallFunc_Format_ReturnValue) == 0x0000F8, "Member 'W_VotePopUp_gamepad_C_UpdateVote::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.VoteReason
// 0x0018 (0x0018 - 0x0000)
struct W_VotePopUp_gamepad_C_VoteReason final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(W_VotePopUp_gamepad_C_VoteReason) == 0x000008, "Wrong alignment on W_VotePopUp_gamepad_C_VoteReason");
static_assert(sizeof(W_VotePopUp_gamepad_C_VoteReason) == 0x000018, "Wrong size on W_VotePopUp_gamepad_C_VoteReason");
static_assert(offsetof(W_VotePopUp_gamepad_C_VoteReason, ReturnValue) == 0x000000, "Member 'W_VotePopUp_gamepad_C_VoteReason::ReturnValue' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.GetVoteQuestion
// 0x0018 (0x0018 - 0x0000)
struct W_VotePopUp_gamepad_C_GetVoteQuestion final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(W_VotePopUp_gamepad_C_GetVoteQuestion) == 0x000008, "Wrong alignment on W_VotePopUp_gamepad_C_GetVoteQuestion");
static_assert(sizeof(W_VotePopUp_gamepad_C_GetVoteQuestion) == 0x000018, "Wrong size on W_VotePopUp_gamepad_C_GetVoteQuestion");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetVoteQuestion, ReturnValue) == 0x000000, "Member 'W_VotePopUp_gamepad_C_GetVoteQuestion::ReturnValue' has a wrong offset!");

// Function W_VotePopUp_gamepad.W_VotePopUp_gamepad_C.GetYesVotes
// 0x0048 (0x0048 - 0x0000)
struct W_VotePopUp_gamepad_C_GetYesVotes final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACoopGS*                                K2Node_DynamicCast_AsCoop_GS;                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetYesVotes_ReturnValue;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0030(0x0018)()
};
static_assert(alignof(W_VotePopUp_gamepad_C_GetYesVotes) == 0x000008, "Wrong alignment on W_VotePopUp_gamepad_C_GetYesVotes");
static_assert(sizeof(W_VotePopUp_gamepad_C_GetYesVotes) == 0x000048, "Wrong size on W_VotePopUp_gamepad_C_GetYesVotes");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetYesVotes, ReturnValue) == 0x000000, "Member 'W_VotePopUp_gamepad_C_GetYesVotes::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetYesVotes, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'W_VotePopUp_gamepad_C_GetYesVotes::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetYesVotes, K2Node_DynamicCast_AsCoop_GS) == 0x000020, "Member 'W_VotePopUp_gamepad_C_GetYesVotes::K2Node_DynamicCast_AsCoop_GS' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetYesVotes, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'W_VotePopUp_gamepad_C_GetYesVotes::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetYesVotes, CallFunc_GetYesVotes_ReturnValue) == 0x00002C, "Member 'W_VotePopUp_gamepad_C_GetYesVotes::CallFunc_GetYesVotes_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VotePopUp_gamepad_C_GetYesVotes, CallFunc_Conv_IntToText_ReturnValue) == 0x000030, "Member 'W_VotePopUp_gamepad_C_GetYesVotes::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

}

