#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ConsoleHotkeys

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_ConsoleHotkeys.W_ConsoleHotkeys_C.BoolToVisibility
// 0x0003 (0x0003 - 0x0000)
struct W_ConsoleHotkeys_C_BoolToVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Visibility_0;                                      // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewLocalVar;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ConsoleHotkeys_C_BoolToVisibility) == 0x000001, "Wrong alignment on W_ConsoleHotkeys_C_BoolToVisibility");
static_assert(sizeof(W_ConsoleHotkeys_C_BoolToVisibility) == 0x000003, "Wrong size on W_ConsoleHotkeys_C_BoolToVisibility");
static_assert(offsetof(W_ConsoleHotkeys_C_BoolToVisibility, Visible) == 0x000000, "Member 'W_ConsoleHotkeys_C_BoolToVisibility::Visible' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_BoolToVisibility, Visibility_0) == 0x000001, "Member 'W_ConsoleHotkeys_C_BoolToVisibility::Visibility_0' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_BoolToVisibility, NewLocalVar) == 0x000002, "Member 'W_ConsoleHotkeys_C_BoolToVisibility::NewLocalVar' has a wrong offset!");

// Function W_ConsoleHotkeys.W_ConsoleHotkeys_C.DPadDownPressed
// 0x0001 (0x0001 - 0x0000)
struct W_ConsoleHotkeys_C_DPadDownPressed final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ConsoleHotkeys_C_DPadDownPressed) == 0x000001, "Wrong alignment on W_ConsoleHotkeys_C_DPadDownPressed");
static_assert(sizeof(W_ConsoleHotkeys_C_DPadDownPressed) == 0x000001, "Wrong size on W_ConsoleHotkeys_C_DPadDownPressed");
static_assert(offsetof(W_ConsoleHotkeys_C_DPadDownPressed, Pressed) == 0x000000, "Member 'W_ConsoleHotkeys_C_DPadDownPressed::Pressed' has a wrong offset!");

// Function W_ConsoleHotkeys.W_ConsoleHotkeys_C.DPadLeftPressed
// 0x0001 (0x0001 - 0x0000)
struct W_ConsoleHotkeys_C_DPadLeftPressed final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ConsoleHotkeys_C_DPadLeftPressed) == 0x000001, "Wrong alignment on W_ConsoleHotkeys_C_DPadLeftPressed");
static_assert(sizeof(W_ConsoleHotkeys_C_DPadLeftPressed) == 0x000001, "Wrong size on W_ConsoleHotkeys_C_DPadLeftPressed");
static_assert(offsetof(W_ConsoleHotkeys_C_DPadLeftPressed, Pressed) == 0x000000, "Member 'W_ConsoleHotkeys_C_DPadLeftPressed::Pressed' has a wrong offset!");

// Function W_ConsoleHotkeys.W_ConsoleHotkeys_C.DpadPressedChange
// 0x0018 (0x0018 - 0x0000)
struct W_ConsoleHotkeys_C_DpadPressedChange final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 DpadImage;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_BoolToVisibility_Visibility;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ConsoleHotkeys_C_DpadPressedChange) == 0x000008, "Wrong alignment on W_ConsoleHotkeys_C_DpadPressedChange");
static_assert(sizeof(W_ConsoleHotkeys_C_DpadPressedChange) == 0x000018, "Wrong size on W_ConsoleHotkeys_C_DpadPressedChange");
static_assert(offsetof(W_ConsoleHotkeys_C_DpadPressedChange, Visible) == 0x000000, "Member 'W_ConsoleHotkeys_C_DpadPressedChange::Visible' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_DpadPressedChange, DpadImage) == 0x000008, "Member 'W_ConsoleHotkeys_C_DpadPressedChange::DpadImage' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_DpadPressedChange, CallFunc_BoolToVisibility_Visibility) == 0x000010, "Member 'W_ConsoleHotkeys_C_DpadPressedChange::CallFunc_BoolToVisibility_Visibility' has a wrong offset!");

// Function W_ConsoleHotkeys.W_ConsoleHotkeys_C.DPadRightPressed
// 0x0001 (0x0001 - 0x0000)
struct W_ConsoleHotkeys_C_DPadRightPressed final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ConsoleHotkeys_C_DPadRightPressed) == 0x000001, "Wrong alignment on W_ConsoleHotkeys_C_DPadRightPressed");
static_assert(sizeof(W_ConsoleHotkeys_C_DPadRightPressed) == 0x000001, "Wrong size on W_ConsoleHotkeys_C_DPadRightPressed");
static_assert(offsetof(W_ConsoleHotkeys_C_DPadRightPressed, Pressed) == 0x000000, "Member 'W_ConsoleHotkeys_C_DPadRightPressed::Pressed' has a wrong offset!");

// Function W_ConsoleHotkeys.W_ConsoleHotkeys_C.DPadUpPressed
// 0x0001 (0x0001 - 0x0000)
struct W_ConsoleHotkeys_C_DPadUpPressed final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ConsoleHotkeys_C_DPadUpPressed) == 0x000001, "Wrong alignment on W_ConsoleHotkeys_C_DPadUpPressed");
static_assert(sizeof(W_ConsoleHotkeys_C_DPadUpPressed) == 0x000001, "Wrong size on W_ConsoleHotkeys_C_DPadUpPressed");
static_assert(offsetof(W_ConsoleHotkeys_C_DPadUpPressed, Pressed) == 0x000000, "Member 'W_ConsoleHotkeys_C_DPadUpPressed::Pressed' has a wrong offset!");

// Function W_ConsoleHotkeys.W_ConsoleHotkeys_C.ExecuteUbergraph_W_ConsoleHotkeys
// 0x0048 (0x0048 - 0x0000)
struct W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Pressed_3;                            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Pressed_2;                            // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Pressed_1;                            // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Pressed;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 K2Node_Event_Icon;                                 // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Active;                               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActiveWidgetIndex_ReturnValue;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 K2Node_Select_Default_1;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 K2Node_Select_Default_2;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 K2Node_Select_Default_3;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys) == 0x000008, "Wrong alignment on W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys");
static_assert(sizeof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys) == 0x000048, "Wrong size on W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, EntryPoint) == 0x000000, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, Temp_int_Variable) == 0x000004, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, Temp_int_Variable_1) == 0x000008, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, Temp_int_Variable_2) == 0x00000C, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, Temp_int_Variable_3) == 0x000010, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, K2Node_Event_Pressed_3) == 0x000014, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::K2Node_Event_Pressed_3' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, K2Node_Event_Pressed_2) == 0x000015, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::K2Node_Event_Pressed_2' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, K2Node_Event_Pressed_1) == 0x000016, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::K2Node_Event_Pressed_1' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, K2Node_Event_Pressed) == 0x000017, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::K2Node_Event_Pressed' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, K2Node_Event_Icon) == 0x000018, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::K2Node_Event_Icon' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, K2Node_Event_Active) == 0x000020, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::K2Node_Event_Active' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, CallFunc_GetActiveWidgetIndex_ReturnValue) == 0x000024, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::CallFunc_GetActiveWidgetIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, K2Node_Select_Default) == 0x000028, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, K2Node_Select_Default_1) == 0x000030, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, K2Node_Select_Default_2) == 0x000038, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys, K2Node_Select_Default_3) == 0x000040, "Member 'W_ConsoleHotkeys_C_ExecuteUbergraph_W_ConsoleHotkeys::K2Node_Select_Default_3' has a wrong offset!");

// Function W_ConsoleHotkeys.W_ConsoleHotkeys_C.SetIconActive
// 0x0010 (0x0010 - 0x0000)
struct W_ConsoleHotkeys_C_SetIconActive final
{
public:
	class UImage*                                 Icon;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ConsoleHotkeys_C_SetIconActive) == 0x000008, "Wrong alignment on W_ConsoleHotkeys_C_SetIconActive");
static_assert(sizeof(W_ConsoleHotkeys_C_SetIconActive) == 0x000010, "Wrong size on W_ConsoleHotkeys_C_SetIconActive");
static_assert(offsetof(W_ConsoleHotkeys_C_SetIconActive, Icon) == 0x000000, "Member 'W_ConsoleHotkeys_C_SetIconActive::Icon' has a wrong offset!");
static_assert(offsetof(W_ConsoleHotkeys_C_SetIconActive, Active) == 0x000008, "Member 'W_ConsoleHotkeys_C_SetIconActive::Active' has a wrong offset!");

}

