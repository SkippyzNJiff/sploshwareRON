#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PresetPreview_Gamepad

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_PresetPreview_Gamepad.W_PresetPreview_Gamepad_C
// 0x00D8 (0x0500 - 0x0428)
class UW_PresetPreview_Gamepad_C final : public UOverview_V2
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0428(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UW_ArmorOverviewSlot_C*                 ArmorOverview;                                     // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_LoadoutSlot_v2_C*                    Headwear;                                          // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             Loadout;                                           // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_LoadoutSlot_v2_C*                    LongTactical;                                      // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_LoadoutSlot_v2_C*                    Primary;                                           // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_LoadoutSlot_v2_C*                    Secondary;                                         // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MunitionsOverviewSlot_C*             W_MunitionsSlot;                                   // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(const class FString& Name)> CharacterChanged;                      // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         CharacterIndex;                                    // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Character_Index;                                   // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseGamepad;                                       // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULoadout_V2*                            Loadout_V2;                                        // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                LastHovered;                                       // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ULoadoutSlot_V2*                        DefaultFocus;                                      // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class ULoadoutSlot_V2*>                LoadoutSlots;                                      // 0x04A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class FString, class FText>              LoadoutPresetOptions;                              // 0x04B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void BackPage(bool* Handled);
	void ChangePage(class FName PageName);
	void Construct();
	void ExecuteUbergraph_W_PresetPreview_Gamepad(int32 EntryPoint);
	void Hide(double Delay, bool Collapse);
	void OnInitialized();
	void PresetApplied(const class FString& Name_0, const struct FSavedLoadout& Loadout_0);
	void RefreshOverviewSlots(const struct FSavedLoadout& Current_Loadout);
	void Reveal(double Delay);
	void SetInputMode(bool IsGamepad);
	void Update_Active_Character(const struct FSavedLoadout& Current_Loadout);
	void UpdateStyle(bool bUseGamepad_0);

	class UWidget* BP_GetDesiredFocusTarget() const;
	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_PresetPreview_Gamepad_C">();
	}
	static class UW_PresetPreview_Gamepad_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_PresetPreview_Gamepad_C>();
	}
};
static_assert(alignof(UW_PresetPreview_Gamepad_C) == 0x000008, "Wrong alignment on UW_PresetPreview_Gamepad_C");
static_assert(sizeof(UW_PresetPreview_Gamepad_C) == 0x000500, "Wrong size on UW_PresetPreview_Gamepad_C");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, UberGraphFrame) == 0x000428, "Member 'UW_PresetPreview_Gamepad_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, ArmorOverview) == 0x000430, "Member 'UW_PresetPreview_Gamepad_C::ArmorOverview' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, Headwear) == 0x000438, "Member 'UW_PresetPreview_Gamepad_C::Headwear' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, Loadout) == 0x000440, "Member 'UW_PresetPreview_Gamepad_C::Loadout' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, LongTactical) == 0x000448, "Member 'UW_PresetPreview_Gamepad_C::LongTactical' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, Primary) == 0x000450, "Member 'UW_PresetPreview_Gamepad_C::Primary' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, Secondary) == 0x000458, "Member 'UW_PresetPreview_Gamepad_C::Secondary' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, W_MunitionsSlot) == 0x000460, "Member 'UW_PresetPreview_Gamepad_C::W_MunitionsSlot' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, CharacterChanged) == 0x000468, "Member 'UW_PresetPreview_Gamepad_C::CharacterChanged' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, CharacterIndex) == 0x000478, "Member 'UW_PresetPreview_Gamepad_C::CharacterIndex' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, Character_Index) == 0x00047C, "Member 'UW_PresetPreview_Gamepad_C::Character_Index' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, bUseGamepad) == 0x000480, "Member 'UW_PresetPreview_Gamepad_C::bUseGamepad' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, Loadout_V2) == 0x000488, "Member 'UW_PresetPreview_Gamepad_C::Loadout_V2' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, LastHovered) == 0x000490, "Member 'UW_PresetPreview_Gamepad_C::LastHovered' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, DefaultFocus) == 0x000498, "Member 'UW_PresetPreview_Gamepad_C::DefaultFocus' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, LoadoutSlots) == 0x0004A0, "Member 'UW_PresetPreview_Gamepad_C::LoadoutSlots' has a wrong offset!");
static_assert(offsetof(UW_PresetPreview_Gamepad_C, LoadoutPresetOptions) == 0x0004B0, "Member 'UW_PresetPreview_Gamepad_C::LoadoutPresetOptions' has a wrong offset!");

}

