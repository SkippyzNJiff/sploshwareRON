#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ExplosiveVestGibs

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ExplosiveVestGibs.ExplosiveVestGibs_C
// 0x0070 (0x0310 - 0x02A0)
class AExplosiveVestGibs_C final : public AExplosionGibs
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   HeadGib;                                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RightLegGib;                                       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LeftLegGib;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RightArmGib;                                       // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LeftArmGib;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TorsoGib;                                          // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               HeadBlood;                                         // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               RightArmBlood;                                     // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               LeftArmBlood;                                      // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               RightLegBlood;                                     // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               LeftLegBlood;                                      // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         DecalCount;                                        // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ExplosiveVestGibs(int32 EntryPoint);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SetupGib(class USkeletalMeshComponent* Mesh, class UStaticMeshComponent* GibMesh, class FName Socket);
	void SetupGibsForSkeletalMesh(const class USkeletalMeshComponent* Mesh);
	void StopBleeds();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ExplosiveVestGibs_C">();
	}
	static class AExplosiveVestGibs_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AExplosiveVestGibs_C>();
	}
};
static_assert(alignof(AExplosiveVestGibs_C) == 0x000008, "Wrong alignment on AExplosiveVestGibs_C");
static_assert(sizeof(AExplosiveVestGibs_C) == 0x000310, "Wrong size on AExplosiveVestGibs_C");
static_assert(offsetof(AExplosiveVestGibs_C, UberGraphFrame) == 0x0002A0, "Member 'AExplosiveVestGibs_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AExplosiveVestGibs_C, HeadGib) == 0x0002A8, "Member 'AExplosiveVestGibs_C::HeadGib' has a wrong offset!");
static_assert(offsetof(AExplosiveVestGibs_C, RightLegGib) == 0x0002B0, "Member 'AExplosiveVestGibs_C::RightLegGib' has a wrong offset!");
static_assert(offsetof(AExplosiveVestGibs_C, LeftLegGib) == 0x0002B8, "Member 'AExplosiveVestGibs_C::LeftLegGib' has a wrong offset!");
static_assert(offsetof(AExplosiveVestGibs_C, RightArmGib) == 0x0002C0, "Member 'AExplosiveVestGibs_C::RightArmGib' has a wrong offset!");
static_assert(offsetof(AExplosiveVestGibs_C, LeftArmGib) == 0x0002C8, "Member 'AExplosiveVestGibs_C::LeftArmGib' has a wrong offset!");
static_assert(offsetof(AExplosiveVestGibs_C, TorsoGib) == 0x0002D0, "Member 'AExplosiveVestGibs_C::TorsoGib' has a wrong offset!");
static_assert(offsetof(AExplosiveVestGibs_C, HeadBlood) == 0x0002D8, "Member 'AExplosiveVestGibs_C::HeadBlood' has a wrong offset!");
static_assert(offsetof(AExplosiveVestGibs_C, RightArmBlood) == 0x0002E0, "Member 'AExplosiveVestGibs_C::RightArmBlood' has a wrong offset!");
static_assert(offsetof(AExplosiveVestGibs_C, LeftArmBlood) == 0x0002E8, "Member 'AExplosiveVestGibs_C::LeftArmBlood' has a wrong offset!");
static_assert(offsetof(AExplosiveVestGibs_C, RightLegBlood) == 0x0002F0, "Member 'AExplosiveVestGibs_C::RightLegBlood' has a wrong offset!");
static_assert(offsetof(AExplosiveVestGibs_C, LeftLegBlood) == 0x0002F8, "Member 'AExplosiveVestGibs_C::LeftLegBlood' has a wrong offset!");
static_assert(offsetof(AExplosiveVestGibs_C, DefaultSceneRoot) == 0x000300, "Member 'AExplosiveVestGibs_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AExplosiveVestGibs_C, DecalCount) == 0x000308, "Member 'AExplosiveVestGibs_C::DecalCount' has a wrong offset!");

}

