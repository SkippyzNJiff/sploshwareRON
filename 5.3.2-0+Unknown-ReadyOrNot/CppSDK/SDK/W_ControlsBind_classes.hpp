#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ControlsBind

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "InputRemapping_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "EInputKeyCategory_structs.hpp"
#include "KeyModifiers_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_ControlsBind.W_ControlsBind_C
// 0x02A8 (0x0648 - 0x03A0)
class UW_ControlsBind_C final : public UControlsBind
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Button_Disabled;                                   // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Button_Dn;                                         // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Button_Hi;                                         // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Button_Up;                                         // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ClickListener;                                     // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                KeybindButton;                                     // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DescriptionWidget_0;                               // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FText                                   DescriptionText;                                   // 0x03E0(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   ChangeBindFormat;                                  // 0x03F8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FActionMappingStruct                   ActionMappingData_0;                               // 0x0410(0x0028)(Edit, BlueprintVisible)
	struct FAxisMappingStruct                     AxisMappingData_0;                                 // 0x0438(0x0028)(Edit, BlueprintVisible)
	bool                                          bIsAxis0;                                          // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_461[0x3];                                      // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BindIndex_0;                                       // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   UnboundText_0;                                     // 0x0468(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKey                                   Key;                                               // 0x0480(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<EKeyModifiers>                         KeyModifiers;                                      // 0x0498(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class UW_ControlsBind_C* CallingWidget)> OnHovered;                // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_ControlsBind_C* CallingWidget)> OnUnhovered;              // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_ControlsBind_C* CallingWidget)> OnPressed;                // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_ControlsBind_C* CallingWidget)> OnReleased;               // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_ControlsBind_C* CallingWidget)> OnBindingStarted;         // 0x04E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_ControlsBind_C* CallingWidget)> OnBindingCanceled;        // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_ControlsBind_C* CallingWidget, const struct FKey& NewKey)> OnBindingCommitted; // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FName                                   BindName_0;                                        // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Mod_Shift;                                         // 0x0520(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Mod_Ctrl;                                          // 0x0538(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Mod_Alt;                                           // 0x0550(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Mod_Cmd;                                           // 0x0568(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bListeningForKeystrokes0;                          // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_581[0x7];                                      // 0x0581(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BindFriendlyName_0;                                // 0x0588(0x0018)(Edit, BlueprintVisible)
	class UTextBlock*                             BindNotificationWidget_0;                          // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        AxisScale_0;                                       // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_ControlsBind_C*                      PairedKeybind;                                     // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             KeybindHoveredSoundEffect;                         // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UFMODEvent*                             KeybindStartBindingSoundEffect;                    // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class UW_ControlsBind_C* CallingBind, TArray<struct FActionMappingStruct>& ActionMappings, TArray<struct FAxisMappingStruct>& AxisMappings, const struct FKey& Key, TArray<class FText>& ConflictBindsText)> OnConflictingBindDetected; // 0x05C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FKey                                   PendingNewKey_0;                                   // 0x05D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	EInputKeyCategory                             KeyCategory_0;                                     // 0x05F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                SettingsMenu_0;                                    // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           ConflictBindFriendlyNamesList_0;                   // 0x0600(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FAxisMappingStruct>             ConflictingAxes;                                   // 0x0610(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FActionMappingStruct>           ConflictingActions;                                // 0x0620(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class FText BindFriendlyName)> OnUnbindableKeyReboundAttempted;    // 0x0630(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsReadOnly;                                       // 0x0640(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void Add_Conflicting_Keybinds_to_List_OLD(class FName MappingName, double Scale, TArray<struct FAxisMappingStruct>& Axes, TArray<struct FActionMappingStruct>& Actions);
	void Add_Keybinds_to_List_OLD(TArray<struct FSKeybinding>& Keybinds, class FName AxisMapping, double Scale, TArray<struct FAxisMappingStruct>& AxesList, TArray<struct FActionMappingStruct>& ActionsList);
	void Binding_Confirmed();
	void BndEvt__KeybindButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__KeybindButton_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();
	void BndEvt__KeybindButton_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature();
	void BndEvt__KeybindButton_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__KeybindButton_K2Node_ComponentBoundEvent_4_OnButtonHoverEvent__DelegateSignature();
	struct FEventReply Click_Listener_Button_Down(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void Construct();
	void Destruct();
	void ExecuteUbergraph_W_ControlsBind(int32 EntryPoint);
	void Get_Conflicting_Keybind_Text_OLD(const class FText& RequiredKeybindName, class FText* Text);
	void Get_Conflicting_Keybinds_when_Valid_OLD(TArray<struct FAxisMappingStruct>& Axes, TArray<struct FActionMappingStruct>& Actions, bool* bHasConflict, TArray<struct FAxisMappingStruct>* ConflictingAxes_0, TArray<struct FActionMappingStruct>* ConflictingActions_0);
	void GetOtherBindingIndex(int32* Value);
	struct FEventReply HandleKeyDown(const struct FGeometry& My_Geometry, const struct FKeyEvent& In_Key_Event);
	void HandleMouseButtonDown(const struct FPointerEvent& PointerEvent, struct FEventReply* Reply);
	struct FEventReply HandleMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent);
	void Key_Event_Received(const struct FKey& KeyIn);
	void OnIllegalBindAttempted(const class FText& BindFriendlyName_0);
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnPreviewKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void PreConstruct(bool IsDesignTime);
	void Remove_Conflict_Keybinds_OLD(TArray<struct FAxisMappingStruct>& Axes, TArray<struct FActionMappingStruct>& Actions);
	void SetDisabled(bool Disabled);
	void SetupDescription();
	void UnbindAllEvents();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_ControlsBind_C">();
	}
	static class UW_ControlsBind_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_ControlsBind_C>();
	}
};
static_assert(alignof(UW_ControlsBind_C) == 0x000008, "Wrong alignment on UW_ControlsBind_C");
static_assert(sizeof(UW_ControlsBind_C) == 0x000648, "Wrong size on UW_ControlsBind_C");
static_assert(offsetof(UW_ControlsBind_C, UberGraphFrame) == 0x0003A0, "Member 'UW_ControlsBind_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Button_Disabled) == 0x0003A8, "Member 'UW_ControlsBind_C::Button_Disabled' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Button_Dn) == 0x0003B0, "Member 'UW_ControlsBind_C::Button_Dn' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Button_Hi) == 0x0003B8, "Member 'UW_ControlsBind_C::Button_Hi' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Button_Up) == 0x0003C0, "Member 'UW_ControlsBind_C::Button_Up' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, ClickListener) == 0x0003C8, "Member 'UW_ControlsBind_C::ClickListener' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, KeybindButton) == 0x0003D0, "Member 'UW_ControlsBind_C::KeybindButton' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, DescriptionWidget_0) == 0x0003D8, "Member 'UW_ControlsBind_C::DescriptionWidget_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, DescriptionText) == 0x0003E0, "Member 'UW_ControlsBind_C::DescriptionText' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, ChangeBindFormat) == 0x0003F8, "Member 'UW_ControlsBind_C::ChangeBindFormat' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, ActionMappingData_0) == 0x000410, "Member 'UW_ControlsBind_C::ActionMappingData_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, AxisMappingData_0) == 0x000438, "Member 'UW_ControlsBind_C::AxisMappingData_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, bIsAxis0) == 0x000460, "Member 'UW_ControlsBind_C::bIsAxis0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, BindIndex_0) == 0x000464, "Member 'UW_ControlsBind_C::BindIndex_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, UnboundText_0) == 0x000468, "Member 'UW_ControlsBind_C::UnboundText_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Key) == 0x000480, "Member 'UW_ControlsBind_C::Key' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, KeyModifiers) == 0x000498, "Member 'UW_ControlsBind_C::KeyModifiers' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnHovered) == 0x0004A8, "Member 'UW_ControlsBind_C::OnHovered' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnUnhovered) == 0x0004B8, "Member 'UW_ControlsBind_C::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnPressed) == 0x0004C8, "Member 'UW_ControlsBind_C::OnPressed' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnReleased) == 0x0004D8, "Member 'UW_ControlsBind_C::OnReleased' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnBindingStarted) == 0x0004E8, "Member 'UW_ControlsBind_C::OnBindingStarted' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnBindingCanceled) == 0x0004F8, "Member 'UW_ControlsBind_C::OnBindingCanceled' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnBindingCommitted) == 0x000508, "Member 'UW_ControlsBind_C::OnBindingCommitted' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, BindName_0) == 0x000518, "Member 'UW_ControlsBind_C::BindName_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Mod_Shift) == 0x000520, "Member 'UW_ControlsBind_C::Mod_Shift' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Mod_Ctrl) == 0x000538, "Member 'UW_ControlsBind_C::Mod_Ctrl' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Mod_Alt) == 0x000550, "Member 'UW_ControlsBind_C::Mod_Alt' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Mod_Cmd) == 0x000568, "Member 'UW_ControlsBind_C::Mod_Cmd' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, bListeningForKeystrokes0) == 0x000580, "Member 'UW_ControlsBind_C::bListeningForKeystrokes0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, BindFriendlyName_0) == 0x000588, "Member 'UW_ControlsBind_C::BindFriendlyName_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, BindNotificationWidget_0) == 0x0005A0, "Member 'UW_ControlsBind_C::BindNotificationWidget_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, AxisScale_0) == 0x0005A8, "Member 'UW_ControlsBind_C::AxisScale_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, PairedKeybind) == 0x0005B0, "Member 'UW_ControlsBind_C::PairedKeybind' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, KeybindHoveredSoundEffect) == 0x0005B8, "Member 'UW_ControlsBind_C::KeybindHoveredSoundEffect' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, KeybindStartBindingSoundEffect) == 0x0005C0, "Member 'UW_ControlsBind_C::KeybindStartBindingSoundEffect' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnConflictingBindDetected) == 0x0005C8, "Member 'UW_ControlsBind_C::OnConflictingBindDetected' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, PendingNewKey_0) == 0x0005D8, "Member 'UW_ControlsBind_C::PendingNewKey_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, KeyCategory_0) == 0x0005F0, "Member 'UW_ControlsBind_C::KeyCategory_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, SettingsMenu_0) == 0x0005F8, "Member 'UW_ControlsBind_C::SettingsMenu_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, ConflictBindFriendlyNamesList_0) == 0x000600, "Member 'UW_ControlsBind_C::ConflictBindFriendlyNamesList_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, ConflictingAxes) == 0x000610, "Member 'UW_ControlsBind_C::ConflictingAxes' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, ConflictingActions) == 0x000620, "Member 'UW_ControlsBind_C::ConflictingActions' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnUnbindableKeyReboundAttempted) == 0x000630, "Member 'UW_ControlsBind_C::OnUnbindableKeyReboundAttempted' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, bIsReadOnly) == 0x000640, "Member 'UW_ControlsBind_C::bIsReadOnly' has a wrong offset!");

}

