#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AimAssistSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"
#include "AimAssistSystem_structs.hpp"


namespace SDK
{

// Class AimAssistSystem.UASAimAssistComponent
// 0x01C8 (0x0268 - 0x00A0)
class UUASAimAssistComponent : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class UUASAimAssistConfigDataAsset* NewAsset)> OnAimDataAssetChangedDelegate; // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bEnableStickiness;                                 // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMagnetism;                                  // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableScaling;                                    // 0x00B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScalingByDPI;                                     // 0x00B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAutoAim;                                    // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSnapToTarget;                               // 0x00B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawCircles;                                      // 0x00B6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawCrosshair;                                    // 0x00B7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawWeights;                                      // 0x00B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDebugOverlayBox;                                  // 0x00B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowValidTargetSockets;                           // 0x00BA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDebugTargetTraces;                                // 0x00BB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUASAimAssistConfigDataAsset*           AimAssistDataAsset;                                // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TargetsDetectionProfileName;                       // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ObstacleCheckProfileName;                          // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldCharactersBlockTrace;                       // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D9[0x18F];                                     // 0x00D9(0x018F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelSnapToTarget();
	void ExecuteSnapToTarget();
	bool GetDrawAimBox();
	bool GetDrawCircles();
	bool GetDrawCrosshair();
	bool GetDrawSockets();
	bool GetDrawWeights();
	bool GetEnableAutoAim();
	bool GetEnableMagnetism();
	bool GetEnableSnapToTarget();
	bool GetEnableStickiness();
	bool GetEnableZoneScaling();
	bool GetMouseActive();
	bool IsAnimationBlocking();
	void OnTargetDestroyed(class AActor* DestroyedActor);
	void SetAimAssistDataAsset(class UUASAimAssistConfigDataAsset* DataAsset);
	void SetDrawAimBox(bool Enable);
	void SetDrawCircles(bool Enable);
	void SetDrawCrosshair(bool Enable);
	void SetDrawSockets(bool Enable);
	void SetDrawWeights(bool Enable);
	void SetEnableAutoAim(bool Enable);
	void SetEnableMagnetism(bool Enable);
	void SetEnableSnapToTarget(bool Enable);
	void SetEnableStickiness(bool Enable);
	void SetEnableZoneScaling(bool Enable);
	void SetMouseActive(bool Enable);
	void SetScopeSizeFactor(const float SizeFactor);
	void SetWeaponAimPoint(const struct FVector2D& AimPoint);
	void SetWeaponBulletSpawnLocation(const struct FVector& BulletSpawnLocation);

	float CalculateSocketDistance(const struct FUASAimAssistTargetData& TargetData) const;
	float CalculateSocketWeight(const struct FUASAimAssistTargetData& TargetData) const;
	void GetControlMultipliers(float* Pitch, float* Yaw) const;
	const struct FVector2D GetCrosshairPosition() const;
	struct FRotator GetRotationToCrosshairDirection(const struct FVector& From, class FName TraceProfileName, float MinDistanceToRotateToTarget, float Distance) const;
	bool ShouldSocketBeConsidered(const struct FUASAimAssistTargetData& TargetData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UASAimAssistComponent">();
	}
	static class UUASAimAssistComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUASAimAssistComponent>();
	}
};
static_assert(alignof(UUASAimAssistComponent) == 0x000008, "Wrong alignment on UUASAimAssistComponent");
static_assert(sizeof(UUASAimAssistComponent) == 0x000268, "Wrong size on UUASAimAssistComponent");
static_assert(offsetof(UUASAimAssistComponent, OnAimDataAssetChangedDelegate) == 0x0000A0, "Member 'UUASAimAssistComponent::OnAimDataAssetChangedDelegate' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, bEnableStickiness) == 0x0000B0, "Member 'UUASAimAssistComponent::bEnableStickiness' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, bEnableMagnetism) == 0x0000B1, "Member 'UUASAimAssistComponent::bEnableMagnetism' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, bEnableScaling) == 0x0000B2, "Member 'UUASAimAssistComponent::bEnableScaling' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, bScalingByDPI) == 0x0000B3, "Member 'UUASAimAssistComponent::bScalingByDPI' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, bEnableAutoAim) == 0x0000B4, "Member 'UUASAimAssistComponent::bEnableAutoAim' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, bEnableSnapToTarget) == 0x0000B5, "Member 'UUASAimAssistComponent::bEnableSnapToTarget' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, bDrawCircles) == 0x0000B6, "Member 'UUASAimAssistComponent::bDrawCircles' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, bDrawCrosshair) == 0x0000B7, "Member 'UUASAimAssistComponent::bDrawCrosshair' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, bDrawWeights) == 0x0000B8, "Member 'UUASAimAssistComponent::bDrawWeights' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, bDebugOverlayBox) == 0x0000B9, "Member 'UUASAimAssistComponent::bDebugOverlayBox' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, bShowValidTargetSockets) == 0x0000BA, "Member 'UUASAimAssistComponent::bShowValidTargetSockets' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, bDebugTargetTraces) == 0x0000BB, "Member 'UUASAimAssistComponent::bDebugTargetTraces' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, AimAssistDataAsset) == 0x0000C0, "Member 'UUASAimAssistComponent::AimAssistDataAsset' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, TargetsDetectionProfileName) == 0x0000C8, "Member 'UUASAimAssistComponent::TargetsDetectionProfileName' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, ObstacleCheckProfileName) == 0x0000D0, "Member 'UUASAimAssistComponent::ObstacleCheckProfileName' has a wrong offset!");
static_assert(offsetof(UUASAimAssistComponent, bShouldCharactersBlockTrace) == 0x0000D8, "Member 'UUASAimAssistComponent::bShouldCharactersBlockTrace' has a wrong offset!");

// Class AimAssistSystem.UASAimAssistConfigDataAsset
// 0x0238 (0x0268 - 0x0030)
class UUASAimAssistConfigDataAsset final : public UDataAsset
{
public:
	float                                         UpdateTargetsRate;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AimAreaExtents;                                    // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQuadraticDistance;                                // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeMoveSpeedWeight;                           // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveSpeedCoefficient;                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecentlySeenTargetTrackingDuration;                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStickinessZoneConfig;                             // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUASStickinessZoneConfig               StickinessZoneConfig;                              // 0x0060(0x0118)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bMagnetismZoneConfig;                              // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUASMagnetismZoneConfig                MagnetismZoneConfig;                               // 0x017C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bScalingZoneConfig;                                // 0x0184(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUASZonesScalingConfig                 ZonesScalingConfig;                                // 0x0188(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bAutoAimConfig;                                    // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUASAutoAimConfig                      AutoAimConfig;                                     // 0x0214(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSnapToTargetConfig;                               // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUASSnapToTargetConfig                 SnapToTargetConfig;                                // 0x0234(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              CrosshairOffset;                                   // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableStickiness;                                  // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableMagnetism;                                   // 0x0261(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableZoneScaling;                                 // 0x0262(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableAutoAim;                                     // 0x0263(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSnapToTarget;                                // 0x0264(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_265[0x3];                                      // 0x0265(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UASAimAssistConfigDataAsset">();
	}
	static class UUASAimAssistConfigDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUASAimAssistConfigDataAsset>();
	}
};
static_assert(alignof(UUASAimAssistConfigDataAsset) == 0x000008, "Wrong alignment on UUASAimAssistConfigDataAsset");
static_assert(sizeof(UUASAimAssistConfigDataAsset) == 0x000268, "Wrong size on UUASAimAssistConfigDataAsset");
static_assert(offsetof(UUASAimAssistConfigDataAsset, UpdateTargetsRate) == 0x000030, "Member 'UUASAimAssistConfigDataAsset::UpdateTargetsRate' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, AimAreaExtents) == 0x000038, "Member 'UUASAimAssistConfigDataAsset::AimAreaExtents' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, bQuadraticDistance) == 0x000050, "Member 'UUASAimAssistConfigDataAsset::bQuadraticDistance' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, bIncludeMoveSpeedWeight) == 0x000051, "Member 'UUASAimAssistConfigDataAsset::bIncludeMoveSpeedWeight' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, MoveSpeedCoefficient) == 0x000054, "Member 'UUASAimAssistConfigDataAsset::MoveSpeedCoefficient' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, RecentlySeenTargetTrackingDuration) == 0x000058, "Member 'UUASAimAssistConfigDataAsset::RecentlySeenTargetTrackingDuration' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, bStickinessZoneConfig) == 0x00005C, "Member 'UUASAimAssistConfigDataAsset::bStickinessZoneConfig' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, StickinessZoneConfig) == 0x000060, "Member 'UUASAimAssistConfigDataAsset::StickinessZoneConfig' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, bMagnetismZoneConfig) == 0x000178, "Member 'UUASAimAssistConfigDataAsset::bMagnetismZoneConfig' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, MagnetismZoneConfig) == 0x00017C, "Member 'UUASAimAssistConfigDataAsset::MagnetismZoneConfig' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, bScalingZoneConfig) == 0x000184, "Member 'UUASAimAssistConfigDataAsset::bScalingZoneConfig' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, ZonesScalingConfig) == 0x000188, "Member 'UUASAimAssistConfigDataAsset::ZonesScalingConfig' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, bAutoAimConfig) == 0x000210, "Member 'UUASAimAssistConfigDataAsset::bAutoAimConfig' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, AutoAimConfig) == 0x000214, "Member 'UUASAimAssistConfigDataAsset::AutoAimConfig' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, bSnapToTargetConfig) == 0x000230, "Member 'UUASAimAssistConfigDataAsset::bSnapToTargetConfig' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, SnapToTargetConfig) == 0x000234, "Member 'UUASAimAssistConfigDataAsset::SnapToTargetConfig' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, CrosshairOffset) == 0x000250, "Member 'UUASAimAssistConfigDataAsset::CrosshairOffset' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, EnableStickiness) == 0x000260, "Member 'UUASAimAssistConfigDataAsset::EnableStickiness' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, EnableMagnetism) == 0x000261, "Member 'UUASAimAssistConfigDataAsset::EnableMagnetism' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, EnableZoneScaling) == 0x000262, "Member 'UUASAimAssistConfigDataAsset::EnableZoneScaling' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, EnableAutoAim) == 0x000263, "Member 'UUASAimAssistConfigDataAsset::EnableAutoAim' has a wrong offset!");
static_assert(offsetof(UUASAimAssistConfigDataAsset, EnableSnapToTarget) == 0x000264, "Member 'UUASAimAssistConfigDataAsset::EnableSnapToTarget' has a wrong offset!");

// Class AimAssistSystem.ASAimAssistSubsystem
// 0x0010 (0x0040 - 0x0030)
class UASAimAssistSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ASAimAssistSubsystem">();
	}
	static class UASAimAssistSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UASAimAssistSubsystem>();
	}
};
static_assert(alignof(UASAimAssistSubsystem) == 0x000008, "Wrong alignment on UASAimAssistSubsystem");
static_assert(sizeof(UASAimAssistSubsystem) == 0x000040, "Wrong size on UASAimAssistSubsystem");

// Class AimAssistSystem.UASAimAssistTargetComponent
// 0x0020 (0x00C0 - 0x00A0)
class UUASAimAssistTargetComponent : public UActorComponent
{
public:
	class UMeshComponent*                         MeshComponent;                                     // 0x00A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAimAssistActive;                                // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AimTargetSocketNames;                              // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	float GetMoveSpeed();
	float GetWeightByState();
	class FString GetWeightLabel();
	void Init(class UMeshComponent* Mesh);
	bool ShouldAlwaysBlockTrace();
	bool ShouldConsiderWeight();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UASAimAssistTargetComponent">();
	}
	static class UUASAimAssistTargetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUASAimAssistTargetComponent>();
	}
};
static_assert(alignof(UUASAimAssistTargetComponent) == 0x000008, "Wrong alignment on UUASAimAssistTargetComponent");
static_assert(sizeof(UUASAimAssistTargetComponent) == 0x0000C0, "Wrong size on UUASAimAssistTargetComponent");
static_assert(offsetof(UUASAimAssistTargetComponent, MeshComponent) == 0x0000A0, "Member 'UUASAimAssistTargetComponent::MeshComponent' has a wrong offset!");
static_assert(offsetof(UUASAimAssistTargetComponent, bIsAimAssistActive) == 0x0000A8, "Member 'UUASAimAssistTargetComponent::bIsAimAssistActive' has a wrong offset!");
static_assert(offsetof(UUASAimAssistTargetComponent, AimTargetSocketNames) == 0x0000B0, "Member 'UUASAimAssistTargetComponent::AimTargetSocketNames' has a wrong offset!");

}

