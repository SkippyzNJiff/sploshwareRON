#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Compass_Increment

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_Compass_Increment.W_Compass_Increment_C.ExecuteUbergraph_W_Compass_Increment
// 0x0130 (0x0130 - 0x0000)
struct W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_DegreeToText_Return_Value;                // 0x0060(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNumeric_ReturnValue;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x008C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x00A8(0x0058)(HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_3;                           // 0x0104(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0114(0x0014)()
	float                                         K2Node_MakeStruct_Size_ImplicitCast;               // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment) == 0x000008, "Wrong alignment on W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment");
static_assert(sizeof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment) == 0x000130, "Wrong size on W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, EntryPoint) == 0x000000, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, Temp_bool_Variable) == 0x000004, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, Temp_int_Variable) == 0x000008, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, Temp_int_Variable_1) == 0x00000C, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, Temp_bool_Variable_1) == 0x000010, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, Temp_byte_Variable) == 0x000011, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, Temp_byte_Variable_1) == 0x000012, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, Temp_bool_Variable_2) == 0x000013, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, Temp_struct_Variable) == 0x000014, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, Temp_struct_Variable_1) == 0x000024, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, Temp_bool_Variable_3) == 0x000034, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, Temp_struct_Variable_2) == 0x000038, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, Temp_struct_Variable_3) == 0x000048, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, K2Node_Event_IsDesignTime) == 0x000058, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, CallFunc_DegreeToText_Return_Value) == 0x000060, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::CallFunc_DegreeToText_Return_Value' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, CallFunc_Conv_TextToString_ReturnValue) == 0x000078, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, CallFunc_IsNumeric_ReturnValue) == 0x000088, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::CallFunc_IsNumeric_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, K2Node_Select_Default) == 0x00008C, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, K2Node_Select_Default_1) == 0x00009C, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0000A0, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, K2Node_MakeStruct_SlateFontInfo) == 0x0000A8, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, K2Node_Select_Default_2) == 0x000100, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, K2Node_Select_Default_3) == 0x000104, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, K2Node_MakeStruct_SlateColor) == 0x000114, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment, K2Node_MakeStruct_Size_ImplicitCast) == 0x000128, "Member 'W_Compass_Increment_C_ExecuteUbergraph_W_Compass_Increment::K2Node_MakeStruct_Size_ImplicitCast' has a wrong offset!");

// Function W_Compass_Increment.W_Compass_Increment_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_Compass_Increment_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Compass_Increment_C_PreConstruct) == 0x000001, "Wrong alignment on W_Compass_Increment_C_PreConstruct");
static_assert(sizeof(W_Compass_Increment_C_PreConstruct) == 0x000001, "Wrong size on W_Compass_Increment_C_PreConstruct");
static_assert(offsetof(W_Compass_Increment_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_Compass_Increment_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_Compass_Increment.W_Compass_Increment_C.DegreeToText
// 0x0048 (0x0048 - 0x0000)
struct W_Compass_Increment_C_DegreeToText final
{
public:
	int32                                         InDegree;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Return_Value;                                      // 0x0008(0x0018)(Parm, OutParm)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0028(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_5;          // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_6;          // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_7;          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Compass_Increment_C_DegreeToText) == 0x000008, "Wrong alignment on W_Compass_Increment_C_DegreeToText");
static_assert(sizeof(W_Compass_Increment_C_DegreeToText) == 0x000048, "Wrong size on W_Compass_Increment_C_DegreeToText");
static_assert(offsetof(W_Compass_Increment_C_DegreeToText, InDegree) == 0x000000, "Member 'W_Compass_Increment_C_DegreeToText::InDegree' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_DegreeToText, Return_Value) == 0x000008, "Member 'W_Compass_Increment_C_DegreeToText::Return_Value' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_DegreeToText, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000020, "Member 'W_Compass_Increment_C_DegreeToText::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_DegreeToText, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000021, "Member 'W_Compass_Increment_C_DegreeToText::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_DegreeToText, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000022, "Member 'W_Compass_Increment_C_DegreeToText::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_DegreeToText, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000023, "Member 'W_Compass_Increment_C_DegreeToText::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_DegreeToText, CallFunc_Conv_IntToText_ReturnValue) == 0x000028, "Member 'W_Compass_Increment_C_DegreeToText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_DegreeToText, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x000040, "Member 'W_Compass_Increment_C_DegreeToText::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_DegreeToText, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000041, "Member 'W_Compass_Increment_C_DegreeToText::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_DegreeToText, CallFunc_EqualEqual_IntInt_ReturnValue_5) == 0x000042, "Member 'W_Compass_Increment_C_DegreeToText::CallFunc_EqualEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_DegreeToText, CallFunc_EqualEqual_IntInt_ReturnValue_6) == 0x000043, "Member 'W_Compass_Increment_C_DegreeToText::CallFunc_EqualEqual_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_DegreeToText, CallFunc_EqualEqual_IntInt_ReturnValue_7) == 0x000044, "Member 'W_Compass_Increment_C_DegreeToText::CallFunc_EqualEqual_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(W_Compass_Increment_C_DegreeToText, CallFunc_BooleanOR_ReturnValue) == 0x000045, "Member 'W_Compass_Increment_C_DegreeToText::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

