#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Customization_Slot

#include "Basic.hpp"

#include "CommonUI_classes.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "CommonInput_structs.hpp"
#include "UMG_structs.hpp"
#include "E_BoxShape_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Customization_Slot.W_Customization_Slot_C
// 0x0528 (0x0810 - 0x02E8)
class UW_Customization_Slot_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UW_Button_C*                            btn_Slot;                                          // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Variants;                                       // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 icn_variants;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonLazyImage*                       img_icon;                                          // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_Lock;                                          // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_Slash;                                         // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_Slash_2;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       lbl_Equipped;                                      // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       lbl_NoData;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          LockedOverlay;                                     // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          MissingImage;                                      // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Size_Slot;                                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          SlotBorder;                                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Tag;                                               // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_ItemName;                                      // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_Label;                                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       txt_VariantCount;                                  // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ULoadoutCustomization*                  Item;                                              // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   CustomLabel;                                       // 0x0380(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	ECustomizationType                            CustomizationType;                                 // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bDisplayAsSlot;                                    // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bEquipped;                                         // 0x039A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BoxShape                                    BoxShape;                                          // 0x039B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxSize;                                           // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bLocked;                                           // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UW_Customization_Slot_C* TriggeringSlot)> OnSlotClicked;     // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_Customization_Slot_C* TriggeringSlot)> OnSlotHovered;     // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnSlotUnhovered;                                   // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UW_Button_C*                            ParentButton;                                      // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bPressed;                                          // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHovered;                                          // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseGamepad;                                       // 0x03EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EB[0x1];                                      // 0x03EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            EquippedGreen;                                     // 0x03EC(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	struct FSlateColor                            SelectedRed;                                       // 0x0400(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	struct FSlateColor                            NormalGrey;                                        // 0x0414(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	struct FSlateColor                            HoveredWhite;                                      // 0x0428(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	struct FSlateColor                            DefaultWhite;                                      // 0x043C(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	bool                                          bShowItemName;                                     // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ECustomizationType, TSoftObjectPtr<class UTexture2D>> PlaceholderIcons;                     // 0x0458(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UTexture2D>              EmptyImage;                                        // 0x04A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              NullImage;                                         // 0x04D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 NormalButtonStyle;                                 // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GamepadButtonStyle;                                // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynMatSlash;                                       // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SlashLineThickness;                                // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisplayAsVariant;                                 // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bHighlighted;                                      // 0x0519(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51A[0x6];                                      // 0x051A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BlankBrush;                                        // 0x0520(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateBrush                            HighlightedBrush;                                  // 0x05F0(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class UW_Customization_Slot_C* TriggeringSlot)> OnSlotRightClickPressed; // 0x06C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnSlotRightClickReleased;                          // 0x06D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSlateBrush                            HoveredBrush;                                      // 0x06E0(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<ECustomizationType, class UFMODEvent*>   CategoryFMODTags;                                  // 0x07B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	ECustomizationType                            CurrentCustomizationSelection;                     // 0x0800(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BackPage(bool* Handled);
	void BindClick(class UW_Button_C* ParentButton_0);
	void BindDoubleClick(class UW_Button_C* ParentButton_0);
	void BindHovered(class UW_Button_C* ParentButton_0);
	void BindPressedState();
	void BindSelectedState(class UW_Button_C* ParentButton_0);
	void BindToButton(class UW_Button_C* ParentButton_0, bool BindClicks);
	void BindUnhovered();
	void BndEvt__W_Customization_Slot_btn_Slot_K2Node_ComponentBoundEvent_0_Hovered__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Customization_Slot_btn_Slot_K2Node_ComponentBoundEvent_1_Unhovered__DelegateSignature();
	void BndEvt__W_Customization_Slot_btn_Slot_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Customization_Slot_btn_Slot_K2Node_ComponentBoundEvent_5_OnRightMousePressed__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Customization_Slot_btn_Slot_K2Node_ComponentBoundEvent_6_OnRightMouseReleased__DelegateSignature();
	void ChangePage(class FName PageName);
	void Construct();
	void Deselect();
	void ExecuteUbergraph_W_Customization_Slot(int32 EntryPoint);
	void GetHeightByShape(double* Height);
	struct FLinearColor GetTagColor();
	void GetWidthByShape(double* Width);
	void Hide(double Delay, bool Collapse);
	void InputMethodChanged(ECommonInputType bNewInputType);
	void OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnFocusLost(const struct FFocusEvent& InFocusEvent);
	void OnInitialized();
	void PreConstruct(bool IsDesignTime);
	void Reveal(double Delay);
	void Select();
	void SetCustomIconTexture(class UTexture2D* IconTexture, bool MatchSize, const struct FVector2D& CustomSize, const struct FLinearColor& ColorAndOpacity_0);
	void SetEquipped(bool bEquipped_0);
	void SetHighlighted(bool Highlight);
	void SetHoveredState(bool Hovered);
	void SetInputMode(bool IsGamepad);
	void SetItem(class ULoadoutCustomization* Item_0);
	void SetLabelText(const class FText& InText);
	void SetLocked(bool IsLocked);
	void SetToggleable(bool Toggleable);
	void SetupColors();
	void SetVisualState(bool Hovered, bool Pressed, bool Equipped, bool Highlighted);
	void ShowMissingData(bool NoData);
	void UnbindFromButton();
	void UpdateIcon();
	void UpdateNameText();
	void UpdateStyle(bool bUseGamepad_0);
	void UpdateVariantCount();

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Customization_Slot_C">();
	}
	static class UW_Customization_Slot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Customization_Slot_C>();
	}
};
static_assert(alignof(UW_Customization_Slot_C) == 0x000010, "Wrong alignment on UW_Customization_Slot_C");
static_assert(sizeof(UW_Customization_Slot_C) == 0x000810, "Wrong size on UW_Customization_Slot_C");
static_assert(offsetof(UW_Customization_Slot_C, UberGraphFrame) == 0x0002E8, "Member 'UW_Customization_Slot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, btn_Slot) == 0x0002F0, "Member 'UW_Customization_Slot_C::btn_Slot' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, HB_Variants) == 0x0002F8, "Member 'UW_Customization_Slot_C::HB_Variants' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, icn_variants) == 0x000300, "Member 'UW_Customization_Slot_C::icn_variants' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, img_icon) == 0x000308, "Member 'UW_Customization_Slot_C::img_icon' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, img_Lock) == 0x000310, "Member 'UW_Customization_Slot_C::img_Lock' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, img_Slash) == 0x000318, "Member 'UW_Customization_Slot_C::img_Slash' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, img_Slash_2) == 0x000320, "Member 'UW_Customization_Slot_C::img_Slash_2' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, lbl_Equipped) == 0x000328, "Member 'UW_Customization_Slot_C::lbl_Equipped' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, lbl_NoData) == 0x000330, "Member 'UW_Customization_Slot_C::lbl_NoData' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, LockedOverlay) == 0x000338, "Member 'UW_Customization_Slot_C::LockedOverlay' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, MissingImage) == 0x000340, "Member 'UW_Customization_Slot_C::MissingImage' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Size_Slot) == 0x000348, "Member 'UW_Customization_Slot_C::Size_Slot' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, SlotBorder) == 0x000350, "Member 'UW_Customization_Slot_C::SlotBorder' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Tag) == 0x000358, "Member 'UW_Customization_Slot_C::Tag' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, txt_ItemName) == 0x000360, "Member 'UW_Customization_Slot_C::txt_ItemName' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, txt_Label) == 0x000368, "Member 'UW_Customization_Slot_C::txt_Label' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, txt_VariantCount) == 0x000370, "Member 'UW_Customization_Slot_C::txt_VariantCount' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Item) == 0x000378, "Member 'UW_Customization_Slot_C::Item' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, CustomLabel) == 0x000380, "Member 'UW_Customization_Slot_C::CustomLabel' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, CustomizationType) == 0x000398, "Member 'UW_Customization_Slot_C::CustomizationType' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bDisplayAsSlot) == 0x000399, "Member 'UW_Customization_Slot_C::bDisplayAsSlot' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bEquipped) == 0x00039A, "Member 'UW_Customization_Slot_C::bEquipped' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, BoxShape) == 0x00039B, "Member 'UW_Customization_Slot_C::BoxShape' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, MaxSize) == 0x0003A0, "Member 'UW_Customization_Slot_C::MaxSize' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bLocked) == 0x0003A8, "Member 'UW_Customization_Slot_C::bLocked' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, OnSlotClicked) == 0x0003B0, "Member 'UW_Customization_Slot_C::OnSlotClicked' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, OnSlotHovered) == 0x0003C0, "Member 'UW_Customization_Slot_C::OnSlotHovered' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, OnSlotUnhovered) == 0x0003D0, "Member 'UW_Customization_Slot_C::OnSlotUnhovered' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, ParentButton) == 0x0003E0, "Member 'UW_Customization_Slot_C::ParentButton' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bPressed) == 0x0003E8, "Member 'UW_Customization_Slot_C::bPressed' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bHovered) == 0x0003E9, "Member 'UW_Customization_Slot_C::bHovered' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bUseGamepad) == 0x0003EA, "Member 'UW_Customization_Slot_C::bUseGamepad' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, EquippedGreen) == 0x0003EC, "Member 'UW_Customization_Slot_C::EquippedGreen' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, SelectedRed) == 0x000400, "Member 'UW_Customization_Slot_C::SelectedRed' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, NormalGrey) == 0x000414, "Member 'UW_Customization_Slot_C::NormalGrey' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, HoveredWhite) == 0x000428, "Member 'UW_Customization_Slot_C::HoveredWhite' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, DefaultWhite) == 0x00043C, "Member 'UW_Customization_Slot_C::DefaultWhite' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bShowItemName) == 0x000450, "Member 'UW_Customization_Slot_C::bShowItemName' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, PlaceholderIcons) == 0x000458, "Member 'UW_Customization_Slot_C::PlaceholderIcons' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, EmptyImage) == 0x0004A8, "Member 'UW_Customization_Slot_C::EmptyImage' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, NullImage) == 0x0004D0, "Member 'UW_Customization_Slot_C::NullImage' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, NormalButtonStyle) == 0x0004F8, "Member 'UW_Customization_Slot_C::NormalButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, GamepadButtonStyle) == 0x000500, "Member 'UW_Customization_Slot_C::GamepadButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, DynMatSlash) == 0x000508, "Member 'UW_Customization_Slot_C::DynMatSlash' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, SlashLineThickness) == 0x000510, "Member 'UW_Customization_Slot_C::SlashLineThickness' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bDisplayAsVariant) == 0x000518, "Member 'UW_Customization_Slot_C::bDisplayAsVariant' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bHighlighted) == 0x000519, "Member 'UW_Customization_Slot_C::bHighlighted' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, BlankBrush) == 0x000520, "Member 'UW_Customization_Slot_C::BlankBrush' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, HighlightedBrush) == 0x0005F0, "Member 'UW_Customization_Slot_C::HighlightedBrush' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, OnSlotRightClickPressed) == 0x0006C0, "Member 'UW_Customization_Slot_C::OnSlotRightClickPressed' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, OnSlotRightClickReleased) == 0x0006D0, "Member 'UW_Customization_Slot_C::OnSlotRightClickReleased' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, HoveredBrush) == 0x0006E0, "Member 'UW_Customization_Slot_C::HoveredBrush' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, CategoryFMODTags) == 0x0007B0, "Member 'UW_Customization_Slot_C::CategoryFMODTags' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, CurrentCustomizationSelection) == 0x000800, "Member 'UW_Customization_Slot_C::CurrentCustomizationSelection' has a wrong offset!");

}

